ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"cpu_core.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	CPU_Name,16,4
  20              		.comm	CPU_TS_TmrFreq_Hz,4,4
  21              		.section	.rodata
  22              		.align	2
  23              		.type	CPU_CntLeadZerosTbl, %object
  24              		.size	CPU_CntLeadZerosTbl, 256
  25              	CPU_CntLeadZerosTbl:
  26 0000 08       		.byte	8
  27 0001 07       		.byte	7
  28 0002 06       		.byte	6
  29 0003 06       		.byte	6
  30 0004 05       		.byte	5
  31 0005 05       		.byte	5
  32 0006 05       		.byte	5
  33 0007 05       		.byte	5
  34 0008 04       		.byte	4
  35 0009 04       		.byte	4
  36 000a 04       		.byte	4
  37 000b 04       		.byte	4
  38 000c 04       		.byte	4
  39 000d 04       		.byte	4
  40 000e 04       		.byte	4
  41 000f 04       		.byte	4
  42 0010 03       		.byte	3
  43 0011 03       		.byte	3
  44 0012 03       		.byte	3
  45 0013 03       		.byte	3
  46 0014 03       		.byte	3
  47 0015 03       		.byte	3
  48 0016 03       		.byte	3
  49 0017 03       		.byte	3
  50 0018 03       		.byte	3
  51 0019 03       		.byte	3
  52 001a 03       		.byte	3
  53 001b 03       		.byte	3
  54 001c 03       		.byte	3
  55 001d 03       		.byte	3
  56 001e 03       		.byte	3
  57 001f 03       		.byte	3
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 2


  58 0020 02       		.byte	2
  59 0021 02       		.byte	2
  60 0022 02       		.byte	2
  61 0023 02       		.byte	2
  62 0024 02       		.byte	2
  63 0025 02       		.byte	2
  64 0026 02       		.byte	2
  65 0027 02       		.byte	2
  66 0028 02       		.byte	2
  67 0029 02       		.byte	2
  68 002a 02       		.byte	2
  69 002b 02       		.byte	2
  70 002c 02       		.byte	2
  71 002d 02       		.byte	2
  72 002e 02       		.byte	2
  73 002f 02       		.byte	2
  74 0030 02       		.byte	2
  75 0031 02       		.byte	2
  76 0032 02       		.byte	2
  77 0033 02       		.byte	2
  78 0034 02       		.byte	2
  79 0035 02       		.byte	2
  80 0036 02       		.byte	2
  81 0037 02       		.byte	2
  82 0038 02       		.byte	2
  83 0039 02       		.byte	2
  84 003a 02       		.byte	2
  85 003b 02       		.byte	2
  86 003c 02       		.byte	2
  87 003d 02       		.byte	2
  88 003e 02       		.byte	2
  89 003f 02       		.byte	2
  90 0040 01       		.byte	1
  91 0041 01       		.byte	1
  92 0042 01       		.byte	1
  93 0043 01       		.byte	1
  94 0044 01       		.byte	1
  95 0045 01       		.byte	1
  96 0046 01       		.byte	1
  97 0047 01       		.byte	1
  98 0048 01       		.byte	1
  99 0049 01       		.byte	1
 100 004a 01       		.byte	1
 101 004b 01       		.byte	1
 102 004c 01       		.byte	1
 103 004d 01       		.byte	1
 104 004e 01       		.byte	1
 105 004f 01       		.byte	1
 106 0050 01       		.byte	1
 107 0051 01       		.byte	1
 108 0052 01       		.byte	1
 109 0053 01       		.byte	1
 110 0054 01       		.byte	1
 111 0055 01       		.byte	1
 112 0056 01       		.byte	1
 113 0057 01       		.byte	1
 114 0058 01       		.byte	1
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 3


 115 0059 01       		.byte	1
 116 005a 01       		.byte	1
 117 005b 01       		.byte	1
 118 005c 01       		.byte	1
 119 005d 01       		.byte	1
 120 005e 01       		.byte	1
 121 005f 01       		.byte	1
 122 0060 01       		.byte	1
 123 0061 01       		.byte	1
 124 0062 01       		.byte	1
 125 0063 01       		.byte	1
 126 0064 01       		.byte	1
 127 0065 01       		.byte	1
 128 0066 01       		.byte	1
 129 0067 01       		.byte	1
 130 0068 01       		.byte	1
 131 0069 01       		.byte	1
 132 006a 01       		.byte	1
 133 006b 01       		.byte	1
 134 006c 01       		.byte	1
 135 006d 01       		.byte	1
 136 006e 01       		.byte	1
 137 006f 01       		.byte	1
 138 0070 01       		.byte	1
 139 0071 01       		.byte	1
 140 0072 01       		.byte	1
 141 0073 01       		.byte	1
 142 0074 01       		.byte	1
 143 0075 01       		.byte	1
 144 0076 01       		.byte	1
 145 0077 01       		.byte	1
 146 0078 01       		.byte	1
 147 0079 01       		.byte	1
 148 007a 01       		.byte	1
 149 007b 01       		.byte	1
 150 007c 01       		.byte	1
 151 007d 01       		.byte	1
 152 007e 01       		.byte	1
 153 007f 01       		.byte	1
 154 0080 00       		.byte	0
 155 0081 00       		.byte	0
 156 0082 00       		.byte	0
 157 0083 00       		.byte	0
 158 0084 00       		.byte	0
 159 0085 00       		.byte	0
 160 0086 00       		.byte	0
 161 0087 00       		.byte	0
 162 0088 00       		.byte	0
 163 0089 00       		.byte	0
 164 008a 00       		.byte	0
 165 008b 00       		.byte	0
 166 008c 00       		.byte	0
 167 008d 00       		.byte	0
 168 008e 00       		.byte	0
 169 008f 00       		.byte	0
 170 0090 00       		.byte	0
 171 0091 00       		.byte	0
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 4


 172 0092 00       		.byte	0
 173 0093 00       		.byte	0
 174 0094 00       		.byte	0
 175 0095 00       		.byte	0
 176 0096 00       		.byte	0
 177 0097 00       		.byte	0
 178 0098 00       		.byte	0
 179 0099 00       		.byte	0
 180 009a 00       		.byte	0
 181 009b 00       		.byte	0
 182 009c 00       		.byte	0
 183 009d 00       		.byte	0
 184 009e 00       		.byte	0
 185 009f 00       		.byte	0
 186 00a0 00       		.byte	0
 187 00a1 00       		.byte	0
 188 00a2 00       		.byte	0
 189 00a3 00       		.byte	0
 190 00a4 00       		.byte	0
 191 00a5 00       		.byte	0
 192 00a6 00       		.byte	0
 193 00a7 00       		.byte	0
 194 00a8 00       		.byte	0
 195 00a9 00       		.byte	0
 196 00aa 00       		.byte	0
 197 00ab 00       		.byte	0
 198 00ac 00       		.byte	0
 199 00ad 00       		.byte	0
 200 00ae 00       		.byte	0
 201 00af 00       		.byte	0
 202 00b0 00       		.byte	0
 203 00b1 00       		.byte	0
 204 00b2 00       		.byte	0
 205 00b3 00       		.byte	0
 206 00b4 00       		.byte	0
 207 00b5 00       		.byte	0
 208 00b6 00       		.byte	0
 209 00b7 00       		.byte	0
 210 00b8 00       		.byte	0
 211 00b9 00       		.byte	0
 212 00ba 00       		.byte	0
 213 00bb 00       		.byte	0
 214 00bc 00       		.byte	0
 215 00bd 00       		.byte	0
 216 00be 00       		.byte	0
 217 00bf 00       		.byte	0
 218 00c0 00       		.byte	0
 219 00c1 00       		.byte	0
 220 00c2 00       		.byte	0
 221 00c3 00       		.byte	0
 222 00c4 00       		.byte	0
 223 00c5 00       		.byte	0
 224 00c6 00       		.byte	0
 225 00c7 00       		.byte	0
 226 00c8 00       		.byte	0
 227 00c9 00       		.byte	0
 228 00ca 00       		.byte	0
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 5


 229 00cb 00       		.byte	0
 230 00cc 00       		.byte	0
 231 00cd 00       		.byte	0
 232 00ce 00       		.byte	0
 233 00cf 00       		.byte	0
 234 00d0 00       		.byte	0
 235 00d1 00       		.byte	0
 236 00d2 00       		.byte	0
 237 00d3 00       		.byte	0
 238 00d4 00       		.byte	0
 239 00d5 00       		.byte	0
 240 00d6 00       		.byte	0
 241 00d7 00       		.byte	0
 242 00d8 00       		.byte	0
 243 00d9 00       		.byte	0
 244 00da 00       		.byte	0
 245 00db 00       		.byte	0
 246 00dc 00       		.byte	0
 247 00dd 00       		.byte	0
 248 00de 00       		.byte	0
 249 00df 00       		.byte	0
 250 00e0 00       		.byte	0
 251 00e1 00       		.byte	0
 252 00e2 00       		.byte	0
 253 00e3 00       		.byte	0
 254 00e4 00       		.byte	0
 255 00e5 00       		.byte	0
 256 00e6 00       		.byte	0
 257 00e7 00       		.byte	0
 258 00e8 00       		.byte	0
 259 00e9 00       		.byte	0
 260 00ea 00       		.byte	0
 261 00eb 00       		.byte	0
 262 00ec 00       		.byte	0
 263 00ed 00       		.byte	0
 264 00ee 00       		.byte	0
 265 00ef 00       		.byte	0
 266 00f0 00       		.byte	0
 267 00f1 00       		.byte	0
 268 00f2 00       		.byte	0
 269 00f3 00       		.byte	0
 270 00f4 00       		.byte	0
 271 00f5 00       		.byte	0
 272 00f6 00       		.byte	0
 273 00f7 00       		.byte	0
 274 00f8 00       		.byte	0
 275 00f9 00       		.byte	0
 276 00fa 00       		.byte	0
 277 00fb 00       		.byte	0
 278 00fc 00       		.byte	0
 279 00fd 00       		.byte	0
 280 00fe 00       		.byte	0
 281 00ff 00       		.byte	0
 282              		.section	.text.CPU_Init,"ax",%progbits
 283              		.align	2
 284              		.global	CPU_Init
 285              		.thumb
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 6


 286              		.thumb_func
 287              		.type	CPU_Init, %function
 288              	CPU_Init:
 289              	.LFB0:
 290              		.file 1 "..\\..\\..\\..\\..\\..\\uC-CPU\\cpu_core.c"
   1:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
   2:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
   3:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                                uC/CPU
   4:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                    CPU CONFIGURATION & PORT LAYER
   5:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
   6:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                          (c) Copyright 2004-2011; Micrium, Inc.; Weston, FL
   7:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
   8:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               All rights reserved.  Protected by international copyright laws.
   9:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
  10:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               uC/CPU is provided in source form to registered licensees ONLY.  It is
  11:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               illegal to distribute this source code to any third party unless you receive
  12:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               written permission by an authorized Micrium representative.  Knowledge of
  13:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               the source code may NOT be used to develop a similar product.
  14:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
  15:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               Please help us continue to provide the Embedded community with the finest
  16:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               software available.  Your honesty is greatly appreciated.
  17:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
  18:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               You can contact us at www.micrium.com.
  19:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
  20:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
  21:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
  22:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
  23:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
  24:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
  25:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                           CORE CPU MODULE
  26:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
  27:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Filename      : cpu_core.c
  28:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Version       : V1.29.01
  29:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Programmer(s) : SR
  30:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                 ITJ
  31:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
  32:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
  33:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
  34:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
  35:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
  36:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
  37:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                            INCLUDE FILES
  38:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
  39:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
  40:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
  41:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #define    MICRIUM_SOURCE
  42:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #define    CPU_CORE_MODULE
  43:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #include  <cpu_core.h>
  44:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
  45:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
  46:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*$PAGE*/
  47:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
  48:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
  49:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                            LOCAL DEFINES
  50:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
  51:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
  52:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 7


  53:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
  54:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
  55:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
  56:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                           LOCAL CONSTANTS
  57:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
  58:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
  59:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
  60:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
  61:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
  62:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
  63:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                          LOCAL DATA TYPES
  64:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
  65:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
  66:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
  67:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
  68:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
  69:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
  70:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                            LOCAL TABLES
  71:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
  72:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
  73:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
  74:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
  75:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
  76:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                  CPU COUNT LEAD ZEROs LOOKUP TABLE
  77:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
  78:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Note(s) : (1) Index into bit pattern table determines the number of leading zeros in an 8-bit val
  79:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
  80:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                         b07  b06  b05  b04  b03  b02  b01  b00    # Leading Zeros
  81:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                         ---  ---  ---  ---  ---  ---  ---  ---    ---------------
  82:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                          1    x    x    x    x    x    x    x            0
  83:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                          0    1    x    x    x    x    x    x            1
  84:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                          0    0    1    x    x    x    x    x            2
  85:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                          0    0    0    1    x    x    x    x            3
  86:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                          0    0    0    0    1    x    x    x            4
  87:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                          0    0    0    0    0    1    x    x            5
  88:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                          0    0    0    0    0    0    1    x            6
  89:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                          0    0    0    0    0    0    0    1            7
  90:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                          0    0    0    0    0    0    0    0            8
  91:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
  92:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
  93:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
  94:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if (!(defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) || \
  95:..\..\..\..\..\..\uC-CPU/cpu_core.c ****       (CPU_CFG_DATA_SIZE_MAX > CPU_CFG_DATA_SIZE))
  96:..\..\..\..\..\..\uC-CPU/cpu_core.c **** static  const  CPU_INT08U  CPU_CntLeadZerosTbl[256] = {                             /* Data vals : 
  97:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*   0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F   */
  98:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     8u,  7u,  6u,  6u,  5u,  5u,  5u,  5u,  4u,  4u,  4u,  4u,  4u,  4u,  4u,  4u,  /*   0x00 to 0x
  99:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  /*   0x10 to 0x
 100:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  /*   0x20 to 0x
 101:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  /*   0x30 to 0x
 102:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  /*   0x40 to 0x
 103:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  /*   0x50 to 0x
 104:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  /*   0x60 to 0x
 105:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  /*   0x70 to 0x
 106:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  /*   0x80 to 0x
 107:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  /*   0x90 to 0x
 108:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  /*   0xA0 to 0x
 109:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  /*   0xB0 to 0x
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 8


 110:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  /*   0xC0 to 0x
 111:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  /*   0xD0 to 0x
 112:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  /*   0xE0 to 0x
 113:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u   /*   0xF0 to 0x
 114:..\..\..\..\..\..\uC-CPU/cpu_core.c **** };
 115:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
 116:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 117:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 118:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*$PAGE*/
 119:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
 120:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
 121:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                       LOCAL GLOBAL VARIABLES
 122:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
 123:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
 124:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 125:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 126:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
 127:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
 128:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                      LOCAL FUNCTION PROTOTYPES
 129:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
 130:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
 131:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 132:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if    (CPU_CFG_NAME_EN   == DEF_ENABLED)                           /* ---------------- CPU NAME FN
 133:..\..\..\..\..\..\uC-CPU/cpu_core.c **** static  void        CPU_NameInit         (void);
 134:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
 135:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 136:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 137:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                     /* ----------------- CPU TS FNC
 138:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if   ((CPU_CFG_TS_EN     == DEF_ENABLED) || \
 139:..\..\..\..\..\..\uC-CPU/cpu_core.c ****        (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
 140:..\..\..\..\..\..\uC-CPU/cpu_core.c **** static  void        CPU_TS_Init          (void);
 141:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
 142:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 143:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 144:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #ifdef  CPU_CFG_INT_DIS_MEAS_EN                                     /* ---------- CPU INT DIS TIME 
 145:..\..\..\..\..\..\uC-CPU/cpu_core.c **** static  void        CPU_IntDisMeasInit   (void);
 146:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 147:..\..\..\..\..\..\uC-CPU/cpu_core.c **** static  CPU_TS_TMR  CPU_IntDisMeasMaxCalc(CPU_TS_TMR  time_tot_cnts);
 148:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
 149:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 150:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 151:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
 152:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
 153:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                     LOCAL CONFIGURATION ERRORS
 154:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
 155:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
 156:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 157:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 158:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*$PAGE*/
 159:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
 160:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
 161:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                             CPU_Init()
 162:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 163:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Description : (1) Initialize CPU module :
 164:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 165:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   (a) Initialize CPU timestamps
 166:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   (b) Initialize CPU interrupts disabled time measurements
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 9


 167:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   (c) Initialize CPU host name
 168:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 169:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 170:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Argument(s) : none.
 171:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 172:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Return(s)   : none.
 173:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 174:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Caller(s)   : Your Product's Application.
 175:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 176:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               This function is a CPU initialization function & MAY be called by application/
 177:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               initialization function(s).
 178:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 179:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Note(s)     : (2) CPU_Init() MUST be called ... :
 180:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 181:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   (a) ONLY ONCE from a product's application; ...
 182:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   (b) BEFORE product's application calls any core CPU module function(s)
 183:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 184:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               (3) The following initialization functions MUST be sequenced as follows :
 185:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 186:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   (a) CPU_TS_Init()           SHOULD precede ALL calls to other CPU timestamp fun
 187:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 188:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   (b) CPU_IntDisMeasInit()    SHOULD precede ALL calls to CPU_CRITICAL_ENTER()/CP
 189:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                                   & other CPU interrupts disabled time measuremen
 190:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
 191:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
 192:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 193:..\..\..\..\..\..\uC-CPU/cpu_core.c **** void  CPU_Init (void)
 194:..\..\..\..\..\..\uC-CPU/cpu_core.c **** {
 291              		.loc 1 194 0
 292              		.cfi_startproc
 293              		@ args = 0, pretend = 0, frame = 0
 294              		@ frame_needed = 1, uses_anonymous_args = 0
 295 0000 80B5     		push	{r7, lr}
 296              		.cfi_def_cfa_offset 8
 297              		.cfi_offset 7, -8
 298              		.cfi_offset 14, -4
 299 0002 00AF     		add	r7, sp, #0
 300              		.cfi_def_cfa_register 7
 195:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                 /* --------------------- INIT TS --
 196:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if ((CPU_CFG_TS_EN     == DEF_ENABLED) || \
 197:..\..\..\..\..\..\uC-CPU/cpu_core.c ****      (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
 198:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_TS_Init();                                              /* See Note #3a.                   
 301              		.loc 1 198 0
 302 0004 FFF7FEFF 		bl	CPU_TS_Init
 199:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
 200:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                 /* -------------- INIT INT DIS TIME
 201:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #ifdef  CPU_CFG_INT_DIS_MEAS_EN
 202:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_IntDisMeasInit();                                       /* See Note #3b.                   
 203:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
 204:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 205:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                 /* ------------------ INIT CPU NAME
 206:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if (CPU_CFG_NAME_EN == DEF_ENABLED)
 207:..\..\..\..\..\..\uC-CPU/cpu_core.c ****      CPU_NameInit();
 303              		.loc 1 207 0
 304 0008 FFF7FEFF 		bl	CPU_NameInit
 208:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
 209:..\..\..\..\..\..\uC-CPU/cpu_core.c **** }
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 10


 305              		.loc 1 209 0
 306 000c 00BF     		nop
 307 000e 80BD     		pop	{r7, pc}
 308              		.cfi_endproc
 309              	.LFE0:
 310              		.size	CPU_Init, .-CPU_Init
 311              		.section	.text.CPU_SW_Exception,"ax",%progbits
 312              		.align	2
 313              		.global	CPU_SW_Exception
 314              		.thumb
 315              		.thumb_func
 316              		.type	CPU_SW_Exception, %function
 317              	CPU_SW_Exception:
 318              	.LFB1:
 210:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 211:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 212:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*$PAGE*/
 213:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
 214:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
 215:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                         CPU_SW_Exception()
 216:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 217:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Description : Trap unrecoverable software exception.
 218:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 219:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Argument(s) : none.
 220:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 221:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Return(s)   : none.
 222:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 223:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Caller(s)   : various.
 224:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 225:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Note(s)     : (1) CPU_SW_Exception() deadlocks the current code execution -- whether multi-tasked
 226:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   -processed/-threaded or single-threaded -- when the current code execution cann
 227:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   gracefully recover or report a fault or exception condition.
 228:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 229:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   See also 'cpu_core.h  CPU_SW_EXCEPTION()  Note #1'.
 230:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
 231:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
 232:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 233:..\..\..\..\..\..\uC-CPU/cpu_core.c **** void  CPU_SW_Exception (void)
 234:..\..\..\..\..\..\uC-CPU/cpu_core.c **** {
 319              		.loc 1 234 0
 320              		.cfi_startproc
 321              		@ args = 0, pretend = 0, frame = 0
 322              		@ frame_needed = 1, uses_anonymous_args = 0
 323              		@ link register save eliminated.
 324 0000 80B4     		push	{r7}
 325              		.cfi_def_cfa_offset 4
 326              		.cfi_offset 7, -4
 327 0002 00AF     		add	r7, sp, #0
 328              		.cfi_def_cfa_register 7
 329              	.L3:
 235:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     while (DEF_ON) {
 236:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         ;
 237:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     }
 330              		.loc 1 237 0 discriminator 1
 331 0004 FEE7     		b	.L3
 332              		.cfi_endproc
 333              	.LFE1:
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 11


 334              		.size	CPU_SW_Exception, .-CPU_SW_Exception
 335 0006 00BF     		.section	.text.CPU_NameClr,"ax",%progbits
 336              		.align	2
 337              		.global	CPU_NameClr
 338              		.thumb
 339              		.thumb_func
 340              		.type	CPU_NameClr, %function
 341              	CPU_NameClr:
 342              	.LFB2:
 238:..\..\..\..\..\..\uC-CPU/cpu_core.c **** }
 239:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 240:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 241:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*$PAGE*/
 242:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
 243:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
 244:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                            CPU_NameClr()
 245:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 246:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Description : Clear CPU Name.
 247:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 248:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Argument(s) : none.
 249:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 250:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Return(s)   : none.
 251:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 252:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Caller(s)   : CPU_NameInit(),
 253:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               Application.
 254:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 255:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
 256:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               called by application function(s).
 257:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 258:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Note(s)     : none.
 259:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
 260:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
 261:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 262:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if (CPU_CFG_NAME_EN == DEF_ENABLED)
 263:..\..\..\..\..\..\uC-CPU/cpu_core.c **** void  CPU_NameClr (void)
 264:..\..\..\..\..\..\uC-CPU/cpu_core.c **** {
 343              		.loc 1 264 0
 344              		.cfi_startproc
 345              		@ args = 0, pretend = 0, frame = 8
 346              		@ frame_needed = 1, uses_anonymous_args = 0
 347 0000 80B5     		push	{r7, lr}
 348              		.cfi_def_cfa_offset 8
 349              		.cfi_offset 7, -8
 350              		.cfi_offset 14, -4
 351 0002 82B0     		sub	sp, sp, #8
 352              		.cfi_def_cfa_offset 16
 353 0004 00AF     		add	r7, sp, #0
 354              		.cfi_def_cfa_register 7
 265:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_SR_ALLOC();
 355              		.loc 1 265 0
 356 0006 0023     		movs	r3, #0
 357 0008 7B60     		str	r3, [r7, #4]
 266:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 267:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 268:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_CRITICAL_ENTER();
 358              		.loc 1 268 0
 359 000a FFF7FEFF 		bl	CPU_SR_Save
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 12


 360 000e 7860     		str	r0, [r7, #4]
 269:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     Mem_Clr((void     *)&CPU_Name[0],
 361              		.loc 1 269 0
 362 0010 1021     		movs	r1, #16
 363 0012 0548     		ldr	r0, .L5
 364 0014 FFF7FEFF 		bl	Mem_Clr
 270:..\..\..\..\..\..\uC-CPU/cpu_core.c ****             (CPU_SIZE_T) CPU_CFG_NAME_SIZE);
 271:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_CRITICAL_EXIT();
 365              		.loc 1 271 0
 366 0018 7868     		ldr	r0, [r7, #4]
 367 001a FFF7FEFF 		bl	CPU_SR_Restore
 272:..\..\..\..\..\..\uC-CPU/cpu_core.c **** }
 368              		.loc 1 272 0
 369 001e 00BF     		nop
 370 0020 0837     		adds	r7, r7, #8
 371              		.cfi_def_cfa_offset 8
 372 0022 BD46     		mov	sp, r7
 373              		.cfi_def_cfa_register 13
 374              		@ sp needed
 375 0024 80BD     		pop	{r7, pc}
 376              	.L6:
 377 0026 00BF     		.align	2
 378              	.L5:
 379 0028 00000000 		.word	CPU_Name
 380              		.cfi_endproc
 381              	.LFE2:
 382              		.size	CPU_NameClr, .-CPU_NameClr
 383              		.section	.text.CPU_NameGet,"ax",%progbits
 384              		.align	2
 385              		.global	CPU_NameGet
 386              		.thumb
 387              		.thumb_func
 388              		.type	CPU_NameGet, %function
 389              	CPU_NameGet:
 390              	.LFB3:
 273:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
 274:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 275:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 276:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*$PAGE*/
 277:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
 278:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
 279:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                            CPU_NameGet()
 280:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 281:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Description : Get CPU host name.
 282:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 283:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Argument(s) : p_name      Pointer to an ASCII character array that will receive the return CPU ho
 284:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               name ASCII string from this function (see Note #1).
 285:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 286:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               p_err       Pointer to variable that will receive the return error code from this f
 287:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 288:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               CPU_ERR_NONE                    CPU host name successfully returned
 289:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               CPU_ERR_NULL_PTR                Argument 'p_name' passed a NULL poi
 290:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 291:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Return(s)   : none.
 292:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 293:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Caller(s)   : Application.
 294:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 13


 295:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
 296:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               be called by application function(s).
 297:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 298:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Note(s)     : (1) The size of the ASCII character array that will receive the return CPU host nam
 299:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   ASCII string :
 300:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 301:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   (a) MUST   be greater than or equal to the current CPU host name's ASCII string
 302:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           size including the terminating NULL character;
 303:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   (b) SHOULD be greater than or equal to CPU_CFG_NAME_SIZE
 304:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
 305:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
 306:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 307:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if (CPU_CFG_NAME_EN == DEF_ENABLED)
 308:..\..\..\..\..\..\uC-CPU/cpu_core.c **** void  CPU_NameGet (CPU_CHAR  *p_name,
 309:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                    CPU_ERR   *p_err)
 310:..\..\..\..\..\..\uC-CPU/cpu_core.c **** {
 391              		.loc 1 310 0
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 16
 394              		@ frame_needed = 1, uses_anonymous_args = 0
 395 0000 80B5     		push	{r7, lr}
 396              		.cfi_def_cfa_offset 8
 397              		.cfi_offset 7, -8
 398              		.cfi_offset 14, -4
 399 0002 84B0     		sub	sp, sp, #16
 400              		.cfi_def_cfa_offset 24
 401 0004 00AF     		add	r7, sp, #0
 402              		.cfi_def_cfa_register 7
 403 0006 7860     		str	r0, [r7, #4]
 404 0008 3960     		str	r1, [r7]
 311:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_SR_ALLOC();
 405              		.loc 1 311 0
 406 000a 0023     		movs	r3, #0
 407 000c FB60     		str	r3, [r7, #12]
 312:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 313:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 314:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     if (p_err == (CPU_ERR *)0) {
 408              		.loc 1 314 0
 409 000e 3B68     		ldr	r3, [r7]
 410 0010 002B     		cmp	r3, #0
 411 0012 01D1     		bne	.L8
 315:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         CPU_SW_EXCEPTION(;);
 412              		.loc 1 315 0
 413 0014 FFF7FEFF 		bl	CPU_SW_Exception
 414              	.L8:
 316:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     }
 317:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 318:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     if (p_name == (CPU_CHAR *)0) {
 415              		.loc 1 318 0
 416 0018 7B68     		ldr	r3, [r7, #4]
 417 001a 002B     		cmp	r3, #0
 418 001c 03D1     		bne	.L9
 319:..\..\..\..\..\..\uC-CPU/cpu_core.c ****        *p_err = CPU_ERR_NULL_PTR;
 419              		.loc 1 319 0
 420 001e 3B68     		ldr	r3, [r7]
 421 0020 0A22     		movs	r2, #10
 422 0022 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 14


 320:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         return;
 423              		.loc 1 320 0
 424 0024 0DE0     		b	.L7
 425              	.L9:
 321:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     }
 322:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 323:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_CRITICAL_ENTER();
 426              		.loc 1 323 0
 427 0026 FFF7FEFF 		bl	CPU_SR_Save
 428 002a F860     		str	r0, [r7, #12]
 324:..\..\..\..\..\..\uC-CPU/cpu_core.c ****    (void)Str_Copy_N(p_name,
 429              		.loc 1 324 0
 430 002c 1022     		movs	r2, #16
 431 002e 0649     		ldr	r1, .L11
 432 0030 7868     		ldr	r0, [r7, #4]
 433 0032 FFF7FEFF 		bl	Str_Copy_N
 325:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                    &CPU_Name[0],
 326:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                     CPU_CFG_NAME_SIZE);
 327:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_CRITICAL_EXIT();
 434              		.loc 1 327 0
 435 0036 F868     		ldr	r0, [r7, #12]
 436 0038 FFF7FEFF 		bl	CPU_SR_Restore
 328:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 329:..\..\..\..\..\..\uC-CPU/cpu_core.c ****    *p_err = CPU_ERR_NONE;
 437              		.loc 1 329 0
 438 003c 3B68     		ldr	r3, [r7]
 439 003e 0022     		movs	r2, #0
 440 0040 1A80     		strh	r2, [r3]	@ movhi
 441              	.L7:
 330:..\..\..\..\..\..\uC-CPU/cpu_core.c **** }
 442              		.loc 1 330 0
 443 0042 1037     		adds	r7, r7, #16
 444              		.cfi_def_cfa_offset 8
 445 0044 BD46     		mov	sp, r7
 446              		.cfi_def_cfa_register 13
 447              		@ sp needed
 448 0046 80BD     		pop	{r7, pc}
 449              	.L12:
 450              		.align	2
 451              	.L11:
 452 0048 00000000 		.word	CPU_Name
 453              		.cfi_endproc
 454              	.LFE3:
 455              		.size	CPU_NameGet, .-CPU_NameGet
 456              		.section	.text.CPU_NameSet,"ax",%progbits
 457              		.align	2
 458              		.global	CPU_NameSet
 459              		.thumb
 460              		.thumb_func
 461              		.type	CPU_NameSet, %function
 462              	CPU_NameSet:
 463              	.LFB4:
 331:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
 332:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 333:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 334:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*$PAGE*/
 335:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 15


 336:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
 337:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                            CPU_NameSet()
 338:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 339:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Description : Set CPU host name.
 340:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 341:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Argument(s) : p_name      Pointer to CPU host name to set.
 342:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 343:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               p_err       Pointer to variable that will receive the return error code from this f
 344:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 345:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               CPU_ERR_NONE                    CPU host name successfully set.
 346:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               CPU_ERR_NULL_PTR                Argument 'p_name' passed a NULL poi
 347:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               CPU_ERR_NAME_SIZE               Invalid CPU host name size (see Not
 348:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 349:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Return(s)   : none.
 350:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 351:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Caller(s)   : Application.
 352:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 353:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
 354:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               called by application function(s).
 355:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 356:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Note(s)     : (1) 'p_name' ASCII string size, including the terminating NULL character, MUST be l
 357:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                    than or equal to CPU_CFG_NAME_SIZE.
 358:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
 359:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
 360:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 361:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if (CPU_CFG_NAME_EN == DEF_ENABLED)
 362:..\..\..\..\..\..\uC-CPU/cpu_core.c **** void  CPU_NameSet (const  CPU_CHAR  *p_name,
 363:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                           CPU_ERR   *p_err)
 364:..\..\..\..\..\..\uC-CPU/cpu_core.c **** {
 464              		.loc 1 364 0
 465              		.cfi_startproc
 466              		@ args = 0, pretend = 0, frame = 16
 467              		@ frame_needed = 1, uses_anonymous_args = 0
 468 0000 80B5     		push	{r7, lr}
 469              		.cfi_def_cfa_offset 8
 470              		.cfi_offset 7, -8
 471              		.cfi_offset 14, -4
 472 0002 84B0     		sub	sp, sp, #16
 473              		.cfi_def_cfa_offset 24
 474 0004 00AF     		add	r7, sp, #0
 475              		.cfi_def_cfa_register 7
 476 0006 7860     		str	r0, [r7, #4]
 477 0008 3960     		str	r1, [r7]
 365:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_SIZE_T  len;
 366:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_SR_ALLOC();
 478              		.loc 1 366 0
 479 000a 0023     		movs	r3, #0
 480 000c FB60     		str	r3, [r7, #12]
 367:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 368:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 369:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     if (p_err == (CPU_ERR *)0) {
 481              		.loc 1 369 0
 482 000e 3B68     		ldr	r3, [r7]
 483 0010 002B     		cmp	r3, #0
 484 0012 01D1     		bne	.L14
 370:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         CPU_SW_EXCEPTION(;);
 485              		.loc 1 370 0
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 16


 486 0014 FFF7FEFF 		bl	CPU_SW_Exception
 487              	.L14:
 371:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     }
 372:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 373:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     if (p_name == (const CPU_CHAR *)0) {
 488              		.loc 1 373 0
 489 0018 7B68     		ldr	r3, [r7, #4]
 490 001a 002B     		cmp	r3, #0
 491 001c 03D1     		bne	.L15
 374:..\..\..\..\..\..\uC-CPU/cpu_core.c ****        *p_err = CPU_ERR_NULL_PTR;
 492              		.loc 1 374 0
 493 001e 3B68     		ldr	r3, [r7]
 494 0020 0A22     		movs	r2, #10
 495 0022 1A80     		strh	r2, [r3]	@ movhi
 375:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         return;
 496              		.loc 1 375 0
 497 0024 1AE0     		b	.L13
 498              	.L15:
 376:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     }
 377:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 378:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     len = Str_Len_N(p_name,
 499              		.loc 1 378 0
 500 0026 1021     		movs	r1, #16
 501 0028 7868     		ldr	r0, [r7, #4]
 502 002a FFF7FEFF 		bl	Str_Len_N
 503 002e B860     		str	r0, [r7, #8]
 379:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                     CPU_CFG_NAME_SIZE);
 380:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     if (len < CPU_CFG_NAME_SIZE) {                              /* If       cfg name len < max name
 504              		.loc 1 380 0
 505 0030 BB68     		ldr	r3, [r7, #8]
 506 0032 0F2B     		cmp	r3, #15
 507 0034 0ED8     		bhi	.L17
 381:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         CPU_CRITICAL_ENTER();
 508              		.loc 1 381 0
 509 0036 FFF7FEFF 		bl	CPU_SR_Save
 510 003a F860     		str	r0, [r7, #12]
 382:..\..\..\..\..\..\uC-CPU/cpu_core.c ****        (void)Str_Copy_N(&CPU_Name[0],                           /* ... copy cfg name to CPU host na
 511              		.loc 1 382 0
 512 003c 1022     		movs	r2, #16
 513 003e 7968     		ldr	r1, [r7, #4]
 514 0040 0848     		ldr	r0, .L18
 515 0042 FFF7FEFF 		bl	Str_Copy_N
 383:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                          p_name,
 384:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                          CPU_CFG_NAME_SIZE);
 385:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         CPU_CRITICAL_EXIT();
 516              		.loc 1 385 0
 517 0046 F868     		ldr	r0, [r7, #12]
 518 0048 FFF7FEFF 		bl	CPU_SR_Restore
 386:..\..\..\..\..\..\uC-CPU/cpu_core.c ****        *p_err = CPU_ERR_NONE;
 519              		.loc 1 386 0
 520 004c 3B68     		ldr	r3, [r7]
 521 004e 0022     		movs	r2, #0
 522 0050 1A80     		strh	r2, [r3]	@ movhi
 523 0052 03E0     		b	.L13
 524              	.L17:
 387:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 388:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     } else {
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 17


 389:..\..\..\..\..\..\uC-CPU/cpu_core.c ****        *p_err = CPU_ERR_NAME_SIZE;
 525              		.loc 1 389 0
 526 0054 3B68     		ldr	r3, [r7]
 527 0056 4FF47A72 		mov	r2, #1000
 528 005a 1A80     		strh	r2, [r3]	@ movhi
 529              	.L13:
 390:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     }
 391:..\..\..\..\..\..\uC-CPU/cpu_core.c **** }
 530              		.loc 1 391 0
 531 005c 1037     		adds	r7, r7, #16
 532              		.cfi_def_cfa_offset 8
 533 005e BD46     		mov	sp, r7
 534              		.cfi_def_cfa_register 13
 535              		@ sp needed
 536 0060 80BD     		pop	{r7, pc}
 537              	.L19:
 538 0062 00BF     		.align	2
 539              	.L18:
 540 0064 00000000 		.word	CPU_Name
 541              		.cfi_endproc
 542              	.LFE4:
 543              		.size	CPU_NameSet, .-CPU_NameSet
 544              		.section	.text.CPU_TS_Get32,"ax",%progbits
 545              		.align	2
 546              		.global	CPU_TS_Get32
 547              		.thumb
 548              		.thumb_func
 549              		.type	CPU_TS_Get32, %function
 550              	CPU_TS_Get32:
 551              	.LFB5:
 392:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
 393:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 394:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 395:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*$PAGE*/
 396:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
 397:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
 398:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                           CPU_TS_Get32()
 399:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 400:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Description : Get current 32-bit CPU timestamp.
 401:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 402:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Argument(s) : none.
 403:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 404:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Return(s)   : Current 32-bit CPU timestamp (in timestamp timer counts).
 405:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 406:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Caller(s)   : Application.
 407:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 408:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
 409:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               be called by application function(s).
 410:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 411:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Note(s)     : (1) When applicable, the amount of time measured by CPU timestamps is calculated by
 412:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   either of the following equations :
 413:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 414:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       (a) Time measured  =  Number timer counts  *  Timer period
 415:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 416:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               where
 417:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 418:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   Number timer counts     Number of timer counts measured
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 18


 419:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   Timer period            Timer's period in some units of
 420:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                                               (fractional) seconds
 421:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   Time measured           Amount of time measured, in same
 422:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                                               units of (fractional) seconds
 423:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                                               as the Timer period
 424:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 425:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                              Number timer counts
 426:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       (b) Time measured  =  ---------------------
 427:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                                Timer frequency
 428:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 429:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               where
 430:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 431:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   Number timer counts     Number of timer counts measured
 432:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   Timer frequency         Timer's frequency in some units
 433:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                                               of counts per second
 434:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   Time measured           Amount of time measured, in seconds
 435:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 436:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()  Note #2c1'.
 437:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 438:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               (2) In case the CPU timestamp timer has lower precision than the 32-bit CPU timesta
 439:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   its precision is extended via periodic updates by accumulating the deltas of th
 440:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   timestamp timer count values into the higher-precision 32-bit CPU timestamp.
 441:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 442:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               (3) After initialization, 'CPU_TS_32_Accum' & 'CPU_TS_32_TmrPrev' MUST ALWAYS
 443:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   be accessed AND updated exclusively with interrupts disabled -- but NOT
 444:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   with critical sections.
 445:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
 446:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
 447:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 448:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if (CPU_CFG_TS_32_EN == DEF_ENABLED)
 449:..\..\..\..\..\..\uC-CPU/cpu_core.c **** CPU_TS32  CPU_TS_Get32 (void)
 450:..\..\..\..\..\..\uC-CPU/cpu_core.c **** {
 552              		.loc 1 450 0
 553              		.cfi_startproc
 554              		@ args = 0, pretend = 0, frame = 8
 555              		@ frame_needed = 1, uses_anonymous_args = 0
 556 0000 80B5     		push	{r7, lr}
 557              		.cfi_def_cfa_offset 8
 558              		.cfi_offset 7, -8
 559              		.cfi_offset 14, -4
 560 0002 82B0     		sub	sp, sp, #8
 561              		.cfi_def_cfa_offset 16
 562 0004 00AF     		add	r7, sp, #0
 563              		.cfi_def_cfa_register 7
 451:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_TS32    ts;
 452:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32)
 453:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_TS_TMR  tmr_cur;
 454:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_TS_TMR  tmr_delta;
 455:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_SR_ALLOC();
 456:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
 457:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 458:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 459:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if (CPU_CFG_TS_TMR_SIZE >= CPU_WORD_SIZE_32)
 460:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     ts = (CPU_TS32)CPU_TS_TmrRd();                                  /* Get cur ts tmr val (in 32-bi
 564              		.loc 1 460 0
 565 0006 FFF7FEFF 		bl	CPU_TS_TmrRd
 566 000a 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 19


 461:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 462:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #else
 463:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_INT_DIS();
 464:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     tmr_cur            = (CPU_TS_TMR) CPU_TS_TmrRd();               /* Get cur ts tmr val (in ts tm
 465:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     tmr_delta          = (CPU_TS_TMR)(tmr_cur - CPU_TS_32_TmrPrev); /* Calc      delta ts tmr cnts.
 466:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_TS_32_Accum   += (CPU_TS32  ) tmr_delta;                    /* Inc ts by delta ts tmr cnts 
 467:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_TS_32_TmrPrev  = (CPU_TS_TMR) tmr_cur;                      /* Save cur ts tmr cnts for nex
 468:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     ts                 = (CPU_TS32  ) CPU_TS_32_Accum;
 469:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_INT_EN();
 470:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
 471:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 472:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     return (ts);
 567              		.loc 1 472 0
 568 000c 7B68     		ldr	r3, [r7, #4]
 473:..\..\..\..\..\..\uC-CPU/cpu_core.c **** }
 569              		.loc 1 473 0
 570 000e 1846     		mov	r0, r3
 571 0010 0837     		adds	r7, r7, #8
 572              		.cfi_def_cfa_offset 8
 573 0012 BD46     		mov	sp, r7
 574              		.cfi_def_cfa_register 13
 575              		@ sp needed
 576 0014 80BD     		pop	{r7, pc}
 577              		.cfi_endproc
 578              	.LFE5:
 579              		.size	CPU_TS_Get32, .-CPU_TS_Get32
 580 0016 00BF     		.section	.text.CPU_TS_Update,"ax",%progbits
 581              		.align	2
 582              		.global	CPU_TS_Update
 583              		.thumb
 584              		.thumb_func
 585              		.type	CPU_TS_Update, %function
 586              	CPU_TS_Update:
 587              	.LFB6:
 474:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
 475:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 476:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 477:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*$PAGE*/
 478:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
 479:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
 480:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                           CPU_TS_Get64()
 481:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 482:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Description : Get current 64-bit CPU timestamp.
 483:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 484:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Argument(s) : none.
 485:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 486:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Return(s)   : Current 64-bit CPU timestamp (in timestamp timer counts).
 487:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 488:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Caller(s)   : Application.
 489:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 490:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
 491:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               be called by application function(s).
 492:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 493:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Note(s)     : (1) When applicable, the amount of time measured by CPU timestamps is calculated by
 494:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   either of the following equations :
 495:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 496:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       (a) Time measured  =  Number timer counts  *  Timer period
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 20


 497:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 498:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               where
 499:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 500:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   Number timer counts     Number of timer counts measured
 501:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   Timer period            Timer's period in some units of
 502:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                                               (fractional) seconds
 503:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   Time measured           Amount of time measured, in same
 504:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                                               units of (fractional) seconds
 505:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                                               as the Timer period
 506:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 507:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                              Number timer counts
 508:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       (b) Time measured  =  ---------------------
 509:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                                Timer frequency
 510:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 511:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               where
 512:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 513:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   Number timer counts     Number of timer counts measured
 514:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   Timer frequency         Timer's frequency in some units
 515:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                                               of counts per second
 516:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   Time measured           Amount of time measured, in seconds
 517:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 518:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()  Note #2c1'.
 519:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 520:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               (2) In case the CPU timestamp timer has lower precision than the 64-bit CPU timesta
 521:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   its precision is extended via periodic updates by accumulating the deltas of th
 522:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   timestamp timer count values into the higher-precision 64-bit CPU timestamp.
 523:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 524:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               (3) After initialization, 'CPU_TS_64_Accum' & 'CPU_TS_64_TmrPrev' MUST ALWAYS
 525:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   be accessed AND updated exclusively with interrupts disabled -- but NOT
 526:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   with critical sections.
 527:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
 528:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
 529:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 530:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if (CPU_CFG_TS_64_EN == DEF_ENABLED)
 531:..\..\..\..\..\..\uC-CPU/cpu_core.c **** CPU_TS64  CPU_TS_Get64 (void)
 532:..\..\..\..\..\..\uC-CPU/cpu_core.c **** {
 533:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_TS64    ts;
 534:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64)
 535:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_TS_TMR  tmr_cur;
 536:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_TS_TMR  tmr_delta;
 537:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_SR_ALLOC();
 538:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
 539:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 540:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 541:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if (CPU_CFG_TS_TMR_SIZE >= CPU_WORD_SIZE_64)
 542:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     ts = (CPU_TS64)CPU_TS_TmrRd();                                  /* Get cur ts tmr val (in 64-bi
 543:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 544:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #else
 545:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_INT_DIS();
 546:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     tmr_cur            = (CPU_TS_TMR) CPU_TS_TmrRd();               /* Get cur ts tmr val (in ts tm
 547:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     tmr_delta          = (CPU_TS_TMR)(tmr_cur - CPU_TS_64_TmrPrev); /* Calc      delta ts tmr cnts.
 548:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_TS_64_Accum   += (CPU_TS64  ) tmr_delta;                    /* Inc ts by delta ts tmr cnts 
 549:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_TS_64_TmrPrev  = (CPU_TS_TMR) tmr_cur;                      /* Save cur ts tmr cnts for nex
 550:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     ts                 = (CPU_TS64  ) CPU_TS_64_Accum;
 551:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_INT_EN();
 552:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
 553:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 21


 554:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     return (ts);
 555:..\..\..\..\..\..\uC-CPU/cpu_core.c **** }
 556:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
 557:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 558:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 559:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*$PAGE*/
 560:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
 561:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
 562:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                           CPU_TS_Update()
 563:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 564:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Description : Update current CPU timestamp(s).
 565:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 566:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Argument(s) : none.
 567:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 568:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Return(s)   : none.
 569:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 570:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Caller(s)   : Application/BSP periodic time handler (see Note #1).
 571:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 572:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               This function is a CPU timestamp BSP function & SHOULD be called only by appropriat
 573:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               application/BSP function(s).
 574:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 575:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Note(s)     : (1) (a) CPU timestamp(s) MUST be updated periodically by some application (or BSP) 
 576:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       handler in order to (adequately) maintain CPU timestamp(s)' time.
 577:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 578:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   (b) CPU timestamp(s) MUST be updated more frequently than the CPU timestamp tim
 579:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       overflows; otherwise, CPU timestamp(s) will lose time.
 580:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 581:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()  Note #2c2'.
 582:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
 583:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
 584:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 585:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if (CPU_CFG_TS_EN == DEF_ENABLED)
 586:..\..\..\..\..\..\uC-CPU/cpu_core.c **** void  CPU_TS_Update (void)
 587:..\..\..\..\..\..\uC-CPU/cpu_core.c **** {
 588              		.loc 1 587 0
 589              		.cfi_startproc
 590              		@ args = 0, pretend = 0, frame = 0
 591              		@ frame_needed = 1, uses_anonymous_args = 0
 592              		@ link register save eliminated.
 593 0000 80B4     		push	{r7}
 594              		.cfi_def_cfa_offset 4
 595              		.cfi_offset 7, -4
 596 0002 00AF     		add	r7, sp, #0
 597              		.cfi_def_cfa_register 7
 588:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if ((CPU_CFG_TS_32_EN    == DEF_ENABLED)  && \
 589:..\..\..\..\..\..\uC-CPU/cpu_core.c ****      (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32))
 590:..\..\..\..\..\..\uC-CPU/cpu_core.c ****    (void)CPU_TS_Get32();
 591:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
 592:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 593:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if ((CPU_CFG_TS_64_EN    == DEF_ENABLED)  && \
 594:..\..\..\..\..\..\uC-CPU/cpu_core.c ****      (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64))
 595:..\..\..\..\..\..\uC-CPU/cpu_core.c ****    (void)CPU_TS_Get64();
 596:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
 597:..\..\..\..\..\..\uC-CPU/cpu_core.c **** }
 598              		.loc 1 597 0
 599 0004 00BF     		nop
 600 0006 BD46     		mov	sp, r7
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 22


 601              		.cfi_def_cfa_register 13
 602              		@ sp needed
 603 0008 80BC     		pop	{r7}
 604              		.cfi_restore 7
 605              		.cfi_def_cfa_offset 0
 606 000a 7047     		bx	lr
 607              		.cfi_endproc
 608              	.LFE6:
 609              		.size	CPU_TS_Update, .-CPU_TS_Update
 610              		.section	.text.CPU_TS_TmrFreqGet,"ax",%progbits
 611              		.align	2
 612              		.global	CPU_TS_TmrFreqGet
 613              		.thumb
 614              		.thumb_func
 615              		.type	CPU_TS_TmrFreqGet, %function
 616              	CPU_TS_TmrFreqGet:
 617              	.LFB7:
 598:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
 599:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 600:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 601:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*$PAGE*/
 602:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
 603:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
 604:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                         CPU_TS_TmrFreqGet()
 605:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 606:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Description : Get CPU timestamp's timer frequency.
 607:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 608:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Argument(s) : p_err       Pointer to variable that will receive the return error code from this f
 609:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 610:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               CPU_ERR_NONE                    CPU timestamp's timer frequency suc
 611:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                                                   returned.
 612:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               CPU_ERR_TS_FREQ_INVALID         CPU timestamp's timer frequency inv
 613:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                                                   NOT yet configured.
 614:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 615:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Return(s)   : CPU timestamp's timer frequency (in Hertz), if NO error(s).
 616:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 617:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               0,                                          otherwise.
 618:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 619:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Caller(s)   : Application.
 620:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 621:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
 622:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               called by application function(s).
 623:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 624:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Note(s)     : none.
 625:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
 626:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
 627:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 628:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
 629:..\..\..\..\..\..\uC-CPU/cpu_core.c **** CPU_TS_TMR_FREQ  CPU_TS_TmrFreqGet (CPU_ERR  *p_err)
 630:..\..\..\..\..\..\uC-CPU/cpu_core.c **** {
 618              		.loc 1 630 0
 619              		.cfi_startproc
 620              		@ args = 0, pretend = 0, frame = 16
 621              		@ frame_needed = 1, uses_anonymous_args = 0
 622 0000 80B5     		push	{r7, lr}
 623              		.cfi_def_cfa_offset 8
 624              		.cfi_offset 7, -8
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 23


 625              		.cfi_offset 14, -4
 626 0002 84B0     		sub	sp, sp, #16
 627              		.cfi_def_cfa_offset 24
 628 0004 00AF     		add	r7, sp, #0
 629              		.cfi_def_cfa_register 7
 630 0006 7860     		str	r0, [r7, #4]
 631:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_TS_TMR_FREQ  freq_hz;
 632:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 633:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 634:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     if (p_err == (CPU_ERR *)0) {
 631              		.loc 1 634 0
 632 0008 7B68     		ldr	r3, [r7, #4]
 633 000a 002B     		cmp	r3, #0
 634 000c 01D1     		bne	.L24
 635:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         CPU_SW_EXCEPTION(;);
 635              		.loc 1 635 0
 636 000e FFF7FEFF 		bl	CPU_SW_Exception
 637              	.L24:
 636:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     }
 637:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 638:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     freq_hz =  CPU_TS_TmrFreq_Hz;
 638              		.loc 1 638 0
 639 0012 084B     		ldr	r3, .L28
 640 0014 1B68     		ldr	r3, [r3]
 641 0016 FB60     		str	r3, [r7, #12]
 639:..\..\..\..\..\..\uC-CPU/cpu_core.c ****    *p_err   = (freq_hz != 0u) ? CPU_ERR_NONE : CPU_ERR_TS_FREQ_INVALID;
 642              		.loc 1 639 0
 643 0018 FB68     		ldr	r3, [r7, #12]
 644 001a 002B     		cmp	r3, #0
 645 001c 01D0     		beq	.L25
 646              		.loc 1 639 0 is_stmt 0 discriminator 1
 647 001e 0022     		movs	r2, #0
 648 0020 01E0     		b	.L26
 649              	.L25:
 650              		.loc 1 639 0 discriminator 2
 651 0022 4FF4FA62 		mov	r2, #2000
 652              	.L26:
 653              		.loc 1 639 0 discriminator 4
 654 0026 7B68     		ldr	r3, [r7, #4]
 655 0028 1A80     		strh	r2, [r3]	@ movhi
 640:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 641:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     return (freq_hz);
 656              		.loc 1 641 0 is_stmt 1 discriminator 4
 657 002a FB68     		ldr	r3, [r7, #12]
 642:..\..\..\..\..\..\uC-CPU/cpu_core.c **** }
 658              		.loc 1 642 0 discriminator 4
 659 002c 1846     		mov	r0, r3
 660 002e 1037     		adds	r7, r7, #16
 661              		.cfi_def_cfa_offset 8
 662 0030 BD46     		mov	sp, r7
 663              		.cfi_def_cfa_register 13
 664              		@ sp needed
 665 0032 80BD     		pop	{r7, pc}
 666              	.L29:
 667              		.align	2
 668              	.L28:
 669 0034 00000000 		.word	CPU_TS_TmrFreq_Hz
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 24


 670              		.cfi_endproc
 671              	.LFE7:
 672              		.size	CPU_TS_TmrFreqGet, .-CPU_TS_TmrFreqGet
 673              		.section	.text.CPU_TS_TmrFreqSet,"ax",%progbits
 674              		.align	2
 675              		.global	CPU_TS_TmrFreqSet
 676              		.thumb
 677              		.thumb_func
 678              		.type	CPU_TS_TmrFreqSet, %function
 679              	CPU_TS_TmrFreqSet:
 680              	.LFB8:
 643:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
 644:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 645:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 646:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*$PAGE*/
 647:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
 648:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
 649:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                         CPU_TS_TmrFreqSet()
 650:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 651:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Description : Set CPU timestamp's timer frequency.
 652:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 653:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Argument(s) : freq_hz     Frequency (in Hertz) to set for CPU timestamp's timer.
 654:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 655:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Return(s)   : none.
 656:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 657:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Caller(s)   : CPU_TS_TmrInit(),
 658:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               Application/BSP initialization function(s).
 659:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 660:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               This function is a CPU module BSP function & SHOULD be called only by appropriate
 661:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               application/BSP function(s) [see Note #1].
 662:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 663:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Note(s)     : (1) (a) (1) CPU timestamp timer frequency is NOT required for internal CPU timestam
 664:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           operations but may OPTIONALLY be configured by CPU_TS_TmrInit() or othe
 665:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           application/BSP initialization functions.
 666:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 667:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       (2) CPU timestamp timer frequency MAY be used with optional CPU_TSxx_to_uSe
 668:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           to convert CPU timestamps from timer counts into microseconds.
 669:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 670:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TSxx_to_uSec()  Note #2a
 671:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 672:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   (b) CPU timestamp timer period SHOULD be less than the typical measured time bu
 673:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       be less than the maximum measured time; otherwise, timer resolution inadequ
 674:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       measure desired times.
 675:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 676:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TSxx_to_uSec()  Note #2b'.
 677:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
 678:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
 679:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 680:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
 681:..\..\..\..\..\..\uC-CPU/cpu_core.c **** void  CPU_TS_TmrFreqSet (CPU_TS_TMR_FREQ  freq_hz)
 682:..\..\..\..\..\..\uC-CPU/cpu_core.c **** {
 681              		.loc 1 682 0
 682              		.cfi_startproc
 683              		@ args = 0, pretend = 0, frame = 8
 684              		@ frame_needed = 1, uses_anonymous_args = 0
 685              		@ link register save eliminated.
 686 0000 80B4     		push	{r7}
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 25


 687              		.cfi_def_cfa_offset 4
 688              		.cfi_offset 7, -4
 689 0002 83B0     		sub	sp, sp, #12
 690              		.cfi_def_cfa_offset 16
 691 0004 00AF     		add	r7, sp, #0
 692              		.cfi_def_cfa_register 7
 693 0006 7860     		str	r0, [r7, #4]
 683:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_TS_TmrFreq_Hz = freq_hz;
 694              		.loc 1 683 0
 695 0008 034A     		ldr	r2, .L31
 696 000a 7B68     		ldr	r3, [r7, #4]
 697 000c 1360     		str	r3, [r2]
 684:..\..\..\..\..\..\uC-CPU/cpu_core.c **** }
 698              		.loc 1 684 0
 699 000e 00BF     		nop
 700 0010 0C37     		adds	r7, r7, #12
 701              		.cfi_def_cfa_offset 4
 702 0012 BD46     		mov	sp, r7
 703              		.cfi_def_cfa_register 13
 704              		@ sp needed
 705 0014 80BC     		pop	{r7}
 706              		.cfi_restore 7
 707              		.cfi_def_cfa_offset 0
 708 0016 7047     		bx	lr
 709              	.L32:
 710              		.align	2
 711              	.L31:
 712 0018 00000000 		.word	CPU_TS_TmrFreq_Hz
 713              		.cfi_endproc
 714              	.LFE8:
 715              		.size	CPU_TS_TmrFreqSet, .-CPU_TS_TmrFreqSet
 716              		.section	.text.CPU_CntLeadZeros08,"ax",%progbits
 717              		.align	2
 718              		.global	CPU_CntLeadZeros08
 719              		.thumb
 720              		.thumb_func
 721              		.type	CPU_CntLeadZeros08, %function
 722              	CPU_CntLeadZeros08:
 723              	.LFB9:
 685:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
 686:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 687:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 688:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*$PAGE*/
 689:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
 690:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
 691:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                     CPU_IntDisMeasMaxCurReset()
 692:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 693:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Description : Reset current maximum interrupts disabled time.
 694:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 695:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Argument(s) : none.
 696:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 697:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Return(s)   : Maximum interrupts disabled time (in CPU timestamp timer counts) before resetting.
 698:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 699:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()      Note #2c'
 700:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                      & 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TSxx_to_uSec()  Note #2'.
 701:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 702:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Caller(s)   : Application.
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 26


 703:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 704:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function 
 705:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               & MAY be called by application function(s).
 706:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 707:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Note(s)     : (1) After initialization, 'CPU_IntDisMeasMaxCur_cnts' MUST ALWAYS be accessed
 708:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   exclusively with interrupts disabled -- but NOT with critical sections.
 709:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
 710:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
 711:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 712:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #ifdef  CPU_CFG_INT_DIS_MEAS_EN
 713:..\..\..\..\..\..\uC-CPU/cpu_core.c **** CPU_TS_TMR  CPU_IntDisMeasMaxCurReset (void)
 714:..\..\..\..\..\..\uC-CPU/cpu_core.c **** {
 715:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_TS_TMR  time_max_cnts;
 716:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_SR_ALLOC();
 717:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 718:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 719:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     time_max_cnts             = CPU_IntDisMeasMaxCurGet();
 720:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_INT_DIS();
 721:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_IntDisMeasMaxCur_cnts = 0u;
 722:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_INT_EN();
 723:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 724:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     return (time_max_cnts);
 725:..\..\..\..\..\..\uC-CPU/cpu_core.c **** }
 726:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
 727:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 728:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 729:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*$PAGE*/
 730:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
 731:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
 732:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                      CPU_IntDisMeasMaxCurGet()
 733:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 734:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Description : Get current maximum interrupts disabled time.
 735:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 736:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Argument(s) : none.
 737:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 738:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Return(s)   : Current maximum interrupts disabled time (in CPU timestamp timer counts).
 739:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 740:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()      Note #2c'
 741:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                      & 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TSxx_to_uSec()  Note #2'.
 742:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 743:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Caller(s)   : CPU_IntDisMeasMaxCurReset(),
 744:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               Application.
 745:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 746:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function 
 747:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               & MAY be called by application function(s).
 748:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 749:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Note(s)     : (1) After initialization, 'CPU_IntDisMeasMaxCur_cnts' MUST ALWAYS be accessed
 750:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   exclusively with interrupts disabled -- but NOT with critical sections.
 751:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
 752:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
 753:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 754:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #ifdef  CPU_CFG_INT_DIS_MEAS_EN
 755:..\..\..\..\..\..\uC-CPU/cpu_core.c **** CPU_TS_TMR  CPU_IntDisMeasMaxCurGet (void)
 756:..\..\..\..\..\..\uC-CPU/cpu_core.c **** {
 757:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_TS_TMR  time_tot_cnts;
 758:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_TS_TMR  time_max_cnts;
 759:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_SR_ALLOC();
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 27


 760:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 761:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 762:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_INT_DIS();
 763:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     time_tot_cnts = CPU_IntDisMeasMaxCur_cnts;
 764:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_INT_EN();
 765:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     time_max_cnts = CPU_IntDisMeasMaxCalc(time_tot_cnts);
 766:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 767:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     return (time_max_cnts);
 768:..\..\..\..\..\..\uC-CPU/cpu_core.c **** }
 769:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
 770:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 771:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 772:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*$PAGE*/
 773:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
 774:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
 775:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                       CPU_IntDisMeasMaxGet()
 776:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 777:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Description : Get (non-resetable) maximum interrupts disabled time.
 778:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 779:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Argument(s) : none.
 780:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 781:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Return(s)   : (Non-resetable) maximum interrupts disabled time (in CPU timestamp timer counts).
 782:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 783:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()      Note #2c'
 784:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                      & 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TSxx_to_uSec()  Note #2'.
 785:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 786:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Caller(s)   : CPU_IntDisMeasInit(),
 787:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               Application.
 788:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 789:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function 
 790:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               & MAY be called by application function(s).
 791:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 792:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Note(s)     : (1) After initialization, 'CPU_IntDisMeasMax_cnts' MUST ALWAYS be accessed
 793:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   exclusively with interrupts disabled -- but NOT with critical sections.
 794:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
 795:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
 796:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 797:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #ifdef  CPU_CFG_INT_DIS_MEAS_EN
 798:..\..\..\..\..\..\uC-CPU/cpu_core.c **** CPU_TS_TMR  CPU_IntDisMeasMaxGet (void)
 799:..\..\..\..\..\..\uC-CPU/cpu_core.c **** {
 800:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_TS_TMR  time_tot_cnts;
 801:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_TS_TMR  time_max_cnts;
 802:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_SR_ALLOC();
 803:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 804:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 805:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_INT_DIS();
 806:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     time_tot_cnts = CPU_IntDisMeasMax_cnts;
 807:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_INT_EN();
 808:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     time_max_cnts = CPU_IntDisMeasMaxCalc(time_tot_cnts);
 809:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 810:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     return (time_max_cnts);
 811:..\..\..\..\..\..\uC-CPU/cpu_core.c **** }
 812:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
 813:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 814:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 815:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*$PAGE*/
 816:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 28


 817:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
 818:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                        CPU_IntDisMeasStart()
 819:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 820:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Description : Start interrupts disabled time measurement.
 821:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 822:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Argument(s) : none.
 823:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 824:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Return(s)   : none.
 825:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 826:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Caller(s)   : CPU_CRITICAL_ENTER().
 827:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 828:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               This function is an INTERNAL CPU module function & MUST NOT be called by applicatio
 829:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               function(s).
 830:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 831:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Note(s)     : none.
 832:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
 833:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
 834:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 835:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #ifdef  CPU_CFG_INT_DIS_MEAS_EN
 836:..\..\..\..\..\..\uC-CPU/cpu_core.c **** void  CPU_IntDisMeasStart (void)
 837:..\..\..\..\..\..\uC-CPU/cpu_core.c **** {
 838:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_IntDisMeasCtr++;
 839:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     if (CPU_IntDisNestCtr == 0u) {                                  /* If ints NOT yet dis'd, ...  
 840:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         CPU_IntDisMeasStart_cnts = CPU_TS_TmrRd();                  /* ... get ints dis'd start tim
 841:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     }
 842:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_IntDisNestCtr++;
 843:..\..\..\..\..\..\uC-CPU/cpu_core.c **** }
 844:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
 845:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 846:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
 847:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*$PAGE*/
 848:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
 849:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
 850:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                        CPU_IntDisMeasStop()
 851:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 852:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Description : Stop interrupts disabled time measurement.
 853:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 854:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Argument(s) : none.
 855:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 856:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Return(s)   : none.
 857:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 858:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Caller(s)   : CPU_CRITICAL_EXIT().
 859:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 860:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               This function is an INTERNAL CPU module function & MUST NOT be called by applicatio
 861:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               function(s).
 862:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 863:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Note(s)     : (1) (a) The total amount of time interrupts are disabled by system &/or application
 864:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       during critical sections is calculated by the following equations :
 865:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 866:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       (1) When interrupts disabled time measurements are disabled :
 867:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 868:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 869:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               |   CRITICAL  |                           |   CRITICAL  |
 870:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               |<- SECTION ->|                           |<- SECTION ->|
 871:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               |    ENTER    |                           |    EXIT     |
 872:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 873:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                            Disable                                    Enable
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 29


 874:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           Interrupts                                Interrupts
 875:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 876:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               ||           ||                           ||           ||
 877:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               ||           ||                           ||           ||
 878:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               ||       |   ||<------------------------->||       |   ||
 879:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               ||       |<->||             |             ||<----->|   ||
 880:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               ||       | | ||             |             ||   |   |   ||
 881:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                        | |                |                  |   |
 882:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   interrupts            time                 interrupts
 883:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                    disabled                 interrupts       |enabled
 884:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                          |                   disabled        |
 885:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                          |              (via application)    |
 886:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                       time                                 time
 887:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                           interrupts                           interrupts
 888:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                         disabled ovrhd                        enabled ovrhd
 889:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 890:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 891:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           (A) time            =  [ time            -  time           ]  -  time
 892:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   interrupts     [     interrupts         interrupts ]         to
 893:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                    disabled      [      enabled            disabled  ]         ov
 894:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               (via application)
 895:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 896:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 897:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           (B) time       =  time              +  time
 898:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   total         interrupts           interrupts
 899:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   ovrhd        enabled ovrhd       disabled ovrhd
 900:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 901:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 902:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   where
 903:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 904:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                           time                    time interrupts are disabled be
 905:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                               interrupts              first critical section ente
 906:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                                disabled               last  critical section exit
 907:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                           (via application)           minus total overhead time)
 908:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 909:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                           time                    time when interrupts are disabl
 910:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                               interrupts
 911:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                                disabled
 912:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 913:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                           time                    time when interrupts are  enabl
 914:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                               interrupts
 915:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                                enabled
 916:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 917:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 918:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                           time                    total overhead time to disable/
 919:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                               total                   interrupts during critical 
 920:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                               ovrhd                   enter & exit
 921:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 922:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                           time                    total overhead time to disable 
 923:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                               interrupts              during critical section ent
 924:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                             disabled ovrhd
 925:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 926:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                           time                    total overhead time to enable  
 927:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                               interrupts              during critical section exi
 928:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                              enabled ovrhd
 929:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 930:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *$PAGE*
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 30


 931:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 932:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       (2) When interrupts disabled time measurements are enabled :
 933:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 934:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 935:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *        |                                    |                           |                        
 936:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *        |<----- CRITICAL SECTION ENTER ----->|                           |<------- CRITICAL SECTIO
 937:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *        |                                    |                           |                        
 938:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 939:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   Time                                                 Time
 940:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *     Disable    Measurement                                          Measurement                  
 941:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *    Interrupts     Start                                                Stop                    In
 942:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 943:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *        ||           |                      ||                           ||                       
 944:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *        ||           |                      ||                           ||                       
 945:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *        ||           |        |             ||<------------------------->||               |       
 946:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *        ||       |   |        |<----------->||             |             ||<------------->|       
 947:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *        ||       |   |        |      |      ||             |             ||       |       |       
 948:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                 |            |      |                     |                      |       |       
 949:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *            interrupts       get     |                   time                     |      get      
 950:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *             disabled    start time  |                       interrupts           |   stop time   
 951:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                            meas     |                        disabled            |     meas
 952:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   time                  (via application)      time
 953:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                       start meas                                   stop meas
 954:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                         ovrhd                                        ovrhd
 955:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 956:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 957:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           (A) time            =  [ time       -  time      ]  -  time
 958:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   interrupts     [      stop         start ]         total meas
 959:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                    disabled      [      meas         meas  ]           ovrhd
 960:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               (via application)
 961:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 962:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 963:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           (B) time            =  time            +  time
 964:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   total meas         start meas         stop meas
 965:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                     ovrhd              ovrhd              ovrhd
 966:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 967:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 968:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   where
 969:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 970:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                           time                    time interrupts are disabled be
 971:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                               interrupts              critical section enter & la
 972:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                                disabled               section exit (i.e. minus me
 973:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                           (via application)           overhead time; however, thi
 974:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                                                       include any overhead time t
 975:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                                                       or enable interrupts during
 976:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                                                       section enter & exit)
 977:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 978:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                           time                    time of disable interrupts star
 979:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                               start                   measurement (in timer count
 980:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                               meas
 981:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 982:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                           time                    time of disable interrupts stop
 983:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                               stop                    measurement (in timer count
 984:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                               meas
 985:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 986:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 987:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                           time                    total overhead time to start/st
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 31


 988:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                               total meas              interrupts time measurement
 989:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                                 ovrhd                 counts)
 990:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 991:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                           time                    total overhead time after getti
 992:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                               start meas              time until end of start mea
 993:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                                 ovrhd                 function  (in timer counts)
 994:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 995:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                           time                    total overhead time from beginn
 996:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                               stop meas               measurement function until 
 997:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                                 ovrhd                 stop time (in timer counts)
 998:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
 999:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1000:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *$PAGE*
1001:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   (b) (1) (A) In order to correctly handle unsigned subtraction overflows of star
1002:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               from stop times, CPU timestamp timer count values MUST be returned 
1003:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               word-size-configurable 'CPU_TS_TMR' data type.
1004:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1005:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()  Note #2a
1006:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1007:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           (B) Since unsigned subtraction of start times from stop times assumes i
1008:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               values, timestamp timer count values MUST increase with each time c
1009:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1010:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()  Note #2b
1011:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1012:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       (2) (A) To expedite & reduce interrupts disabled time measurement overhead;
1013:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               subtraction of start times from stop times is performed.
1014:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1015:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           (B) The final calculations to subtract the interrupts disabled time mea
1016:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               overhead is performed asynchronously in appropriate API functions.
1017:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1018:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               See also 'CPU_IntDisMeasMaxCalc()  Note #1b'.
1019:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
1020:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
1021:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1022:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #ifdef  CPU_CFG_INT_DIS_MEAS_EN
1023:..\..\..\..\..\..\uC-CPU/cpu_core.c **** void  CPU_IntDisMeasStop (void)
1024:..\..\..\..\..\..\uC-CPU/cpu_core.c **** {
1025:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_TS_TMR  time_ints_disd_cnts;
1026:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1027:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1028:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_IntDisNestCtr--;
1029:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     if (CPU_IntDisNestCtr == 0u) {                                  /* If ints NO longer dis'd,    
1030:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         CPU_IntDisMeasStop_cnts = CPU_TS_TmrRd();                   /* ... get  ints dis'd stop tim
1031:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                     /* ... calc ints dis'd tot  tim
1032:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         time_ints_disd_cnts     = CPU_IntDisMeasStop_cnts -
1033:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                   CPU_IntDisMeasStart_cnts;
1034:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                     /* Calc max ints dis'd times.  
1035:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         if (CPU_IntDisMeasMaxCur_cnts < time_ints_disd_cnts) {
1036:..\..\..\..\..\..\uC-CPU/cpu_core.c ****             CPU_IntDisMeasMaxCur_cnts = time_ints_disd_cnts;
1037:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         }
1038:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         if (CPU_IntDisMeasMax_cnts    < time_ints_disd_cnts) {
1039:..\..\..\..\..\..\uC-CPU/cpu_core.c ****             CPU_IntDisMeasMax_cnts    = time_ints_disd_cnts;
1040:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         }
1041:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     }
1042:..\..\..\..\..\..\uC-CPU/cpu_core.c **** }
1043:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
1044:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 32


1045:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1046:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*$PAGE*/
1047:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
1048:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
1049:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                         CPU_CntLeadZeros()
1050:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1051:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Description : Count the number of contiguous, most-significant, leading zero bits in a data value
1052:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1053:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Argument(s) : val         Data value to count leading zero bits.
1054:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1055:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Return(s)   : Number of contiguous, most-significant, leading zero bits in 'val', if NO error(s).
1056:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1057:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               DEF_INT_CPU_U_MAX_VAL,                                              otherwise.
1058:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1059:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Caller(s)   : CPU_CntTrailZeros(),
1060:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               Application.
1061:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1062:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1063:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               be called by application function(s).
1064:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1065:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Note(s)     : (1) (a) Supports the following data value sizes :
1066:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1067:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       (1)  8-bits
1068:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       (2) 16-bits
1069:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       (3) 32-bits
1070:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       (4) 64-bits
1071:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1072:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       See also 'cpu_def.h  CPU WORD CONFIGURATION  Note #1'.
1073:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1074:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   (b) (1) For  8-bit values :
1075:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1076:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                  b07  b06  b05  b04  b03  b02  b01  b00    # Leading Zeros
1077:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                  ---  ---  ---  ---  ---  ---  ---  ---    ---------------
1078:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   1    x    x    x    x    x    x    x            0
1079:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   0    1    x    x    x    x    x    x            1
1080:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   0    0    1    x    x    x    x    x            2
1081:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   0    0    0    1    x    x    x    x            3
1082:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   0    0    0    0    1    x    x    x            4
1083:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   0    0    0    0    0    1    x    x            5
1084:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   0    0    0    0    0    0    1    x            6
1085:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   0    0    0    0    0    0    0    1            7
1086:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   0    0    0    0    0    0    0    0            8
1087:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1088:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1089:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       (2) For 16-bit values :
1090:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1091:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                             b15  b14  b13  ...  b04  b03  b02  b01  b00    # Leading Zeros
1092:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                             ---  ---  ---       ---  ---  ---  ---  ---    ---------------
1093:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              1    x    x         x    x    x    x    x            0
1094:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              0    1    x         x    x    x    x    x            1
1095:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              0    0    1         x    x    x    x    x            2
1096:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              :    :    :         :    :    :    :    :            :
1097:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              :    :    :         :    :    :    :    :            :
1098:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              0    0    0         1    x    x    x    x           11
1099:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              0    0    0         0    1    x    x    x           12
1100:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              0    0    0         0    0    1    x    x           13
1101:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              0    0    0         0    0    0    1    x           14
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 33


1102:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              0    0    0         0    0    0    0    1           15
1103:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              0    0    0         0    0    0    0    0           16
1104:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1105:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *$PAGE*
1106:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       (3) For 32-bit values :
1107:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1108:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                             b31  b30  b29  ...  b04  b03  b02  b01  b00    # Leading Zeros
1109:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                             ---  ---  ---       ---  ---  ---  ---  ---    ---------------
1110:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              1    x    x         x    x    x    x    x            0
1111:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              0    1    x         x    x    x    x    x            1
1112:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              0    0    1         x    x    x    x    x            2
1113:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              :    :    :         :    :    :    :    :            :
1114:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              :    :    :         :    :    :    :    :            :
1115:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              0    0    0         1    x    x    x    x           27
1116:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              0    0    0         0    1    x    x    x           28
1117:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              0    0    0         0    0    1    x    x           29
1118:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              0    0    0         0    0    0    1    x           30
1119:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              0    0    0         0    0    0    0    1           31
1120:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              0    0    0         0    0    0    0    0           32
1121:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1122:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1123:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       (4) For 64-bit values :
1124:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1125:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                             b63  b62  b61  ...  b04  b03  b02  b01  b00    # Leading Zeros
1126:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                             ---  ---  ---       ---  ---  ---  ---  ---    ---------------
1127:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              1    x    x         x    x    x    x    x            0
1128:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              0    1    x         x    x    x    x    x            1
1129:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              0    0    1         x    x    x    x    x            2
1130:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              :    :    :         :    :    :    :    :            :
1131:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              :    :    :         :    :    :    :    :            :
1132:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              0    0    0         1    x    x    x    x           59
1133:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              0    0    0         0    1    x    x    x           60
1134:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              0    0    0         0    0    1    x    x           61
1135:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              0    0    0         0    0    0    1    x           62
1136:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              0    0    0         0    0    0    0    1           63
1137:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              0    0    0         0    0    0    0    0           64
1138:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1139:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1140:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       See also 'CPU COUNT LEAD ZEROs LOOKUP TABLE  Note #1'.
1141:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
1142:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
1143:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1144:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #ifndef   CPU_CFG_LEAD_ZEROS_ASM_PRESENT
1145:..\..\..\..\..\..\uC-CPU/cpu_core.c **** CPU_DATA  CPU_CntLeadZeros (CPU_DATA  val)
1146:..\..\..\..\..\..\uC-CPU/cpu_core.c **** {
1147:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_DATA  nbr_lead_zeros;
1148:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1149:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1150:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if   (CPU_CFG_DATA_SIZE == CPU_WORD_SIZE_08)
1151:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     nbr_lead_zeros = CPU_CntLeadZeros08((CPU_INT08U)val);
1152:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1153:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #elif (CPU_CFG_DATA_SIZE == CPU_WORD_SIZE_16)
1154:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     nbr_lead_zeros = CPU_CntLeadZeros16((CPU_INT16U)val);
1155:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1156:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #elif (CPU_CFG_DATA_SIZE == CPU_WORD_SIZE_32)
1157:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     nbr_lead_zeros = CPU_CntLeadZeros32((CPU_INT32U)val);
1158:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 34


1159:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #elif (CPU_CFG_DATA_SIZE == CPU_WORD_SIZE_64)
1160:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     nbr_lead_zeros = CPU_CntLeadZeros64((CPU_INT64U)val);
1161:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1162:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #else                                                           /* See Note #1a.                   
1163:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     nbr_lead_zeros = DEF_INT_CPU_U_MAX_VAL;
1164:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
1165:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1166:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1167:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     return (nbr_lead_zeros);
1168:..\..\..\..\..\..\uC-CPU/cpu_core.c **** }
1169:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
1170:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1171:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1172:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*$PAGE*/
1173:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
1174:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
1175:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                        CPU_CntLeadZeros08()
1176:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1177:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Description : Count the number of contiguous, most-significant, leading zero bits in an 8-bit dat
1178:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1179:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Argument(s) : val         Data value to count leading zero bits.
1180:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1181:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Return(s)   : Number of contiguous, most-significant, leading zero bits in 'val'.
1182:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1183:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Caller(s)   : CPU_CntLeadZeros(),
1184:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               CPU_CntTrailZeros08(),
1185:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               Application.
1186:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1187:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1188:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               called by application function(s).
1189:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1190:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Note(s)     : (1) Supports  8-bit values :
1191:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1192:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               b07  b06  b05  b04  b03  b02  b01  b00    # Leading Zeros
1193:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               ---  ---  ---  ---  ---  ---  ---  ---    ---------------
1194:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                1    x    x    x    x    x    x    x            0
1195:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                0    1    x    x    x    x    x    x            1
1196:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                0    0    1    x    x    x    x    x            2
1197:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                0    0    0    1    x    x    x    x            3
1198:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                0    0    0    0    1    x    x    x            4
1199:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                0    0    0    0    0    1    x    x            5
1200:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                0    0    0    0    0    0    1    x            6
1201:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                0    0    0    0    0    0    0    1            7
1202:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                0    0    0    0    0    0    0    0            8
1203:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1204:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1205:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   See also 'CPU COUNT LEAD ZEROs LOOKUP TABLE  Note #1'.
1206:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
1207:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
1208:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1209:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_08)
1210:..\..\..\..\..\..\uC-CPU/cpu_core.c **** CPU_DATA  CPU_CntLeadZeros08 (CPU_INT08U  val)
1211:..\..\..\..\..\..\uC-CPU/cpu_core.c **** {
 724              		.loc 1 1211 0
 725              		.cfi_startproc
 726              		@ args = 0, pretend = 0, frame = 16
 727              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 35


 728 0000 80B5     		push	{r7, lr}
 729              		.cfi_def_cfa_offset 8
 730              		.cfi_offset 7, -8
 731              		.cfi_offset 14, -4
 732 0002 84B0     		sub	sp, sp, #16
 733              		.cfi_def_cfa_offset 24
 734 0004 00AF     		add	r7, sp, #0
 735              		.cfi_def_cfa_register 7
 736 0006 0346     		mov	r3, r0
 737 0008 FB71     		strb	r3, [r7, #7]
1212:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1213:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08)))
1214:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_DATA  ix;
1215:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
1216:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_DATA  nbr_lead_zeros;
1217:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1218:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                                 /* ---------- ASM-O
1219:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1220:..\..\..\..\..\..\uC-CPU/cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08))
1221:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
 738              		.loc 1 1221 0
 739 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 740 000c 1846     		mov	r0, r3
 741 000e FFF7FEFF 		bl	CPU_CntLeadZeros
 742 0012 F860     		str	r0, [r7, #12]
1222:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_08) * DEF_OCTET_NBR_BITS;
 743              		.loc 1 1222 0
 744 0014 FB68     		ldr	r3, [r7, #12]
 745 0016 183B     		subs	r3, r3, #24
 746 0018 FB60     		str	r3, [r7, #12]
1223:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1224:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1225:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #else                                                                           /* ----------- C-OP
1226:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                                 /* Chk bits [07:00]
1227:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1228:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     ix              = (CPU_DATA)(val >>  0u);                                   /* .. lookup tbl ix
1229:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     nbr_lead_zeros  = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  0u);                /* .. plus nbr msb 
1230:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
1231:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1232:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1233:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     return (nbr_lead_zeros);
 747              		.loc 1 1233 0
 748 001a FB68     		ldr	r3, [r7, #12]
1234:..\..\..\..\..\..\uC-CPU/cpu_core.c **** }
 749              		.loc 1 1234 0
 750 001c 1846     		mov	r0, r3
 751 001e 1037     		adds	r7, r7, #16
 752              		.cfi_def_cfa_offset 8
 753 0020 BD46     		mov	sp, r7
 754              		.cfi_def_cfa_register 13
 755              		@ sp needed
 756 0022 80BD     		pop	{r7, pc}
 757              		.cfi_endproc
 758              	.LFE9:
 759              		.size	CPU_CntLeadZeros08, .-CPU_CntLeadZeros08
 760              		.section	.text.CPU_CntLeadZeros16,"ax",%progbits
 761              		.align	2
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 36


 762              		.global	CPU_CntLeadZeros16
 763              		.thumb
 764              		.thumb_func
 765              		.type	CPU_CntLeadZeros16, %function
 766              	CPU_CntLeadZeros16:
 767              	.LFB10:
1235:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
1236:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1237:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1238:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*$PAGE*/
1239:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
1240:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
1241:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                        CPU_CntLeadZeros16()
1242:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1243:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Description : Count the number of contiguous, most-significant, leading zero bits in a 16-bit dat
1244:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1245:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Argument(s) : val         Data value to count leading zero bits.
1246:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1247:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Return(s)   : Number of contiguous, most-significant, leading zero bits in 'val'.
1248:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1249:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Caller(s)   : CPU_CntLeadZeros(),
1250:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               CPU_CntTrailZeros16(),
1251:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               Application.
1252:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1253:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1254:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               called by application function(s).
1255:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1256:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Note(s)     : (1) Supports 16-bit values :
1257:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1258:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                          b15  b14  b13  ...  b04  b03  b02  b01  b00    # Leading Zeros
1259:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                          ---  ---  ---       ---  ---  ---  ---  ---    ---------------
1260:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           1    x    x         x    x    x    x    x            0
1261:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           0    1    x         x    x    x    x    x            1
1262:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           0    0    1         x    x    x    x    x            2
1263:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           :    :    :         :    :    :    :    :            :
1264:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           :    :    :         :    :    :    :    :            :
1265:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           0    0    0         1    x    x    x    x           11
1266:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           0    0    0         0    1    x    x    x           12
1267:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           0    0    0         0    0    1    x    x           13
1268:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           0    0    0         0    0    0    1    x           14
1269:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           0    0    0         0    0    0    0    1           15
1270:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           0    0    0         0    0    0    0    0           16
1271:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1272:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1273:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   See also 'CPU COUNT LEAD ZEROs LOOKUP TABLE  Note #1'.
1274:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
1275:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
1276:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1277:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_16)
1278:..\..\..\..\..\..\uC-CPU/cpu_core.c **** CPU_DATA  CPU_CntLeadZeros16 (CPU_INT16U  val)
1279:..\..\..\..\..\..\uC-CPU/cpu_core.c **** {
 768              		.loc 1 1279 0
 769              		.cfi_startproc
 770              		@ args = 0, pretend = 0, frame = 16
 771              		@ frame_needed = 1, uses_anonymous_args = 0
 772 0000 80B5     		push	{r7, lr}
 773              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 37


 774              		.cfi_offset 7, -8
 775              		.cfi_offset 14, -4
 776 0002 84B0     		sub	sp, sp, #16
 777              		.cfi_def_cfa_offset 24
 778 0004 00AF     		add	r7, sp, #0
 779              		.cfi_def_cfa_register 7
 780 0006 0346     		mov	r3, r0
 781 0008 FB80     		strh	r3, [r7, #6]	@ movhi
1280:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1281:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16)))
1282:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_DATA  ix;
1283:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
1284:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_DATA  nbr_lead_zeros;
1285:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1286:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                                 /* ---------- ASM-O
1287:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1288:..\..\..\..\..\..\uC-CPU/cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16))
1289:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
 782              		.loc 1 1289 0
 783 000a FB88     		ldrh	r3, [r7, #6]
 784 000c 1846     		mov	r0, r3
 785 000e FFF7FEFF 		bl	CPU_CntLeadZeros
 786 0012 F860     		str	r0, [r7, #12]
1290:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_16) * DEF_OCTET_NBR_BITS;
 787              		.loc 1 1290 0
 788 0014 FB68     		ldr	r3, [r7, #12]
 789 0016 103B     		subs	r3, r3, #16
 790 0018 FB60     		str	r3, [r7, #12]
1291:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1292:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1293:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #else                                                                           /* ----------- C-OP
1294:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     if (val > 0x00FFu) {                                                        /* Chk bits [15:08]
1295:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1296:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         ix             = (CPU_DATA)(val >>  8u);                                /* .. lookup tbl ix
1297:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  0u);             /* .. plus nbr msb 
1298:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1299:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     } else {                                                                    /* Chk bits [07:00]
1300:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1301:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         ix             = (CPU_DATA)(val >>  0u);                                /* .. lookup tbl ix
1302:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  8u);             /* .. plus nbr msb 
1303:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     }
1304:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
1305:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1306:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1307:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     return (nbr_lead_zeros);
 791              		.loc 1 1307 0
 792 001a FB68     		ldr	r3, [r7, #12]
1308:..\..\..\..\..\..\uC-CPU/cpu_core.c **** }
 793              		.loc 1 1308 0
 794 001c 1846     		mov	r0, r3
 795 001e 1037     		adds	r7, r7, #16
 796              		.cfi_def_cfa_offset 8
 797 0020 BD46     		mov	sp, r7
 798              		.cfi_def_cfa_register 13
 799              		@ sp needed
 800 0022 80BD     		pop	{r7, pc}
 801              		.cfi_endproc
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 38


 802              	.LFE10:
 803              		.size	CPU_CntLeadZeros16, .-CPU_CntLeadZeros16
 804              		.section	.text.CPU_CntLeadZeros32,"ax",%progbits
 805              		.align	2
 806              		.global	CPU_CntLeadZeros32
 807              		.thumb
 808              		.thumb_func
 809              		.type	CPU_CntLeadZeros32, %function
 810              	CPU_CntLeadZeros32:
 811              	.LFB11:
1309:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
1310:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1311:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1312:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*$PAGE*/
1313:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
1314:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
1315:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                        CPU_CntLeadZeros32()
1316:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1317:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Description : Count the number of contiguous, most-significant, leading zero bits in a 32-bit dat
1318:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1319:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Argument(s) : val         Data value to count leading zero bits.
1320:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1321:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Return(s)   : Number of contiguous, most-significant, leading zero bits in 'val'.
1322:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1323:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Caller(s)   : CPU_CntLeadZeros(),
1324:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               CPU_CntTrailZeros32(),
1325:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               Application.
1326:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1327:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1328:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               called by application function(s).
1329:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1330:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Note(s)     : (1) Supports 32-bit values :
1331:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1332:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                          b31  b30  b29  ...  b04  b03  b02  b01  b00    # Leading Zeros
1333:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                          ---  ---  ---       ---  ---  ---  ---  ---    ---------------
1334:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           1    x    x         x    x    x    x    x            0
1335:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           0    1    x         x    x    x    x    x            1
1336:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           0    0    1         x    x    x    x    x            2
1337:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           :    :    :         :    :    :    :    :            :
1338:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           :    :    :         :    :    :    :    :            :
1339:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           0    0    0         1    x    x    x    x           27
1340:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           0    0    0         0    1    x    x    x           28
1341:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           0    0    0         0    0    1    x    x           29
1342:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           0    0    0         0    0    0    1    x           30
1343:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           0    0    0         0    0    0    0    1           31
1344:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           0    0    0         0    0    0    0    0           32
1345:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1346:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1347:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   See also 'CPU COUNT LEAD ZEROs LOOKUP TABLE  Note #1'.
1348:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
1349:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
1350:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1351:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_32)
1352:..\..\..\..\..\..\uC-CPU/cpu_core.c **** CPU_DATA  CPU_CntLeadZeros32 (CPU_INT32U  val)
1353:..\..\..\..\..\..\uC-CPU/cpu_core.c **** {
 812              		.loc 1 1353 0
 813              		.cfi_startproc
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 39


 814              		@ args = 0, pretend = 0, frame = 16
 815              		@ frame_needed = 1, uses_anonymous_args = 0
 816 0000 80B5     		push	{r7, lr}
 817              		.cfi_def_cfa_offset 8
 818              		.cfi_offset 7, -8
 819              		.cfi_offset 14, -4
 820 0002 84B0     		sub	sp, sp, #16
 821              		.cfi_def_cfa_offset 24
 822 0004 00AF     		add	r7, sp, #0
 823              		.cfi_def_cfa_register 7
 824 0006 7860     		str	r0, [r7, #4]
1354:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1355:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32)))
1356:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_DATA  ix;
1357:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
1358:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_DATA  nbr_lead_zeros;
1359:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1360:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                                 /* ---------- ASM-O
1361:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1362:..\..\..\..\..\..\uC-CPU/cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32))
1363:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
 825              		.loc 1 1363 0
 826 0008 7868     		ldr	r0, [r7, #4]
 827 000a FFF7FEFF 		bl	CPU_CntLeadZeros
 828 000e F860     		str	r0, [r7, #12]
1364:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_32) * DEF_OCTET_NBR_BITS;
1365:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1366:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1367:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #else                                                                           /* ----------- C-OP
1368:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     if (val > 0x0000FFFFu) {
1369:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         if (val > 0x00FFFFFFu) {                                                /* Chk bits [31:24]
1370:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1371:..\..\..\..\..\..\uC-CPU/cpu_core.c ****             ix             = (CPU_DATA)(val >> 24u);                            /* .. lookup tbl ix
1372:..\..\..\..\..\..\uC-CPU/cpu_core.c ****             nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  0u);         /* .. plus nbr msb 
1373:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1374:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         } else {                                                                /* Chk bits [23:16]
1375:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1376:..\..\..\..\..\..\uC-CPU/cpu_core.c ****             ix             = (CPU_DATA)(val >> 16u);                            /* .. lookup tbl ix
1377:..\..\..\..\..\..\uC-CPU/cpu_core.c ****             nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  8u);         /* .. plus nbr msb 
1378:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         }
1379:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1380:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     } else {
1381:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         if (val > 0x000000FFu) {                                                /* Chk bits [15:08]
1382:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1383:..\..\..\..\..\..\uC-CPU/cpu_core.c ****             ix             = (CPU_DATA)(val >>  8u);                            /* .. lookup tbl ix
1384:..\..\..\..\..\..\uC-CPU/cpu_core.c ****             nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 16u);         /* .. plus nbr msb 
1385:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1386:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         } else {                                                                /* Chk bits [07:00]
1387:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1388:..\..\..\..\..\..\uC-CPU/cpu_core.c ****             ix             = (CPU_DATA)(val >>  0u);                            /* .. lookup tbl ix
1389:..\..\..\..\..\..\uC-CPU/cpu_core.c ****             nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 24u);         /* .. plus nbr msb 
1390:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         }
1391:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     }
1392:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
1393:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1394:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1395:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     return (nbr_lead_zeros);
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 40


 829              		.loc 1 1395 0
 830 0010 FB68     		ldr	r3, [r7, #12]
1396:..\..\..\..\..\..\uC-CPU/cpu_core.c **** }
 831              		.loc 1 1396 0
 832 0012 1846     		mov	r0, r3
 833 0014 1037     		adds	r7, r7, #16
 834              		.cfi_def_cfa_offset 8
 835 0016 BD46     		mov	sp, r7
 836              		.cfi_def_cfa_register 13
 837              		@ sp needed
 838 0018 80BD     		pop	{r7, pc}
 839              		.cfi_endproc
 840              	.LFE11:
 841              		.size	CPU_CntLeadZeros32, .-CPU_CntLeadZeros32
 842 001a 00BF     		.section	.text.CPU_CntLeadZeros64,"ax",%progbits
 843              		.align	2
 844              		.global	CPU_CntLeadZeros64
 845              		.thumb
 846              		.thumb_func
 847              		.type	CPU_CntLeadZeros64, %function
 848              	CPU_CntLeadZeros64:
 849              	.LFB12:
1397:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
1398:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1399:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1400:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*$PAGE*/
1401:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
1402:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
1403:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                        CPU_CntLeadZeros64()
1404:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1405:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Description : Count the number of contiguous, most-significant, leading zero bits in a 64-bit dat
1406:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1407:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Argument(s) : val         Data value to count leading zero bits.
1408:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1409:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Return(s)   : Number of contiguous, most-significant, leading zero bits in 'val'.
1410:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1411:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Caller(s)   : CPU_CntLeadZeros(),
1412:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               CPU_CntTrailZeros64(),
1413:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               Application.
1414:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1415:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1416:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               called by application function(s).
1417:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1418:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Note(s)     : (1) Supports 64-bit values :
1419:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1420:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                          b63  b62  b61  ...  b04  b03  b02  b01  b00    # Leading Zeros
1421:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                          ---  ---  ---       ---  ---  ---  ---  ---    ---------------
1422:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           1    x    x         x    x    x    x    x            0
1423:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           0    1    x         x    x    x    x    x            1
1424:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           0    0    1         x    x    x    x    x            2
1425:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           :    :    :         :    :    :    :    :            :
1426:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           :    :    :         :    :    :    :    :            :
1427:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           0    0    0         1    x    x    x    x           59
1428:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           0    0    0         0    1    x    x    x           60
1429:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           0    0    0         0    0    1    x    x           61
1430:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           0    0    0         0    0    0    1    x           62
1431:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           0    0    0         0    0    0    0    1           63
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 41


1432:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           0    0    0         0    0    0    0    0           64
1433:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1434:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1435:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   See also 'CPU COUNT LEAD ZEROs LOOKUP TABLE  Note #1'.
1436:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
1437:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
1438:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*$PAGE*/
1439:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_64)
1440:..\..\..\..\..\..\uC-CPU/cpu_core.c **** CPU_DATA  CPU_CntLeadZeros64 (CPU_INT64U  val)
1441:..\..\..\..\..\..\uC-CPU/cpu_core.c **** {
 850              		.loc 1 1441 0
 851              		.cfi_startproc
 852              		@ args = 0, pretend = 0, frame = 48
 853              		@ frame_needed = 1, uses_anonymous_args = 0
 854              		@ link register save eliminated.
 855 0000 2DE9F00F 		push	{r4, r5, r6, r7, r8, r9, r10, fp}
 856              		.cfi_def_cfa_offset 32
 857              		.cfi_offset 4, -32
 858              		.cfi_offset 5, -28
 859              		.cfi_offset 6, -24
 860              		.cfi_offset 7, -20
 861              		.cfi_offset 8, -16
 862              		.cfi_offset 9, -12
 863              		.cfi_offset 10, -8
 864              		.cfi_offset 11, -4
 865 0004 8CB0     		sub	sp, sp, #48
 866              		.cfi_def_cfa_offset 80
 867 0006 00AF     		add	r7, sp, #0
 868              		.cfi_def_cfa_register 7
 869 0008 C7E90801 		strd	r0, [r7, #32]
1442:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1443:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64)))
1444:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_DATA  ix;
1445:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
1446:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_DATA  nbr_lead_zeros;
1447:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1448:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                                 /* ---------- ASM-O
1449:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1450:..\..\..\..\..\..\uC-CPU/cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64))
1451:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
1452:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_64) * DEF_OCTET_NBR_BITS;
1453:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1454:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1455:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #else                                                                           /* ----------- C-OP
1456:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     if (val > 0x00000000FFFFFFFFu) {
 870              		.loc 1 1456 0
 871 000c D7E90834 		ldrd	r3, [r7, #32]
 872 0010 012C     		cmp	r4, #1
 873 0012 08BF     		it	eq
 874 0014 002B     		cmpeq	r3, #0
 875 0016 55D3     		bcc	.L40
1457:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         if (val > 0x0000FFFFFFFFFFFFu) {
 876              		.loc 1 1457 0
 877 0018 D7E90834 		ldrd	r3, [r7, #32]
 878 001c 4FF0FF31 		mov	r1, #-1
 879 0020 4FF6FF72 		movw	r2, #65535
 880 0024 A242     		cmp	r2, r4
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 42


 881 0026 08BF     		it	eq
 882 0028 9942     		cmpeq	r1, r3
 883 002a 26D2     		bcs	.L41
1458:..\..\..\..\..\..\uC-CPU/cpu_core.c ****             if (val > 0x00FFFFFFFFFFFFFFu) {                                    /* Chk bits [63:56]
 884              		.loc 1 1458 0
 885 002c D7E90834 		ldrd	r3, [r7, #32]
 886 0030 4FF0FF31 		mov	r1, #-1
 887 0034 6FF07F42 		mvn	r2, #-16777216
 888 0038 A242     		cmp	r2, r4
 889 003a 08BF     		it	eq
 890 003c 9942     		cmpeq	r1, r3
 891 003e 0DD2     		bcs	.L42
1459:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1460:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                 ix             = (CPU_DATA)(val >> 56u);                        /* .. lookup tbl ix
 892              		.loc 1 1460 0
 893 0040 D7E90834 		ldrd	r3, [r7, #32]
 894 0044 230E     		lsrs	r3, r4, #24
 895 0046 BB61     		str	r3, [r7, #24]
 896 0048 0023     		movs	r3, #0
 897 004a FB61     		str	r3, [r7, #28]
 898 004c BB69     		ldr	r3, [r7, #24]
 899 004e BB62     		str	r3, [r7, #40]
1461:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  0u);     /* .. plus nbr msb 
 900              		.loc 1 1461 0
 901 0050 4A4A     		ldr	r2, .L52
 902 0052 BB6A     		ldr	r3, [r7, #40]
 903 0054 1344     		add	r3, r3, r2
 904 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 905 0058 FB62     		str	r3, [r7, #44]
 906 005a 87E0     		b	.L46
 907              	.L42:
1462:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1463:..\..\..\..\..\..\uC-CPU/cpu_core.c ****             } else {                                                            /* Chk bits [55:48]
1464:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1465:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                 ix             = (CPU_DATA)(val >> 48u);                        /* .. lookup tbl ix
 908              		.loc 1 1465 0
 909 005c D7E90834 		ldrd	r3, [r7, #32]
 910 0060 230C     		lsrs	r3, r4, #16
 911 0062 3B61     		str	r3, [r7, #16]
 912 0064 0023     		movs	r3, #0
 913 0066 7B61     		str	r3, [r7, #20]
 914 0068 3B69     		ldr	r3, [r7, #16]
 915 006a BB62     		str	r3, [r7, #40]
1466:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  8u);     /* .. plus nbr msb 
 916              		.loc 1 1466 0
 917 006c 434A     		ldr	r2, .L52
 918 006e BB6A     		ldr	r3, [r7, #40]
 919 0070 1344     		add	r3, r3, r2
 920 0072 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 921 0074 0833     		adds	r3, r3, #8
 922 0076 FB62     		str	r3, [r7, #44]
 923 0078 78E0     		b	.L46
 924              	.L41:
1467:..\..\..\..\..\..\uC-CPU/cpu_core.c ****             }
1468:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1469:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         } else {
1470:..\..\..\..\..\..\uC-CPU/cpu_core.c ****             if (val > 0x000000FFFFFFFFFFu) {                                    /* Chk bits [47:40]
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 43


 925              		.loc 1 1470 0
 926 007a D7E90834 		ldrd	r3, [r7, #32]
 927 007e B4F5807F 		cmp	r4, #256
 928 0082 08BF     		it	eq
 929 0084 002B     		cmpeq	r3, #0
 930 0086 0ED3     		bcc	.L45
1471:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1472:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                 ix             = (CPU_DATA)(val >> 40u);                        /* .. lookup tbl ix
 931              		.loc 1 1472 0
 932 0088 D7E90834 		ldrd	r3, [r7, #32]
 933 008c 230A     		lsrs	r3, r4, #8
 934 008e BB60     		str	r3, [r7, #8]
 935 0090 0023     		movs	r3, #0
 936 0092 FB60     		str	r3, [r7, #12]
 937 0094 BB68     		ldr	r3, [r7, #8]
 938 0096 BB62     		str	r3, [r7, #40]
1473:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 16u);     /* .. plus nbr msb 
 939              		.loc 1 1473 0
 940 0098 384A     		ldr	r2, .L52
 941 009a BB6A     		ldr	r3, [r7, #40]
 942 009c 1344     		add	r3, r3, r2
 943 009e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 944 00a0 1033     		adds	r3, r3, #16
 945 00a2 FB62     		str	r3, [r7, #44]
 946 00a4 62E0     		b	.L46
 947              	.L45:
1474:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1475:..\..\..\..\..\..\uC-CPU/cpu_core.c ****             } else {                                                            /* Chk bits [39:32]
1476:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1477:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                 ix             = (CPU_DATA)(val >> 32u);                        /* .. lookup tbl ix
 948              		.loc 1 1477 0
 949 00a6 D7E90834 		ldrd	r3, [r7, #32]
 950 00aa 2300     		movs	r3, r4
 951 00ac 3B60     		str	r3, [r7]
 952 00ae 0023     		movs	r3, #0
 953 00b0 7B60     		str	r3, [r7, #4]
 954 00b2 3B68     		ldr	r3, [r7]
 955 00b4 BB62     		str	r3, [r7, #40]
1478:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 24u);     /* .. plus nbr msb 
 956              		.loc 1 1478 0
 957 00b6 314A     		ldr	r2, .L52
 958 00b8 BB6A     		ldr	r3, [r7, #40]
 959 00ba 1344     		add	r3, r3, r2
 960 00bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 961 00be 1833     		adds	r3, r3, #24
 962 00c0 FB62     		str	r3, [r7, #44]
 963 00c2 53E0     		b	.L46
 964              	.L40:
1479:..\..\..\..\..\..\uC-CPU/cpu_core.c ****             }
1480:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         }
1481:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1482:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     } else {
1483:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         if (val > 0x000000000000FFFFu) {
 965              		.loc 1 1483 0
 966 00c4 D7E90834 		ldrd	r3, [r7, #32]
 967 00c8 4FF6FF71 		movw	r1, #65535
 968 00cc 4FF00002 		mov	r2, #0
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 44


 969 00d0 A242     		cmp	r2, r4
 970 00d2 08BF     		it	eq
 971 00d4 9942     		cmpeq	r1, r3
 972 00d6 2BD2     		bcs	.L47
1484:..\..\..\..\..\..\uC-CPU/cpu_core.c ****             if (val > 0x0000000000FFFFFFu) {                                    /* Chk bits [31:24]
 973              		.loc 1 1484 0
 974 00d8 D7E90834 		ldrd	r3, [r7, #32]
 975 00dc 6FF07F41 		mvn	r1, #-16777216
 976 00e0 4FF00002 		mov	r2, #0
 977 00e4 A242     		cmp	r2, r4
 978 00e6 08BF     		it	eq
 979 00e8 9942     		cmpeq	r1, r3
 980 00ea 10D2     		bcs	.L48
1485:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1486:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                 ix             = (CPU_DATA)(val >> 24u);                        /* .. lookup tbl ix
 981              		.loc 1 1486 0
 982 00ec D7E90834 		ldrd	r3, [r7, #32]
 983 00f0 4FEA136A 		lsr	r10, r3, #24
 984 00f4 4AEA042A 		orr	r10, r10, r4, lsl #8
 985 00f8 4FEA146B 		lsr	fp, r4, #24
 986 00fc 5346     		mov	r3, r10
 987 00fe BB62     		str	r3, [r7, #40]
1487:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 32u);     /* .. plus nbr msb 
 988              		.loc 1 1487 0
 989 0100 1E4A     		ldr	r2, .L52
 990 0102 BB6A     		ldr	r3, [r7, #40]
 991 0104 1344     		add	r3, r3, r2
 992 0106 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 993 0108 2033     		adds	r3, r3, #32
 994 010a FB62     		str	r3, [r7, #44]
 995 010c 2EE0     		b	.L46
 996              	.L48:
1488:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1489:..\..\..\..\..\..\uC-CPU/cpu_core.c ****             } else {                                                            /* Chk bits [23:16]
1490:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1491:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                 ix             = (CPU_DATA)(val >> 16u);                        /* .. lookup tbl ix
 997              		.loc 1 1491 0
 998 010e D7E90834 		ldrd	r3, [r7, #32]
 999 0112 4FEA1348 		lsr	r8, r3, #16
 1000 0116 48EA0448 		orr	r8, r8, r4, lsl #16
 1001 011a 4FEA1449 		lsr	r9, r4, #16
 1002 011e 4346     		mov	r3, r8
 1003 0120 BB62     		str	r3, [r7, #40]
1492:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 40u);     /* .. plus nbr msb 
 1004              		.loc 1 1492 0
 1005 0122 164A     		ldr	r2, .L52
 1006 0124 BB6A     		ldr	r3, [r7, #40]
 1007 0126 1344     		add	r3, r3, r2
 1008 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1009 012a 2833     		adds	r3, r3, #40
 1010 012c FB62     		str	r3, [r7, #44]
 1011 012e 1DE0     		b	.L46
 1012              	.L47:
1493:..\..\..\..\..\..\uC-CPU/cpu_core.c ****             }
1494:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1495:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         } else {
1496:..\..\..\..\..\..\uC-CPU/cpu_core.c ****             if (val > 0x00000000000000FFu) {                                    /* Chk bits [15:08]
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 45


 1013              		.loc 1 1496 0
 1014 0130 D7E90834 		ldrd	r3, [r7, #32]
 1015 0134 002C     		cmp	r4, #0
 1016 0136 08BF     		it	eq
 1017 0138 B3F5807F 		cmpeq	r3, #256
 1018 013c 0ED3     		bcc	.L50
1497:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1498:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                 ix             = (CPU_DATA)(val >>  8u);                        /* .. lookup tbl ix
 1019              		.loc 1 1498 0
 1020 013e D7E90834 		ldrd	r3, [r7, #32]
 1021 0142 1D0A     		lsrs	r5, r3, #8
 1022 0144 45EA0465 		orr	r5, r5, r4, lsl #24
 1023 0148 260A     		lsrs	r6, r4, #8
 1024 014a 2B46     		mov	r3, r5
 1025 014c BB62     		str	r3, [r7, #40]
1499:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 48u);     /* .. plus nbr msb 
 1026              		.loc 1 1499 0
 1027 014e 0B4A     		ldr	r2, .L52
 1028 0150 BB6A     		ldr	r3, [r7, #40]
 1029 0152 1344     		add	r3, r3, r2
 1030 0154 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1031 0156 3033     		adds	r3, r3, #48
 1032 0158 FB62     		str	r3, [r7, #44]
 1033 015a 07E0     		b	.L46
 1034              	.L50:
1500:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1501:..\..\..\..\..\..\uC-CPU/cpu_core.c ****             } else {                                                            /* Chk bits [07:00]
1502:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                                 /* .. Nbr lead zero
1503:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                 ix             = (CPU_DATA)(val >>  0u);                        /* .. lookup tbl ix
 1035              		.loc 1 1503 0
 1036 015c 3B6A     		ldr	r3, [r7, #32]
 1037 015e BB62     		str	r3, [r7, #40]
1504:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 56u);     /* .. plus nbr msb 
 1038              		.loc 1 1504 0
 1039 0160 064A     		ldr	r2, .L52
 1040 0162 BB6A     		ldr	r3, [r7, #40]
 1041 0164 1344     		add	r3, r3, r2
 1042 0166 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1043 0168 3833     		adds	r3, r3, #56
 1044 016a FB62     		str	r3, [r7, #44]
 1045              	.L46:
1505:..\..\..\..\..\..\uC-CPU/cpu_core.c ****             }
1506:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         }
1507:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     }
1508:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
1509:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1510:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1511:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     return (nbr_lead_zeros);
 1046              		.loc 1 1511 0
 1047 016c FB6A     		ldr	r3, [r7, #44]
1512:..\..\..\..\..\..\uC-CPU/cpu_core.c **** }
 1048              		.loc 1 1512 0
 1049 016e 1846     		mov	r0, r3
 1050 0170 3037     		adds	r7, r7, #48
 1051              		.cfi_def_cfa_offset 32
 1052 0172 BD46     		mov	sp, r7
 1053              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 46


 1054              		@ sp needed
 1055 0174 BDE8F00F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp}
 1056              		.cfi_restore 11
 1057              		.cfi_restore 10
 1058              		.cfi_restore 9
 1059              		.cfi_restore 8
 1060              		.cfi_restore 7
 1061              		.cfi_restore 6
 1062              		.cfi_restore 5
 1063              		.cfi_restore 4
 1064              		.cfi_def_cfa_offset 0
 1065 0178 7047     		bx	lr
 1066              	.L53:
 1067 017a 00BF     		.align	2
 1068              	.L52:
 1069 017c 00000000 		.word	CPU_CntLeadZerosTbl
 1070              		.cfi_endproc
 1071              	.LFE12:
 1072              		.size	CPU_CntLeadZeros64, .-CPU_CntLeadZeros64
 1073              		.section	.text.CPU_CntTrailZeros08,"ax",%progbits
 1074              		.align	2
 1075              		.global	CPU_CntTrailZeros08
 1076              		.thumb
 1077              		.thumb_func
 1078              		.type	CPU_CntTrailZeros08, %function
 1079              	CPU_CntTrailZeros08:
 1080              	.LFB13:
1513:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
1514:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1515:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1516:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*$PAGE*/
1517:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
1518:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
1519:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                         CPU_CntTrailZeros()
1520:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1521:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Description : Count the number of contiguous, least-significant, trailing zero bits in a data val
1522:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1523:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Argument(s) : val         Data value to count trailing zero bits.
1524:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1525:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Return(s)   : Number of contiguous, least-significant, trailing zero bits in 'val'.
1526:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1527:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Caller(s)   : Application.
1528:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1529:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1530:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               be called by application function(s).
1531:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1532:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Note(s)     : (1) (a) Supports the following data value sizes :
1533:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1534:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       (1)  8-bits
1535:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       (2) 16-bits
1536:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       (3) 32-bits
1537:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       (4) 64-bits
1538:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1539:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       See also 'cpu_def.h  CPU WORD CONFIGURATION  Note #1'.
1540:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1541:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   (b) (1) For  8-bit values :
1542:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 47


1543:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                  b07  b06  b05  b04  b03  b02  b01  b00    # Trailing Zeros
1544:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                  ---  ---  ---  ---  ---  ---  ---  ---    ----------------
1545:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   x    x    x    x    x    x    x    1            0
1546:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   x    x    x    x    x    x    1    0            1
1547:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   x    x    x    x    x    1    0    0            2
1548:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   x    x    x    x    1    0    0    0            3
1549:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   x    x    x    1    0    0    0    0            4
1550:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   x    x    1    0    0    0    0    0            5
1551:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   x    1    0    0    0    0    0    0            6
1552:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   1    0    0    0    0    0    0    0            7
1553:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                   0    0    0    0    0    0    0    0            8
1554:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1555:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1556:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       (2) For 16-bit values :
1557:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1558:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                             b15  b14  b13  b12  b11  ...  b02  b01  b00    # Trailing Zeros
1559:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                             ---  ---  ---  ---  ---       ---  ---  ---    ----------------
1560:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              x    x    x    x    x         x    x    1            0
1561:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              x    x    x    x    x         x    1    0            1
1562:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              x    x    x    x    x         1    0    0            2
1563:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              :    :    :    :    :         :    :    :            :
1564:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              :    :    :    :    :         :    :    :            :
1565:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              x    x    x    x    1         0    0    0           11
1566:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              x    x    x    1    0         0    0    0           12
1567:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              x    x    1    0    0         0    0    0           13
1568:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              x    1    0    0    0         0    0    0           14
1569:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              1    0    0    0    0         0    0    0           15
1570:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              0    0    0    0    0         0    0    0           16
1571:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1572:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1573:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       (3) For 32-bit values :
1574:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1575:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                             b31  b30  b29  b28  b27  ...  b02  b01  b00    # Trailing Zeros
1576:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                             ---  ---  ---  ---  ---       ---  ---  ---    ----------------
1577:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              x    x    x    x    x         x    x    1            0
1578:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              x    x    x    x    x         x    1    0            1
1579:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              x    x    x    x    x         1    0    0            2
1580:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              :    :    :    :    :         :    :    :            :
1581:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              :    :    :    :    :         :    :    :            :
1582:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              x    x    x    x    1         0    0    0           27
1583:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              x    x    x    1    0         0    0    0           28
1584:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              x    x    1    0    0         0    0    0           29
1585:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              x    1    0    0    0         0    0    0           30
1586:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              1    0    0    0    0         0    0    0           31
1587:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              0    0    0    0    0         0    0    0           32
1588:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1589:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1590:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       (4) For 64-bit values :
1591:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1592:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                             b63  b62  b61  b60  b59  ...  b02  b01  b00    # Trailing Zeros
1593:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                             ---  ---  ---  ---  ---       ---  ---  ---    ----------------
1594:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              x    x    x    x    x         x    x    1            0
1595:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              x    x    x    x    x         x    1    0            1
1596:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              x    x    x    x    x         1    0    0            2
1597:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              :    :    :    :    :         :    :    :            :
1598:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              :    :    :    :    :         :    :    :            :
1599:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              x    x    x    x    1         0    0    0           59
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 48


1600:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              x    x    x    1    0         0    0    0           60
1601:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              x    x    1    0    0         0    0    0           61
1602:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              x    1    0    0    0         0    0    0           62
1603:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              1    0    0    0    0         0    0    0           63
1604:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                              0    0    0    0    0         0    0    0           64
1605:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1606:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *$PAGE*
1607:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               (2) For non-zero values, the returned number of contiguous, least-significant, trai
1608:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   zero bits is also equivalent to the bit position of the least-significant set b
1609:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1610:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               (3) 'val' SHOULD be validated for non-'0' PRIOR to all other counting zero calculat
1611:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1612:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   (a) CPU_CntTrailZeros()'s final conditional statement calculates 'val's number 
1613:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       trailing zeros based on its return data size, 'CPU_CFG_DATA_SIZE', & 'val's
1614:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       calculated number of lead zeros ONLY if the initial 'val' is non-'0' :
1615:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1616:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           if (val != 0u) {
1617:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               nbr_trail_zeros = ((CPU_CFG_DATA_SIZE * DEF_OCTET_NBR_BITS) - 1u) -
1618:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           } else {
1619:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               nbr_trail_zeros = nbr_lead_zeros;
1620:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           }
1621:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1622:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       Therefore, initially validating all non-'0' values avoids having to conditi
1623:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       execute the final 'if' statement.
1624:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
1625:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
1626:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1627:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #ifndef   CPU_CFG_TRAIL_ZEROS_ASM_PRESENT
1628:..\..\..\..\..\..\uC-CPU/cpu_core.c **** CPU_DATA  CPU_CntTrailZeros (CPU_DATA  val)
1629:..\..\..\..\..\..\uC-CPU/cpu_core.c **** {
1630:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_DATA  val_bit_mask;
1631:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_DATA  nbr_lead_zeros;
1632:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_DATA  nbr_trail_zeros;
1633:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1634:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1635:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see 
1636:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         return (CPU_CFG_DATA_SIZE * DEF_OCTET_NBR_BITS);
1637:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     }
1638:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1639:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1640:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     val_bit_mask    = val & ((CPU_DATA)~val + 1u);              /* Zero/clr all bits EXCEPT least-s
1641:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     nbr_lead_zeros  = CPU_CntLeadZeros(val_bit_mask);           /* Cnt  nbr lead  0s.              
1642:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                 /* Calc nbr trail 0s = (nbr val bit
1643:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     nbr_trail_zeros = ((CPU_CFG_DATA_SIZE * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
1644:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1645:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1646:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     return (nbr_trail_zeros);
1647:..\..\..\..\..\..\uC-CPU/cpu_core.c **** }
1648:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
1649:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1650:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1651:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*$PAGE*/
1652:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
1653:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
1654:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                        CPU_CntTrailZeros08()
1655:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1656:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Description : Count the number of contiguous, least-significant, trailing zero bits in an 8-bit d
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 49


1657:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1658:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Argument(s) : val         Data value to count trailing zero bits.
1659:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1660:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Return(s)   : Number of contiguous, least-significant, trailing zero bits in 'val'.
1661:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1662:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Caller(s)   : Application.
1663:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1664:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1665:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               called by application function(s).
1666:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1667:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Note(s)     : (1) Supports  8-bit values :
1668:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1669:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               b07  b06  b05  b04  b03  b02  b01  b00    # Trailing Zeros
1670:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               ---  ---  ---  ---  ---  ---  ---  ---    ----------------
1671:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                x    x    x    x    x    x    x    1            0
1672:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                x    x    x    x    x    x    1    0            1
1673:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                x    x    x    x    x    1    0    0            2
1674:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                x    x    x    x    1    0    0    0            3
1675:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                x    x    x    1    0    0    0    0            4
1676:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                x    x    1    0    0    0    0    0            5
1677:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                x    1    0    0    0    0    0    0            6
1678:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                1    0    0    0    0    0    0    0            7
1679:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                0    0    0    0    0    0    0    0            8
1680:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1681:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1682:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               (2) For non-zero values, the returned number of contiguous, least-significant, trai
1683:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   zero bits is also equivalent to the bit position of the least-significant set b
1684:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1685:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               (3) 'val' SHOULD be validated for non-'0' PRIOR to all other counting zero calculat
1686:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1687:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   (a) For assembly-optimized implementations, CPU_CntTrailZeros() returns 'val's 
1688:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       number of trailing zeros via CPU's native data size, 'CPU_CFG_DATA_SIZE'.  
1689:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       If the returned number of zeros exceeds CPU_CntTrailZeros08()'s  8-bit retu
1690:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       data size, then the returned number of zeros must be offset by the differen
1691:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       between CPU_CntTrailZeros()'s  & CPU_CntTrailZeros08()'s return data size :
1692:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1693:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
1694:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           if (nbr_trail_zeros >  (CPU_WORD_SIZE_08  * DEF_OCTET_NBR_BITS)) {
1695:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               nbr_trail_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_08) * DEF_OCT
1696:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           }
1697:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1698:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       However, this ONLY occurs for an initial 'val' of '0' since all non-'0'  8-
1699:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       values would return a number of trailing zeros less than or equal to  8 bit
1700:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1701:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       Therefore, initially validating all non-'0' values prior to calling assembl
1702:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       optimized CPU_CntTrailZeros() avoids having to offset the number of returne
1703:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       trailing zeros by the difference in CPU data size and  8-bit data value bit
1704:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1705:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   (b) For CPU_CntTrailZeros08()'s C implementation, the final conditional stateme
1706:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       calculates 'val's number of trailing zeros based on CPU_CntTrailZeros08()'s
1707:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                        8-bit return data size & 'val's calculated number of lead zeros ONLY if th
1708:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       initial 'val' is non-'0' :
1709:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1710:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           if (val != 0u) {
1711:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               nbr_trail_zeros = ((CPU_WORD_SIZE_08 * DEF_OCTET_NBR_BITS) - 1u) - 
1712:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           } else {
1713:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               nbr_trail_zeros = nbr_lead_zeros;
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 50


1714:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           }
1715:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1716:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       Therefore, initially validating all non-'0' values avoids having to conditi
1717:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       execute the final 'if' statement.
1718:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
1719:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
1720:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*$PAGE*/
1721:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_08)
1722:..\..\..\..\..\..\uC-CPU/cpu_core.c **** CPU_DATA  CPU_CntTrailZeros08 (CPU_INT08U  val)
1723:..\..\..\..\..\..\uC-CPU/cpu_core.c **** {
 1081              		.loc 1 1723 0
 1082              		.cfi_startproc
 1083              		@ args = 0, pretend = 0, frame = 16
 1084              		@ frame_needed = 1, uses_anonymous_args = 0
 1085 0000 80B5     		push	{r7, lr}
 1086              		.cfi_def_cfa_offset 8
 1087              		.cfi_offset 7, -8
 1088              		.cfi_offset 14, -4
 1089 0002 84B0     		sub	sp, sp, #16
 1090              		.cfi_def_cfa_offset 24
 1091 0004 00AF     		add	r7, sp, #0
 1092              		.cfi_def_cfa_register 7
 1093 0006 0346     		mov	r3, r0
 1094 0008 FB71     		strb	r3, [r7, #7]
1724:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
1725:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08)))
1726:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_INT08U  val_bit_mask;
1727:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_DATA    nbr_lead_zeros;
1728:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
1729:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_DATA    nbr_trail_zeros;
1730:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1731:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1732:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see 
 1095              		.loc 1 1732 0
 1096 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1097 000c 002B     		cmp	r3, #0
 1098 000e 01D1     		bne	.L55
1733:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         return (CPU_WORD_SIZE_08 * DEF_OCTET_NBR_BITS);
 1099              		.loc 1 1733 0
 1100 0010 0823     		movs	r3, #8
 1101 0012 05E0     		b	.L56
 1102              	.L55:
1734:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     }
1735:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1736:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                 /* ------------------ ASM-OPTIMIZED
1737:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
1738:..\..\..\..\..\..\uC-CPU/cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08))
1739:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
 1103              		.loc 1 1739 0
 1104 0014 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1105 0016 1846     		mov	r0, r3
 1106 0018 FFF7FEFF 		bl	CPU_CntTrailZeros
 1107 001c F860     		str	r0, [r7, #12]
1740:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1741:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #else                                                           /* ------------------- C-OPTIMIZED 
1742:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     val_bit_mask    = val & ((CPU_INT08U)~val + 1u);            /* Zero/clr all bits EXCEPT least-s
1743:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     nbr_lead_zeros  = CPU_CntLeadZeros08(val_bit_mask);         /* Cnt  nbr lead  0s.              
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 51


1744:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                 /* Calc nbr trail 0s = (nbr val bit
1745:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     nbr_trail_zeros = ((CPU_WORD_SIZE_08 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
1746:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
1747:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1748:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1749:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     return (nbr_trail_zeros);
 1108              		.loc 1 1749 0
 1109 001e FB68     		ldr	r3, [r7, #12]
 1110              	.L56:
1750:..\..\..\..\..\..\uC-CPU/cpu_core.c **** }
 1111              		.loc 1 1750 0
 1112 0020 1846     		mov	r0, r3
 1113 0022 1037     		adds	r7, r7, #16
 1114              		.cfi_def_cfa_offset 8
 1115 0024 BD46     		mov	sp, r7
 1116              		.cfi_def_cfa_register 13
 1117              		@ sp needed
 1118 0026 80BD     		pop	{r7, pc}
 1119              		.cfi_endproc
 1120              	.LFE13:
 1121              		.size	CPU_CntTrailZeros08, .-CPU_CntTrailZeros08
 1122              		.section	.text.CPU_CntTrailZeros16,"ax",%progbits
 1123              		.align	2
 1124              		.global	CPU_CntTrailZeros16
 1125              		.thumb
 1126              		.thumb_func
 1127              		.type	CPU_CntTrailZeros16, %function
 1128              	CPU_CntTrailZeros16:
 1129              	.LFB14:
1751:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
1752:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1753:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1754:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*$PAGE*/
1755:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
1756:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
1757:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                        CPU_CntTrailZeros16()
1758:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1759:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Description : Count the number of contiguous, least-significant, trailing zero bits in a 16-bit d
1760:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1761:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Argument(s) : val         Data value to count trailing zero bits.
1762:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1763:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Return(s)   : Number of contiguous, least-significant, trailing zero bits in 'val'.
1764:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1765:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Caller(s)   : Application.
1766:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1767:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1768:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               called by application function(s).
1769:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1770:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Note(s)     : (1) Supports 16-bit values :
1771:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1772:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                          b15  b14  b13  b12  b11  ...  b02  b01  b00    # Trailing Zeros
1773:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                          ---  ---  ---  ---  ---       ---  ---  ---    ----------------
1774:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           x    x    x    x    x         x    x    1            0
1775:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           x    x    x    x    x         x    1    0            1
1776:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           x    x    x    x    x         1    0    0            2
1777:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           :    :    :    :    :         :    :    :            :
1778:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           :    :    :    :    :         :    :    :            :
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 52


1779:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           x    x    x    x    1         0    0    0           11
1780:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           x    x    x    1    0         0    0    0           12
1781:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           x    x    1    0    0         0    0    0           13
1782:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           x    1    0    0    0         0    0    0           14
1783:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           1    0    0    0    0         0    0    0           15
1784:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           0    0    0    0    0         0    0    0           16
1785:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1786:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1787:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               (2) For non-zero values, the returned number of contiguous, least-significant, trai
1788:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   zero bits is also equivalent to the bit position of the least-significant set b
1789:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1790:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               (3) 'val' SHOULD be validated for non-'0' PRIOR to all other counting zero calculat
1791:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1792:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   (a) For assembly-optimized implementations, CPU_CntTrailZeros() returns 'val's 
1793:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       number of trailing zeros via CPU's native data size, 'CPU_CFG_DATA_SIZE'.  
1794:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       If the returned number of zeros exceeds CPU_CntTrailZeros16()'s 16-bit retu
1795:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       data size, then the returned number of zeros must be offset by the differen
1796:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       between CPU_CntTrailZeros()'s  & CPU_CntTrailZeros16()'s return data size :
1797:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1798:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
1799:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           if (nbr_trail_zeros >  (CPU_WORD_SIZE_16  * DEF_OCTET_NBR_BITS)) {
1800:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               nbr_trail_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_16) * DEF_OCT
1801:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           }
1802:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1803:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       However, this ONLY occurs for an initial 'val' of '0' since all non-'0' 16-
1804:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       values would return a number of trailing zeros less than or equal to 16 bit
1805:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1806:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       Therefore, initially validating all non-'0' values prior to calling assembl
1807:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       optimized CPU_CntTrailZeros() avoids having to offset the number of returne
1808:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       trailing zeros by the difference in CPU data size and 16-bit data value bit
1809:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1810:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   (b) For CPU_CntTrailZeros16()'s C implementation, the final conditional stateme
1811:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       calculates 'val's number of trailing zeros based on CPU_CntTrailZeros16()'s
1812:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       16-bit return data size & 'val's calculated number of lead zeros ONLY if th
1813:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       initial 'val' is non-'0' :
1814:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1815:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           if (val != 0u) {
1816:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               nbr_trail_zeros = ((CPU_WORD_SIZE_16 * DEF_OCTET_NBR_BITS) - 1u) - 
1817:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           } else {
1818:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               nbr_trail_zeros = nbr_lead_zeros;
1819:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           }
1820:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1821:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       Therefore, initially validating all non-'0' values avoids having to conditi
1822:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       execute the final 'if' statement.
1823:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
1824:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
1825:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*$PAGE*/
1826:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_16)
1827:..\..\..\..\..\..\uC-CPU/cpu_core.c **** CPU_DATA  CPU_CntTrailZeros16 (CPU_INT16U  val)
1828:..\..\..\..\..\..\uC-CPU/cpu_core.c **** {
 1130              		.loc 1 1828 0
 1131              		.cfi_startproc
 1132              		@ args = 0, pretend = 0, frame = 16
 1133              		@ frame_needed = 1, uses_anonymous_args = 0
 1134 0000 80B5     		push	{r7, lr}
 1135              		.cfi_def_cfa_offset 8
 1136              		.cfi_offset 7, -8
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 53


 1137              		.cfi_offset 14, -4
 1138 0002 84B0     		sub	sp, sp, #16
 1139              		.cfi_def_cfa_offset 24
 1140 0004 00AF     		add	r7, sp, #0
 1141              		.cfi_def_cfa_register 7
 1142 0006 0346     		mov	r3, r0
 1143 0008 FB80     		strh	r3, [r7, #6]	@ movhi
1829:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
1830:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16)))
1831:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_INT16U  val_bit_mask;
1832:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_DATA    nbr_lead_zeros;
1833:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
1834:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_DATA    nbr_trail_zeros;
1835:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1836:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1837:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see 
 1144              		.loc 1 1837 0
 1145 000a FB88     		ldrh	r3, [r7, #6]
 1146 000c 002B     		cmp	r3, #0
 1147 000e 01D1     		bne	.L58
1838:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         return (CPU_WORD_SIZE_16 * DEF_OCTET_NBR_BITS);
 1148              		.loc 1 1838 0
 1149 0010 1023     		movs	r3, #16
 1150 0012 05E0     		b	.L59
 1151              	.L58:
1839:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     }
1840:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1841:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                 /* ------------------ ASM-OPTIMIZED
1842:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
1843:..\..\..\..\..\..\uC-CPU/cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16))
1844:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
 1152              		.loc 1 1844 0
 1153 0014 FB88     		ldrh	r3, [r7, #6]
 1154 0016 1846     		mov	r0, r3
 1155 0018 FFF7FEFF 		bl	CPU_CntTrailZeros
 1156 001c F860     		str	r0, [r7, #12]
1845:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1846:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #else                                                           /* ------------------- C-OPTIMIZED 
1847:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     val_bit_mask    = val & ((CPU_INT16U)~val + 1u);            /* Zero/clr all bits EXCEPT least-s
1848:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     nbr_lead_zeros  = CPU_CntLeadZeros16(val_bit_mask);         /* Cnt  nbr lead  0s.              
1849:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                 /* Calc nbr trail 0s = (nbr val bit
1850:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     nbr_trail_zeros = ((CPU_WORD_SIZE_16 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
1851:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
1852:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1853:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1854:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     return (nbr_trail_zeros);
 1157              		.loc 1 1854 0
 1158 001e FB68     		ldr	r3, [r7, #12]
 1159              	.L59:
1855:..\..\..\..\..\..\uC-CPU/cpu_core.c **** }
 1160              		.loc 1 1855 0
 1161 0020 1846     		mov	r0, r3
 1162 0022 1037     		adds	r7, r7, #16
 1163              		.cfi_def_cfa_offset 8
 1164 0024 BD46     		mov	sp, r7
 1165              		.cfi_def_cfa_register 13
 1166              		@ sp needed
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 54


 1167 0026 80BD     		pop	{r7, pc}
 1168              		.cfi_endproc
 1169              	.LFE14:
 1170              		.size	CPU_CntTrailZeros16, .-CPU_CntTrailZeros16
 1171              		.section	.text.CPU_CntTrailZeros32,"ax",%progbits
 1172              		.align	2
 1173              		.global	CPU_CntTrailZeros32
 1174              		.thumb
 1175              		.thumb_func
 1176              		.type	CPU_CntTrailZeros32, %function
 1177              	CPU_CntTrailZeros32:
 1178              	.LFB15:
1856:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
1857:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1858:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1859:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*$PAGE*/
1860:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
1861:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
1862:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                        CPU_CntTrailZeros32()
1863:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1864:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Description : Count the number of contiguous, least-significant, trailing zero bits in a 32-bit d
1865:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1866:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Argument(s) : val         Data value to count trailing zero bits.
1867:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1868:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Return(s)   : Number of contiguous, least-significant, trailing zero bits in 'val'.
1869:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1870:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Caller(s)   : Application.
1871:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1872:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1873:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               called by application function(s).
1874:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1875:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Note(s)     : (1) Supports 32-bit values :
1876:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1877:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                          b31  b30  b29  b28  b27  ...  b02  b01  b00    # Trailing Zeros
1878:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                          ---  ---  ---  ---  ---       ---  ---  ---    ----------------
1879:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           x    x    x    x    x         x    x    1            0
1880:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           x    x    x    x    x         x    1    0            1
1881:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           x    x    x    x    x         1    0    0            2
1882:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           :    :    :    :    :         :    :    :            :
1883:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           :    :    :    :    :         :    :    :            :
1884:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           x    x    x    x    1         0    0    0           27
1885:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           x    x    x    1    0         0    0    0           28
1886:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           x    x    1    0    0         0    0    0           29
1887:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           x    1    0    0    0         0    0    0           30
1888:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           1    0    0    0    0         0    0    0           31
1889:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           0    0    0    0    0         0    0    0           32
1890:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1891:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1892:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               (2) For non-zero values, the returned number of contiguous, least-significant, trai
1893:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   zero bits is also equivalent to the bit position of the least-significant set b
1894:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1895:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               (3) 'val' SHOULD be validated for non-'0' PRIOR to all other counting zero calculat
1896:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1897:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   (a) For assembly-optimized implementations, CPU_CntTrailZeros() returns 'val's 
1898:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       number of trailing zeros via CPU's native data size, 'CPU_CFG_DATA_SIZE'.  
1899:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       If the returned number of zeros exceeds CPU_CntTrailZeros32()'s 32-bit retu
1900:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       data size, then the returned number of zeros must be offset by the differen
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 55


1901:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       between CPU_CntTrailZeros()'s  & CPU_CntTrailZeros32()'s return data size :
1902:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1903:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
1904:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           if (nbr_trail_zeros >  (CPU_WORD_SIZE_32  * DEF_OCTET_NBR_BITS)) {
1905:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               nbr_trail_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_32) * DEF_OCT
1906:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           }
1907:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1908:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       However, this ONLY occurs for an initial 'val' of '0' since all non-'0' 32-
1909:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       values would return a number of trailing zeros less than or equal to 32 bit
1910:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1911:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       Therefore, initially validating all non-'0' values prior to calling assembl
1912:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       optimized CPU_CntTrailZeros() avoids having to offset the number of returne
1913:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       trailing zeros by the difference in CPU data size and 32-bit data value bit
1914:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1915:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   (b) For CPU_CntTrailZeros32()'s C implementation, the final conditional stateme
1916:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       calculates 'val's number of trailing zeros based on CPU_CntTrailZeros32()'s
1917:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       32-bit return data size & 'val's calculated number of lead zeros ONLY if th
1918:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       initial 'val' is non-'0' :
1919:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1920:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           if (val != 0u) {
1921:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               nbr_trail_zeros = ((CPU_WORD_SIZE_32 * DEF_OCTET_NBR_BITS) - 1u) - 
1922:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           } else {
1923:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               nbr_trail_zeros = nbr_lead_zeros;
1924:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           }
1925:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1926:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       Therefore, initially validating all non-'0' values avoids having to conditi
1927:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       execute the final 'if' statement.
1928:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
1929:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
1930:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*$PAGE*/
1931:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_32)
1932:..\..\..\..\..\..\uC-CPU/cpu_core.c **** CPU_DATA  CPU_CntTrailZeros32 (CPU_INT32U  val)
1933:..\..\..\..\..\..\uC-CPU/cpu_core.c **** {
 1179              		.loc 1 1933 0
 1180              		.cfi_startproc
 1181              		@ args = 0, pretend = 0, frame = 16
 1182              		@ frame_needed = 1, uses_anonymous_args = 0
 1183 0000 80B5     		push	{r7, lr}
 1184              		.cfi_def_cfa_offset 8
 1185              		.cfi_offset 7, -8
 1186              		.cfi_offset 14, -4
 1187 0002 84B0     		sub	sp, sp, #16
 1188              		.cfi_def_cfa_offset 24
 1189 0004 00AF     		add	r7, sp, #0
 1190              		.cfi_def_cfa_register 7
 1191 0006 7860     		str	r0, [r7, #4]
1934:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
1935:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32)))
1936:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_INT32U  val_bit_mask;
1937:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_DATA    nbr_lead_zeros;
1938:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
1939:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_DATA    nbr_trail_zeros;
1940:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1941:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1942:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see 
 1192              		.loc 1 1942 0
 1193 0008 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 56


 1194 000a 002B     		cmp	r3, #0
 1195 000c 01D1     		bne	.L61
1943:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         return (CPU_WORD_SIZE_32 * DEF_OCTET_NBR_BITS);
 1196              		.loc 1 1943 0
 1197 000e 2023     		movs	r3, #32
 1198 0010 04E0     		b	.L62
 1199              	.L61:
1944:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     }
1945:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1946:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                 /* ------------------ ASM-OPTIMIZED
1947:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
1948:..\..\..\..\..\..\uC-CPU/cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32))
1949:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
 1200              		.loc 1 1949 0
 1201 0012 7868     		ldr	r0, [r7, #4]
 1202 0014 FFF7FEFF 		bl	CPU_CntTrailZeros
 1203 0018 F860     		str	r0, [r7, #12]
1950:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1951:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #else                                                           /* ------------------- C-OPTIMIZED 
1952:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     val_bit_mask    = val & ((CPU_INT32U)~val + 1u);            /* Zero/clr all bits EXCEPT least-s
1953:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     nbr_lead_zeros  = CPU_CntLeadZeros32(val_bit_mask);         /* Cnt  nbr lead  0s.              
1954:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                 /* Calc nbr trail 0s = (nbr val bit
1955:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     nbr_trail_zeros = ((CPU_WORD_SIZE_32 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
1956:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
1957:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1958:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1959:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     return (nbr_trail_zeros);
 1204              		.loc 1 1959 0
 1205 001a FB68     		ldr	r3, [r7, #12]
 1206              	.L62:
1960:..\..\..\..\..\..\uC-CPU/cpu_core.c **** }
 1207              		.loc 1 1960 0
 1208 001c 1846     		mov	r0, r3
 1209 001e 1037     		adds	r7, r7, #16
 1210              		.cfi_def_cfa_offset 8
 1211 0020 BD46     		mov	sp, r7
 1212              		.cfi_def_cfa_register 13
 1213              		@ sp needed
 1214 0022 80BD     		pop	{r7, pc}
 1215              		.cfi_endproc
 1216              	.LFE15:
 1217              		.size	CPU_CntTrailZeros32, .-CPU_CntTrailZeros32
 1218              		.section	.text.CPU_CntTrailZeros64,"ax",%progbits
 1219              		.align	2
 1220              		.global	CPU_CntTrailZeros64
 1221              		.thumb
 1222              		.thumb_func
 1223              		.type	CPU_CntTrailZeros64, %function
 1224              	CPU_CntTrailZeros64:
 1225              	.LFB16:
1961:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
1962:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1963:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
1964:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*$PAGE*/
1965:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
1966:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
1967:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                        CPU_CntTrailZeros64()
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 57


1968:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1969:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Description : Count the number of contiguous, least-significant, trailing zero bits in a 64-bit d
1970:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1971:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Argument(s) : val         Data value to count trailing zero bits.
1972:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1973:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Return(s)   : Number of contiguous, least-significant, trailing zero bits in 'val'.
1974:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1975:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Caller(s)   : Application.
1976:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1977:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1978:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               called by application function(s).
1979:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1980:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Note(s)     : (1) Supports 64-bit values :
1981:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1982:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                          b63  b62  b61  b60  b59  ...  b02  b01  b00    # Trailing Zeros
1983:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                          ---  ---  ---  ---  ---       ---  ---  ---    ----------------
1984:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           x    x    x    x    x         x    x    1            0
1985:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           x    x    x    x    x         x    1    0            1
1986:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           x    x    x    x    x         1    0    0            2
1987:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           :    :    :    :    :         :    :    :            :
1988:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           :    :    :    :    :         :    :    :            :
1989:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           x    x    x    x    1         0    0    0           59
1990:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           x    x    x    1    0         0    0    0           60
1991:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           x    x    1    0    0         0    0    0           61
1992:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           x    1    0    0    0         0    0    0           62
1993:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           1    0    0    0    0         0    0    0           63
1994:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           0    0    0    0    0         0    0    0           64
1995:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1996:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
1997:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               (2) For non-zero values, the returned number of contiguous, least-significant, trai
1998:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   zero bits is also equivalent to the bit position of the least-significant set b
1999:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
2000:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *               (3) 'val' SHOULD be validated for non-'0' PRIOR to all other counting zero calculat
2001:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
2002:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   (a) For assembly-optimized implementations, CPU_CntTrailZeros() returns 'val's 
2003:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       number of trailing zeros via CPU's native data size, 'CPU_CFG_DATA_SIZE'.  
2004:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       If the returned number of zeros exceeds CPU_CntTrailZeros64()'s 64-bit retu
2005:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       data size, then the returned number of zeros must be offset by the differen
2006:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       between CPU_CntTrailZeros()'s  & CPU_CntTrailZeros64()'s return data size :
2007:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
2008:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
2009:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           if (nbr_trail_zeros >  (CPU_WORD_SIZE_64  * DEF_OCTET_NBR_BITS)) {
2010:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               nbr_trail_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_64) * DEF_OCT
2011:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           }
2012:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
2013:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       However, this ONLY occurs for an initial 'val' of '0' since all non-'0' 64-
2014:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       values would return a number of trailing zeros less than or equal to 64 bit
2015:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
2016:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       Therefore, initially validating all non-'0' values prior to calling assembl
2017:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       optimized CPU_CntTrailZeros() avoids having to offset the number of returne
2018:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       trailing zeros by the difference in CPU data size and 64-bit data value bit
2019:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
2020:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   (b) For CPU_CntTrailZeros64()'s C implementation, the final conditional stateme
2021:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       calculates 'val's number of trailing zeros based on CPU_CntTrailZeros64()'s
2022:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       64-bit return data size & 'val's calculated number of lead zeros ONLY if th
2023:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       initial 'val' is non-'0' :
2024:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 58


2025:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           if (val != 0u) {
2026:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               nbr_trail_zeros = ((CPU_WORD_SIZE_64 * DEF_OCTET_NBR_BITS) - 1u) - 
2027:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           } else {
2028:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                               nbr_trail_zeros = nbr_lead_zeros;
2029:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                           }
2030:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
2031:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       Therefore, initially validating all non-'0' values avoids having to conditi
2032:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                       execute the final 'if' statement.
2033:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
2034:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
2035:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*$PAGE*/
2036:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_64)
2037:..\..\..\..\..\..\uC-CPU/cpu_core.c **** CPU_DATA  CPU_CntTrailZeros64 (CPU_INT64U  val)
2038:..\..\..\..\..\..\uC-CPU/cpu_core.c **** {
 1226              		.loc 1 2038 0
 1227              		.cfi_startproc
 1228              		@ args = 0, pretend = 0, frame = 24
 1229              		@ frame_needed = 1, uses_anonymous_args = 0
 1230 0000 90B5     		push	{r4, r7, lr}
 1231              		.cfi_def_cfa_offset 12
 1232              		.cfi_offset 4, -12
 1233              		.cfi_offset 7, -8
 1234              		.cfi_offset 14, -4
 1235 0002 87B0     		sub	sp, sp, #28
 1236              		.cfi_def_cfa_offset 40
 1237 0004 00AF     		add	r7, sp, #0
 1238              		.cfi_def_cfa_register 7
 1239 0006 C7E90001 		strd	r0, [r7]
2039:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
2040:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64)))
2041:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_INT64U  val_bit_mask;
2042:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_DATA    nbr_lead_zeros;
2043:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
2044:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_DATA    nbr_trail_zeros;
2045:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
2046:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
2047:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see 
 1240              		.loc 1 2047 0
 1241 000a D7E90034 		ldrd	r3, [r7]
 1242 000e 2343     		orrs	r3, r3, r4
 1243 0010 01D1     		bne	.L64
2048:..\..\..\..\..\..\uC-CPU/cpu_core.c ****         return (CPU_WORD_SIZE_64 * DEF_OCTET_NBR_BITS);
 1244              		.loc 1 2048 0
 1245 0012 4023     		movs	r3, #64
 1246 0014 16E0     		b	.L65
 1247              	.L64:
2049:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     }
2050:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
2051:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                 /* ------------------ ASM-OPTIMIZED
2052:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
2053:..\..\..\..\..\..\uC-CPU/cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64))
2054:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
2055:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
2056:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #else                                                           /* ------------------- C-OPTIMIZED 
2057:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     val_bit_mask    = val & ((CPU_INT64U)~val + 1u);            /* Zero/clr all bits EXCEPT least-s
 1248              		.loc 1 2057 0
 1249 0016 D7E90034 		ldrd	r3, [r7]
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 59


 1250 001a 5942     		rsbs	r1, r3, #0
 1251 001c 64EB4402 		sbc	r2, r4, r4, lsl #1
 1252 0020 D7E90034 		ldrd	r3, [r7]
 1253 0024 03EA0103 		and	r3, r3, r1
 1254 0028 04EA0204 		and	r4, r4, r2
 1255 002c C7E90434 		strd	r3, [r7, #16]
2058:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     nbr_lead_zeros  = CPU_CntLeadZeros64(val_bit_mask);         /* Cnt  nbr lead  0s.              
 1256              		.loc 1 2058 0
 1257 0030 D7E90401 		ldrd	r0, [r7, #16]
 1258 0034 FFF7FEFF 		bl	CPU_CntLeadZeros64
 1259 0038 F860     		str	r0, [r7, #12]
2059:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                 /* Calc nbr trail 0s = (nbr val bit
2060:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     nbr_trail_zeros = ((CPU_WORD_SIZE_64 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
 1260              		.loc 1 2060 0
 1261 003a FB68     		ldr	r3, [r7, #12]
 1262 003c C3F13F03 		rsb	r3, r3, #63
 1263 0040 BB60     		str	r3, [r7, #8]
2061:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
2062:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
2063:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
2064:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     return (nbr_trail_zeros);
 1264              		.loc 1 2064 0
 1265 0042 BB68     		ldr	r3, [r7, #8]
 1266              	.L65:
2065:..\..\..\..\..\..\uC-CPU/cpu_core.c **** }
 1267              		.loc 1 2065 0
 1268 0044 1846     		mov	r0, r3
 1269 0046 1C37     		adds	r7, r7, #28
 1270              		.cfi_def_cfa_offset 12
 1271 0048 BD46     		mov	sp, r7
 1272              		.cfi_def_cfa_register 13
 1273              		@ sp needed
 1274 004a 90BD     		pop	{r4, r7, pc}
 1275              		.cfi_endproc
 1276              	.LFE16:
 1277              		.size	CPU_CntTrailZeros64, .-CPU_CntTrailZeros64
 1278              		.section	.text.CPU_NameInit,"ax",%progbits
 1279              		.align	2
 1280              		.thumb
 1281              		.thumb_func
 1282              		.type	CPU_NameInit, %function
 1283              	CPU_NameInit:
 1284              	.LFB17:
2066:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
2067:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
2068:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
2069:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*$PAGE*/
2070:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
2071:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
2072:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
2073:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                           LOCAL FUNCTIONS
2074:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
2075:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
2076:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
2077:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
2078:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
2079:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 60


2080:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                           CPU_NameInit()
2081:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
2082:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Description : Initialize CPU Name.
2083:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
2084:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Argument(s) : none.
2085:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
2086:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Return(s)   : none.
2087:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
2088:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Caller(s)   : CPU_Init().
2089:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
2090:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Note(s)     : none.
2091:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
2092:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
2093:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
2094:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if (CPU_CFG_NAME_EN == DEF_ENABLED)
2095:..\..\..\..\..\..\uC-CPU/cpu_core.c **** static  void  CPU_NameInit (void)
2096:..\..\..\..\..\..\uC-CPU/cpu_core.c **** {
 1285              		.loc 1 2096 0
 1286              		.cfi_startproc
 1287              		@ args = 0, pretend = 0, frame = 0
 1288              		@ frame_needed = 1, uses_anonymous_args = 0
 1289 0000 80B5     		push	{r7, lr}
 1290              		.cfi_def_cfa_offset 8
 1291              		.cfi_offset 7, -8
 1292              		.cfi_offset 14, -4
 1293 0002 00AF     		add	r7, sp, #0
 1294              		.cfi_def_cfa_register 7
2097:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_NameClr();
 1295              		.loc 1 2097 0
 1296 0004 FFF7FEFF 		bl	CPU_NameClr
2098:..\..\..\..\..\..\uC-CPU/cpu_core.c **** }
 1297              		.loc 1 2098 0
 1298 0008 00BF     		nop
 1299 000a 80BD     		pop	{r7, pc}
 1300              		.cfi_endproc
 1301              	.LFE17:
 1302              		.size	CPU_NameInit, .-CPU_NameInit
 1303              		.section	.text.CPU_TS_Init,"ax",%progbits
 1304              		.align	2
 1305              		.thumb
 1306              		.thumb_func
 1307              		.type	CPU_TS_Init, %function
 1308              	CPU_TS_Init:
 1309              	.LFB18:
2099:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
2100:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
2101:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
2102:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*$PAGE*/
2103:..\..\..\..\..\..\uC-CPU/cpu_core.c **** /*
2104:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
2105:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                            CPU_TS_Init()
2106:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
2107:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Description : (1) Initialize CPU timestamp :
2108:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
2109:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   (a) Initialize/start CPU timestamp timer                            See Note #1
2110:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   (b) Initialize       CPU timestamp controls
2111:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 61


2112:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
2113:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Argument(s) : none.
2114:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
2115:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Return(s)   : none.
2116:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
2117:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Caller(s)   : CPU_Init().
2118:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
2119:..\..\..\..\..\..\uC-CPU/cpu_core.c **** * Note(s)     : (1) The following initialization MUST be sequenced as follows :
2120:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
2121:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   (a) CPU_TS_TmrFreq_Hz     MUST be initialized prior to CPU_TS_TmrInit()
2122:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   (b) CPU_TS_TmrInit()      SHOULD precede calls to all other CPU timestamp funct
2123:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                                 otherwise, invalid time measurements may be calcu
2124:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                                                 returned.
2125:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *
2126:..\..\..\..\..\..\uC-CPU/cpu_core.c **** *                   See also 'CPU_Init()  Note #3a'.
2127:..\..\..\..\..\..\uC-CPU/cpu_core.c **** ***************************************************************************************************
2128:..\..\..\..\..\..\uC-CPU/cpu_core.c **** */
2129:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
2130:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if ((CPU_CFG_TS_EN     == DEF_ENABLED) || \
2131:..\..\..\..\..\..\uC-CPU/cpu_core.c ****      (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
2132:..\..\..\..\..\..\uC-CPU/cpu_core.c **** static  void  CPU_TS_Init (void)
2133:..\..\..\..\..\..\uC-CPU/cpu_core.c **** {
 1310              		.loc 1 2133 0
 1311              		.cfi_startproc
 1312              		@ args = 0, pretend = 0, frame = 0
 1313              		@ frame_needed = 1, uses_anonymous_args = 0
 1314 0000 80B5     		push	{r7, lr}
 1315              		.cfi_def_cfa_offset 8
 1316              		.cfi_offset 7, -8
 1317              		.cfi_offset 14, -4
 1318 0002 00AF     		add	r7, sp, #0
 1319              		.cfi_def_cfa_register 7
2134:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if (((CPU_CFG_TS_32_EN    == DEF_ENABLED     )  && \
2135:..\..\..\..\..\..\uC-CPU/cpu_core.c ****       (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32)) || \
2136:..\..\..\..\..\..\uC-CPU/cpu_core.c ****      ((CPU_CFG_TS_64_EN    == DEF_ENABLED     )  && \
2137:..\..\..\..\..\..\uC-CPU/cpu_core.c ****       (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64)))
2138:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_TS_TMR  ts_tmr_cnts;
2139:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
2140:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
2141:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
2142:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                 /* ----------------- INIT CPU TS TM
2143:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
2144:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_TS_TmrFreq_Hz   = 0u;                                   /* Init/clr     ts tmr freq (see No
 1320              		.loc 1 2144 0
 1321 0004 034B     		ldr	r3, .L68
 1322 0006 0022     		movs	r2, #0
 1323 0008 1A60     		str	r2, [r3]
2145:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_TS_TmrInit();                                           /* Init & start ts tmr      (see No
 1324              		.loc 1 2145 0
 1325 000a FFF7FEFF 		bl	CPU_TS_TmrInit
2146:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
2147:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
2148:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
2149:..\..\..\..\..\..\uC-CPU/cpu_core.c ****                                                                 /* ------------------- INIT CPU TS 
2150:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if (((CPU_CFG_TS_32_EN    == DEF_ENABLED     )  && \
2151:..\..\..\..\..\..\uC-CPU/cpu_core.c ****       (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32)) || \
2152:..\..\..\..\..\..\uC-CPU/cpu_core.c ****      ((CPU_CFG_TS_64_EN    == DEF_ENABLED     )  && \
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 62


2153:..\..\..\..\..\..\uC-CPU/cpu_core.c ****       (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64)))
2154:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     ts_tmr_cnts = CPU_TS_TmrRd();                               /* Get init ts tmr val (in ts tmr c
2155:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
2156:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
2157:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if  ((CPU_CFG_TS_32_EN    == DEF_ENABLED)  && \
2158:..\..\..\..\..\..\uC-CPU/cpu_core.c ****       (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32))
2159:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_TS_32_Accum   = 0u;                                     /* Init 32-bit accum'd ts.         
2160:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_TS_32_TmrPrev = ts_tmr_cnts;                            /* Init 32-bit ts prev tmr val.    
2161:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
2162:..\..\..\..\..\..\uC-CPU/cpu_core.c **** 
2163:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #if  ((CPU_CFG_TS_64_EN    == DEF_ENABLED)  && \
2164:..\..\..\..\..\..\uC-CPU/cpu_core.c ****       (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64))
2165:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_TS_64_Accum   = 0u;                                     /* Init 64-bit accum'd ts.         
2166:..\..\..\..\..\..\uC-CPU/cpu_core.c ****     CPU_TS_64_TmrPrev = ts_tmr_cnts;                            /* Init 64-bit ts prev tmr val.    
2167:..\..\..\..\..\..\uC-CPU/cpu_core.c **** #endif
2168:..\..\..\..\..\..\uC-CPU/cpu_core.c **** }
 1326              		.loc 1 2168 0
 1327 000e 00BF     		nop
 1328 0010 80BD     		pop	{r7, pc}
 1329              	.L69:
 1330 0012 00BF     		.align	2
 1331              	.L68:
 1332 0014 00000000 		.word	CPU_TS_TmrFreq_Hz
 1333              		.cfi_endproc
 1334              	.LFE18:
 1335              		.size	CPU_TS_Init, .-CPU_TS_Init
 1336              		.text
 1337              	.Letext0:
 1338              		.file 2 "..\\..\\..\\..\\..\\..\\uC-CPU\\ARM-Cortex-M3\\GNU/cpu.h"
 1339              		.file 3 "..\\..\\..\\..\\..\\..\\uC-CPU/cpu_core.h"
 1340              		.section	.debug_info,"",%progbits
 1341              	.Ldebug_info0:
 1342 0000 2B050000 		.4byte	0x52b
 1343 0004 0400     		.2byte	0x4
 1344 0006 00000000 		.4byte	.Ldebug_abbrev0
 1345 000a 04       		.byte	0x4
 1346 000b 01       		.uleb128 0x1
 1347 000c 91000000 		.4byte	.LASF56
 1348 0010 0C       		.byte	0xc
 1349 0011 00000000 		.4byte	.LASF57
 1350 0015 81010000 		.4byte	.LASF58
 1351 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1352 001d 00000000 		.4byte	0
 1353 0021 00000000 		.4byte	.Ldebug_line0
 1354 0025 02       		.uleb128 0x2
 1355 0026 B6020000 		.4byte	.LASF2
 1356 002a 02       		.byte	0x2
 1357 002b 76       		.byte	0x76
 1358 002c 30000000 		.4byte	0x30
 1359 0030 03       		.uleb128 0x3
 1360 0031 01       		.byte	0x1
 1361 0032 08       		.byte	0x8
 1362 0033 2F030000 		.4byte	.LASF0
 1363 0037 03       		.uleb128 0x3
 1364 0038 01       		.byte	0x1
 1365 0039 08       		.byte	0x8
 1366 003a 70020000 		.4byte	.LASF1
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 63


 1367 003e 02       		.uleb128 0x2
 1368 003f 17030000 		.4byte	.LASF3
 1369 0043 02       		.byte	0x2
 1370 0044 78       		.byte	0x78
 1371 0045 37000000 		.4byte	0x37
 1372 0049 03       		.uleb128 0x3
 1373 004a 01       		.byte	0x1
 1374 004b 06       		.byte	0x6
 1375 004c 7E020000 		.4byte	.LASF4
 1376 0050 02       		.uleb128 0x2
 1377 0051 06040000 		.4byte	.LASF5
 1378 0055 02       		.byte	0x2
 1379 0056 7A       		.byte	0x7a
 1380 0057 5B000000 		.4byte	0x5b
 1381 005b 03       		.uleb128 0x3
 1382 005c 02       		.byte	0x2
 1383 005d 07       		.byte	0x7
 1384 005e E7020000 		.4byte	.LASF6
 1385 0062 03       		.uleb128 0x3
 1386 0063 02       		.byte	0x2
 1387 0064 05       		.byte	0x5
 1388 0065 70000000 		.4byte	.LASF7
 1389 0069 02       		.uleb128 0x2
 1390 006a 4E030000 		.4byte	.LASF8
 1391 006e 02       		.byte	0x2
 1392 006f 7C       		.byte	0x7c
 1393 0070 74000000 		.4byte	0x74
 1394 0074 03       		.uleb128 0x3
 1395 0075 04       		.byte	0x4
 1396 0076 07       		.byte	0x7
 1397 0077 BF020000 		.4byte	.LASF9
 1398 007b 04       		.uleb128 0x4
 1399 007c 04       		.byte	0x4
 1400 007d 05       		.byte	0x5
 1401 007e 696E7400 		.ascii	"int\000"
 1402 0082 02       		.uleb128 0x2
 1403 0083 D9030000 		.4byte	.LASF10
 1404 0087 02       		.byte	0x2
 1405 0088 7E       		.byte	0x7e
 1406 0089 8D000000 		.4byte	0x8d
 1407 008d 03       		.uleb128 0x3
 1408 008e 08       		.byte	0x8
 1409 008f 07       		.byte	0x7
 1410 0090 92020000 		.4byte	.LASF11
 1411 0094 03       		.uleb128 0x3
 1412 0095 08       		.byte	0x8
 1413 0096 05       		.byte	0x5
 1414 0097 12020000 		.4byte	.LASF12
 1415 009b 03       		.uleb128 0x3
 1416 009c 04       		.byte	0x4
 1417 009d 04       		.byte	0x4
 1418 009e 03020000 		.4byte	.LASF13
 1419 00a2 03       		.uleb128 0x3
 1420 00a3 08       		.byte	0x8
 1421 00a4 04       		.byte	0x4
 1422 00a5 8B030000 		.4byte	.LASF14
 1423 00a9 02       		.uleb128 0x2
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 64


 1424 00aa 78010000 		.4byte	.LASF15
 1425 00ae 02       		.byte	0x2
 1426 00af B5       		.byte	0xb5
 1427 00b0 69000000 		.4byte	0x69
 1428 00b4 02       		.uleb128 0x2
 1429 00b5 0E030000 		.4byte	.LASF16
 1430 00b9 02       		.byte	0x2
 1431 00ba BE       		.byte	0xbe
 1432 00bb 69000000 		.4byte	0x69
 1433 00bf 02       		.uleb128 0x2
 1434 00c0 A7030000 		.4byte	.LASF17
 1435 00c4 02       		.byte	0x2
 1436 00c5 C7       		.byte	0xc7
 1437 00c6 A9000000 		.4byte	0xa9
 1438 00ca 05       		.uleb128 0x5
 1439 00cb EB030000 		.4byte	.LASF18
 1440 00cf 02       		.byte	0x2
 1441 00d0 2901     		.2byte	0x129
 1442 00d2 69000000 		.4byte	0x69
 1443 00d6 06       		.uleb128 0x6
 1444 00d7 FB010000 		.4byte	.LASF59
 1445 00db 02       		.byte	0x2
 1446 00dc 5B000000 		.4byte	0x5b
 1447 00e0 03       		.byte	0x3
 1448 00e1 AF       		.byte	0xaf
 1449 00e2 01010000 		.4byte	0x101
 1450 00e6 07       		.uleb128 0x7
 1451 00e7 A9020000 		.4byte	.LASF19
 1452 00eb 00       		.byte	0
 1453 00ec 07       		.uleb128 0x7
 1454 00ed 5F020000 		.4byte	.LASF20
 1455 00f1 0A       		.byte	0xa
 1456 00f2 08       		.uleb128 0x8
 1457 00f3 59030000 		.4byte	.LASF21
 1458 00f7 E803     		.2byte	0x3e8
 1459 00f9 08       		.uleb128 0x8
 1460 00fa 47000000 		.4byte	.LASF22
 1461 00fe D007     		.2byte	0x7d0
 1462 0100 00       		.byte	0
 1463 0101 02       		.uleb128 0x2
 1464 0102 83000000 		.4byte	.LASF23
 1465 0106 03       		.byte	0x3
 1466 0107 B8       		.byte	0xb8
 1467 0108 D6000000 		.4byte	0xd6
 1468 010c 02       		.uleb128 0x2
 1469 010d 9E030000 		.4byte	.LASF24
 1470 0111 03       		.byte	0x3
 1471 0112 C4       		.byte	0xc4
 1472 0113 69000000 		.4byte	0x69
 1473 0117 02       		.uleb128 0x2
 1474 0118 24000000 		.4byte	.LASF25
 1475 011c 03       		.byte	0x3
 1476 011d DD       		.byte	0xdd
 1477 011e 69000000 		.4byte	0x69
 1478 0122 09       		.uleb128 0x9
 1479 0123 41010000 		.4byte	.LASF26
 1480 0127 01       		.byte	0x1
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 65


 1481 0128 C1       		.byte	0xc1
 1482 0129 00000000 		.4byte	.LFB0
 1483 012d 10000000 		.4byte	.LFE0-.LFB0
 1484 0131 01       		.uleb128 0x1
 1485 0132 9C       		.byte	0x9c
 1486 0133 0A       		.uleb128 0xa
 1487 0134 5F000000 		.4byte	.LASF27
 1488 0138 01       		.byte	0x1
 1489 0139 E9       		.byte	0xe9
 1490 013a 00000000 		.4byte	.LFB1
 1491 013e 06000000 		.4byte	.LFE1-.LFB1
 1492 0142 01       		.uleb128 0x1
 1493 0143 9C       		.byte	0x9c
 1494 0144 0B       		.uleb128 0xb
 1495 0145 7F030000 		.4byte	.LASF28
 1496 0149 01       		.byte	0x1
 1497 014a 0701     		.2byte	0x107
 1498 014c 00000000 		.4byte	.LFB2
 1499 0150 2C000000 		.4byte	.LFE2-.LFB2
 1500 0154 01       		.uleb128 0x1
 1501 0155 9C       		.byte	0x9c
 1502 0156 6A010000 		.4byte	0x16a
 1503 015a 0C       		.uleb128 0xc
 1504 015b E4030000 		.4byte	.LASF32
 1505 015f 01       		.byte	0x1
 1506 0160 0901     		.2byte	0x109
 1507 0162 CA000000 		.4byte	0xca
 1508 0166 02       		.uleb128 0x2
 1509 0167 91       		.byte	0x91
 1510 0168 74       		.sleb128 -12
 1511 0169 00       		.byte	0
 1512 016a 0B       		.uleb128 0xb
 1513 016b 92030000 		.4byte	.LASF29
 1514 016f 01       		.byte	0x1
 1515 0170 3401     		.2byte	0x134
 1516 0172 00000000 		.4byte	.LFB3
 1517 0176 4C000000 		.4byte	.LFE3-.LFB3
 1518 017a 01       		.uleb128 0x1
 1519 017b 9C       		.byte	0x9c
 1520 017c AE010000 		.4byte	0x1ae
 1521 0180 0D       		.uleb128 0xd
 1522 0181 34030000 		.4byte	.LASF30
 1523 0185 01       		.byte	0x1
 1524 0186 3401     		.2byte	0x134
 1525 0188 AE010000 		.4byte	0x1ae
 1526 018c 02       		.uleb128 0x2
 1527 018d 91       		.byte	0x91
 1528 018e 6C       		.sleb128 -20
 1529 018f 0D       		.uleb128 0xd
 1530 0190 8B000000 		.4byte	.LASF31
 1531 0194 01       		.byte	0x1
 1532 0195 3501     		.2byte	0x135
 1533 0197 B4010000 		.4byte	0x1b4
 1534 019b 02       		.uleb128 0x2
 1535 019c 91       		.byte	0x91
 1536 019d 68       		.sleb128 -24
 1537 019e 0C       		.uleb128 0xc
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 66


 1538 019f E4030000 		.4byte	.LASF32
 1539 01a3 01       		.byte	0x1
 1540 01a4 3701     		.2byte	0x137
 1541 01a6 CA000000 		.4byte	0xca
 1542 01aa 02       		.uleb128 0x2
 1543 01ab 91       		.byte	0x91
 1544 01ac 74       		.sleb128 -12
 1545 01ad 00       		.byte	0
 1546 01ae 0E       		.uleb128 0xe
 1547 01af 04       		.byte	0x4
 1548 01b0 25000000 		.4byte	0x25
 1549 01b4 0E       		.uleb128 0xe
 1550 01b5 04       		.byte	0x4
 1551 01b6 01010000 		.4byte	0x101
 1552 01ba 0B       		.uleb128 0xb
 1553 01bb 3F020000 		.4byte	.LASF33
 1554 01bf 01       		.byte	0x1
 1555 01c0 6A01     		.2byte	0x16a
 1556 01c2 00000000 		.4byte	.LFB4
 1557 01c6 68000000 		.4byte	.LFE4-.LFB4
 1558 01ca 01       		.uleb128 0x1
 1559 01cb 9C       		.byte	0x9c
 1560 01cc 0D020000 		.4byte	0x20d
 1561 01d0 0D       		.uleb128 0xd
 1562 01d1 34030000 		.4byte	.LASF30
 1563 01d5 01       		.byte	0x1
 1564 01d6 6A01     		.2byte	0x16a
 1565 01d8 0D020000 		.4byte	0x20d
 1566 01dc 02       		.uleb128 0x2
 1567 01dd 91       		.byte	0x91
 1568 01de 6C       		.sleb128 -20
 1569 01df 0D       		.uleb128 0xd
 1570 01e0 8B000000 		.4byte	.LASF31
 1571 01e4 01       		.byte	0x1
 1572 01e5 6B01     		.2byte	0x16b
 1573 01e7 B4010000 		.4byte	0x1b4
 1574 01eb 02       		.uleb128 0x2
 1575 01ec 91       		.byte	0x91
 1576 01ed 68       		.sleb128 -24
 1577 01ee 0F       		.uleb128 0xf
 1578 01ef 6C656E00 		.ascii	"len\000"
 1579 01f3 01       		.byte	0x1
 1580 01f4 6D01     		.2byte	0x16d
 1581 01f6 BF000000 		.4byte	0xbf
 1582 01fa 02       		.uleb128 0x2
 1583 01fb 91       		.byte	0x91
 1584 01fc 70       		.sleb128 -16
 1585 01fd 0C       		.uleb128 0xc
 1586 01fe E4030000 		.4byte	.LASF32
 1587 0202 01       		.byte	0x1
 1588 0203 6E01     		.2byte	0x16e
 1589 0205 CA000000 		.4byte	0xca
 1590 0209 02       		.uleb128 0x2
 1591 020a 91       		.byte	0x91
 1592 020b 74       		.sleb128 -12
 1593 020c 00       		.byte	0
 1594 020d 0E       		.uleb128 0xe
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 67


 1595 020e 04       		.byte	0x4
 1596 020f 13020000 		.4byte	0x213
 1597 0213 10       		.uleb128 0x10
 1598 0214 25000000 		.4byte	0x25
 1599 0218 11       		.uleb128 0x11
 1600 0219 22030000 		.4byte	.LASF35
 1601 021d 01       		.byte	0x1
 1602 021e C101     		.2byte	0x1c1
 1603 0220 0C010000 		.4byte	0x10c
 1604 0224 00000000 		.4byte	.LFB5
 1605 0228 16000000 		.4byte	.LFE5-.LFB5
 1606 022c 01       		.uleb128 0x1
 1607 022d 9C       		.byte	0x9c
 1608 022e 41020000 		.4byte	0x241
 1609 0232 0F       		.uleb128 0xf
 1610 0233 747300   		.ascii	"ts\000"
 1611 0236 01       		.byte	0x1
 1612 0237 C301     		.2byte	0x1c3
 1613 0239 0C010000 		.4byte	0x10c
 1614 023d 02       		.uleb128 0x2
 1615 023e 91       		.byte	0x91
 1616 023f 74       		.sleb128 -12
 1617 0240 00       		.byte	0
 1618 0241 12       		.uleb128 0x12
 1619 0242 D9020000 		.4byte	.LASF34
 1620 0246 01       		.byte	0x1
 1621 0247 4A02     		.2byte	0x24a
 1622 0249 00000000 		.4byte	.LFB6
 1623 024d 0C000000 		.4byte	.LFE6-.LFB6
 1624 0251 01       		.uleb128 0x1
 1625 0252 9C       		.byte	0x9c
 1626 0253 11       		.uleb128 0x11
 1627 0254 11040000 		.4byte	.LASF36
 1628 0258 01       		.byte	0x1
 1629 0259 7502     		.2byte	0x275
 1630 025b 17010000 		.4byte	0x117
 1631 025f 00000000 		.4byte	.LFB7
 1632 0263 38000000 		.4byte	.LFE7-.LFB7
 1633 0267 01       		.uleb128 0x1
 1634 0268 9C       		.byte	0x9c
 1635 0269 8C020000 		.4byte	0x28c
 1636 026d 0D       		.uleb128 0xd
 1637 026e 8B000000 		.4byte	.LASF31
 1638 0272 01       		.byte	0x1
 1639 0273 7502     		.2byte	0x275
 1640 0275 B4010000 		.4byte	0x1b4
 1641 0279 02       		.uleb128 0x2
 1642 027a 91       		.byte	0x91
 1643 027b 6C       		.sleb128 -20
 1644 027c 0C       		.uleb128 0xc
 1645 027d 8A020000 		.4byte	.LASF37
 1646 0281 01       		.byte	0x1
 1647 0282 7702     		.2byte	0x277
 1648 0284 17010000 		.4byte	0x117
 1649 0288 02       		.uleb128 0x2
 1650 0289 91       		.byte	0x91
 1651 028a 74       		.sleb128 -12
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 68


 1652 028b 00       		.byte	0
 1653 028c 13       		.uleb128 0x13
 1654 028d 66010000 		.4byte	.LASF38
 1655 0291 01       		.byte	0x1
 1656 0292 A902     		.2byte	0x2a9
 1657 0294 00000000 		.4byte	.LFB8
 1658 0298 1C000000 		.4byte	.LFE8-.LFB8
 1659 029c 01       		.uleb128 0x1
 1660 029d 9C       		.byte	0x9c
 1661 029e B2020000 		.4byte	0x2b2
 1662 02a2 0D       		.uleb128 0xd
 1663 02a3 8A020000 		.4byte	.LASF37
 1664 02a7 01       		.byte	0x1
 1665 02a8 A902     		.2byte	0x2a9
 1666 02aa 17010000 		.4byte	0x117
 1667 02ae 02       		.uleb128 0x2
 1668 02af 91       		.byte	0x91
 1669 02b0 74       		.sleb128 -12
 1670 02b1 00       		.byte	0
 1671 02b2 11       		.uleb128 0x11
 1672 02b3 34000000 		.4byte	.LASF39
 1673 02b7 01       		.byte	0x1
 1674 02b8 BA04     		.2byte	0x4ba
 1675 02ba B4000000 		.4byte	0xb4
 1676 02be 00000000 		.4byte	.LFB9
 1677 02c2 24000000 		.4byte	.LFE9-.LFB9
 1678 02c6 01       		.uleb128 0x1
 1679 02c7 9C       		.byte	0x9c
 1680 02c8 EB020000 		.4byte	0x2eb
 1681 02cc 14       		.uleb128 0x14
 1682 02cd 76616C00 		.ascii	"val\000"
 1683 02d1 01       		.byte	0x1
 1684 02d2 BA04     		.2byte	0x4ba
 1685 02d4 3E000000 		.4byte	0x3e
 1686 02d8 02       		.uleb128 0x2
 1687 02d9 91       		.byte	0x91
 1688 02da 6F       		.sleb128 -17
 1689 02db 0C       		.uleb128 0xc
 1690 02dc 57010000 		.4byte	.LASF40
 1691 02e0 01       		.byte	0x1
 1692 02e1 C004     		.2byte	0x4c0
 1693 02e3 B4000000 		.4byte	0xb4
 1694 02e7 02       		.uleb128 0x2
 1695 02e8 91       		.byte	0x91
 1696 02e9 74       		.sleb128 -12
 1697 02ea 00       		.byte	0
 1698 02eb 11       		.uleb128 0x11
 1699 02ec 20020000 		.4byte	.LASF41
 1700 02f0 01       		.byte	0x1
 1701 02f1 FE04     		.2byte	0x4fe
 1702 02f3 B4000000 		.4byte	0xb4
 1703 02f7 00000000 		.4byte	.LFB10
 1704 02fb 24000000 		.4byte	.LFE10-.LFB10
 1705 02ff 01       		.uleb128 0x1
 1706 0300 9C       		.byte	0x9c
 1707 0301 24030000 		.4byte	0x324
 1708 0305 14       		.uleb128 0x14
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 69


 1709 0306 76616C00 		.ascii	"val\000"
 1710 030a 01       		.byte	0x1
 1711 030b FE04     		.2byte	0x4fe
 1712 030d 50000000 		.4byte	0x50
 1713 0311 02       		.uleb128 0x2
 1714 0312 91       		.byte	0x91
 1715 0313 6E       		.sleb128 -18
 1716 0314 0C       		.uleb128 0xc
 1717 0315 57010000 		.4byte	.LASF40
 1718 0319 01       		.byte	0x1
 1719 031a 0405     		.2byte	0x504
 1720 031c B4000000 		.4byte	0xb4
 1721 0320 02       		.uleb128 0x2
 1722 0321 91       		.byte	0x91
 1723 0322 74       		.sleb128 -12
 1724 0323 00       		.byte	0
 1725 0324 11       		.uleb128 0x11
 1726 0325 C6030000 		.4byte	.LASF42
 1727 0329 01       		.byte	0x1
 1728 032a 4805     		.2byte	0x548
 1729 032c B4000000 		.4byte	0xb4
 1730 0330 00000000 		.4byte	.LFB11
 1731 0334 1A000000 		.4byte	.LFE11-.LFB11
 1732 0338 01       		.uleb128 0x1
 1733 0339 9C       		.byte	0x9c
 1734 033a 5D030000 		.4byte	0x35d
 1735 033e 14       		.uleb128 0x14
 1736 033f 76616C00 		.ascii	"val\000"
 1737 0343 01       		.byte	0x1
 1738 0344 4805     		.2byte	0x548
 1739 0346 69000000 		.4byte	0x69
 1740 034a 02       		.uleb128 0x2
 1741 034b 91       		.byte	0x91
 1742 034c 6C       		.sleb128 -20
 1743 034d 0C       		.uleb128 0xc
 1744 034e 57010000 		.4byte	.LASF40
 1745 0352 01       		.byte	0x1
 1746 0353 4E05     		.2byte	0x54e
 1747 0355 B4000000 		.4byte	0xb4
 1748 0359 02       		.uleb128 0x2
 1749 035a 91       		.byte	0x91
 1750 035b 74       		.sleb128 -12
 1751 035c 00       		.byte	0
 1752 035d 15       		.uleb128 0x15
 1753 035e 3B030000 		.4byte	.LASF43
 1754 0362 01       		.byte	0x1
 1755 0363 A005     		.2byte	0x5a0
 1756 0365 B4000000 		.4byte	0xb4
 1757 0369 00000000 		.4byte	.LFB12
 1758 036d 80010000 		.4byte	.LFE12-.LFB12
 1759 0371 01       		.uleb128 0x1
 1760 0372 9C       		.byte	0x9c
 1761 0373 A4030000 		.4byte	0x3a4
 1762 0377 14       		.uleb128 0x14
 1763 0378 76616C00 		.ascii	"val\000"
 1764 037c 01       		.byte	0x1
 1765 037d A005     		.2byte	0x5a0
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 70


 1766 037f 82000000 		.4byte	0x82
 1767 0383 02       		.uleb128 0x2
 1768 0384 91       		.byte	0x91
 1769 0385 50       		.sleb128 -48
 1770 0386 0F       		.uleb128 0xf
 1771 0387 697800   		.ascii	"ix\000"
 1772 038a 01       		.byte	0x1
 1773 038b A405     		.2byte	0x5a4
 1774 038d B4000000 		.4byte	0xb4
 1775 0391 02       		.uleb128 0x2
 1776 0392 91       		.byte	0x91
 1777 0393 58       		.sleb128 -40
 1778 0394 0C       		.uleb128 0xc
 1779 0395 57010000 		.4byte	.LASF40
 1780 0399 01       		.byte	0x1
 1781 039a A605     		.2byte	0x5a6
 1782 039c B4000000 		.4byte	0xb4
 1783 03a0 02       		.uleb128 0x2
 1784 03a1 91       		.byte	0x91
 1785 03a2 5C       		.sleb128 -36
 1786 03a3 00       		.byte	0
 1787 03a4 11       		.uleb128 0x11
 1788 03a5 B2030000 		.4byte	.LASF44
 1789 03a9 01       		.byte	0x1
 1790 03aa BA06     		.2byte	0x6ba
 1791 03ac B4000000 		.4byte	0xb4
 1792 03b0 00000000 		.4byte	.LFB13
 1793 03b4 28000000 		.4byte	.LFE13-.LFB13
 1794 03b8 01       		.uleb128 0x1
 1795 03b9 9C       		.byte	0x9c
 1796 03ba DD030000 		.4byte	0x3dd
 1797 03be 14       		.uleb128 0x14
 1798 03bf 76616C00 		.ascii	"val\000"
 1799 03c3 01       		.byte	0x1
 1800 03c4 BA06     		.2byte	0x6ba
 1801 03c6 3E000000 		.4byte	0x3e
 1802 03ca 02       		.uleb128 0x2
 1803 03cb 91       		.byte	0x91
 1804 03cc 6F       		.sleb128 -17
 1805 03cd 0C       		.uleb128 0xc
 1806 03ce 31010000 		.4byte	.LASF45
 1807 03d2 01       		.byte	0x1
 1808 03d3 C106     		.2byte	0x6c1
 1809 03d5 B4000000 		.4byte	0xb4
 1810 03d9 02       		.uleb128 0x2
 1811 03da 91       		.byte	0x91
 1812 03db 74       		.sleb128 -12
 1813 03dc 00       		.byte	0
 1814 03dd 11       		.uleb128 0x11
 1815 03de 6B030000 		.4byte	.LASF46
 1816 03e2 01       		.byte	0x1
 1817 03e3 2307     		.2byte	0x723
 1818 03e5 B4000000 		.4byte	0xb4
 1819 03e9 00000000 		.4byte	.LFB14
 1820 03ed 28000000 		.4byte	.LFE14-.LFB14
 1821 03f1 01       		.uleb128 0x1
 1822 03f2 9C       		.byte	0x9c
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 71


 1823 03f3 16040000 		.4byte	0x416
 1824 03f7 14       		.uleb128 0x14
 1825 03f8 76616C00 		.ascii	"val\000"
 1826 03fc 01       		.byte	0x1
 1827 03fd 2307     		.2byte	0x723
 1828 03ff 50000000 		.4byte	0x50
 1829 0403 02       		.uleb128 0x2
 1830 0404 91       		.byte	0x91
 1831 0405 6E       		.sleb128 -18
 1832 0406 0C       		.uleb128 0xc
 1833 0407 31010000 		.4byte	.LASF45
 1834 040b 01       		.byte	0x1
 1835 040c 2A07     		.2byte	0x72a
 1836 040e B4000000 		.4byte	0xb4
 1837 0412 02       		.uleb128 0x2
 1838 0413 91       		.byte	0x91
 1839 0414 74       		.sleb128 -12
 1840 0415 00       		.byte	0
 1841 0416 11       		.uleb128 0x11
 1842 0417 FA020000 		.4byte	.LASF47
 1843 041b 01       		.byte	0x1
 1844 041c 8C07     		.2byte	0x78c
 1845 041e B4000000 		.4byte	0xb4
 1846 0422 00000000 		.4byte	.LFB15
 1847 0426 24000000 		.4byte	.LFE15-.LFB15
 1848 042a 01       		.uleb128 0x1
 1849 042b 9C       		.byte	0x9c
 1850 042c 4F040000 		.4byte	0x44f
 1851 0430 14       		.uleb128 0x14
 1852 0431 76616C00 		.ascii	"val\000"
 1853 0435 01       		.byte	0x1
 1854 0436 8C07     		.2byte	0x78c
 1855 0438 69000000 		.4byte	0x69
 1856 043c 02       		.uleb128 0x2
 1857 043d 91       		.byte	0x91
 1858 043e 6C       		.sleb128 -20
 1859 043f 0C       		.uleb128 0xc
 1860 0440 31010000 		.4byte	.LASF45
 1861 0444 01       		.byte	0x1
 1862 0445 9307     		.2byte	0x793
 1863 0447 B4000000 		.4byte	0xb4
 1864 044b 02       		.uleb128 0x2
 1865 044c 91       		.byte	0x91
 1866 044d 74       		.sleb128 -12
 1867 044e 00       		.byte	0
 1868 044f 11       		.uleb128 0x11
 1869 0450 4B020000 		.4byte	.LASF48
 1870 0454 01       		.byte	0x1
 1871 0455 F507     		.2byte	0x7f5
 1872 0457 B4000000 		.4byte	0xb4
 1873 045b 00000000 		.4byte	.LFB16
 1874 045f 4C000000 		.4byte	.LFE16-.LFB16
 1875 0463 01       		.uleb128 0x1
 1876 0464 9C       		.byte	0x9c
 1877 0465 A6040000 		.4byte	0x4a6
 1878 0469 14       		.uleb128 0x14
 1879 046a 76616C00 		.ascii	"val\000"
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 72


 1880 046e 01       		.byte	0x1
 1881 046f F507     		.2byte	0x7f5
 1882 0471 82000000 		.4byte	0x82
 1883 0475 02       		.uleb128 0x2
 1884 0476 91       		.byte	0x91
 1885 0477 58       		.sleb128 -40
 1886 0478 0C       		.uleb128 0xc
 1887 0479 CC020000 		.4byte	.LASF49
 1888 047d 01       		.byte	0x1
 1889 047e F907     		.2byte	0x7f9
 1890 0480 82000000 		.4byte	0x82
 1891 0484 02       		.uleb128 0x2
 1892 0485 91       		.byte	0x91
 1893 0486 68       		.sleb128 -24
 1894 0487 0C       		.uleb128 0xc
 1895 0488 57010000 		.4byte	.LASF40
 1896 048c 01       		.byte	0x1
 1897 048d FA07     		.2byte	0x7fa
 1898 048f B4000000 		.4byte	0xb4
 1899 0493 02       		.uleb128 0x2
 1900 0494 91       		.byte	0x91
 1901 0495 64       		.sleb128 -28
 1902 0496 0C       		.uleb128 0xc
 1903 0497 31010000 		.4byte	.LASF45
 1904 049b 01       		.byte	0x1
 1905 049c FC07     		.2byte	0x7fc
 1906 049e B4000000 		.4byte	0xb4
 1907 04a2 02       		.uleb128 0x2
 1908 04a3 91       		.byte	0x91
 1909 04a4 60       		.sleb128 -32
 1910 04a5 00       		.byte	0
 1911 04a6 16       		.uleb128 0x16
 1912 04a7 4A010000 		.4byte	.LASF50
 1913 04ab 01       		.byte	0x1
 1914 04ac 2F08     		.2byte	0x82f
 1915 04ae 00000000 		.4byte	.LFB17
 1916 04b2 0C000000 		.4byte	.LFE17-.LFB17
 1917 04b6 01       		.uleb128 0x1
 1918 04b7 9C       		.byte	0x9c
 1919 04b8 16       		.uleb128 0x16
 1920 04b9 33020000 		.4byte	.LASF51
 1921 04bd 01       		.byte	0x1
 1922 04be 5408     		.2byte	0x854
 1923 04c0 00000000 		.4byte	.LFB18
 1924 04c4 18000000 		.4byte	.LFE18-.LFB18
 1925 04c8 01       		.uleb128 0x1
 1926 04c9 9C       		.byte	0x9c
 1927 04ca 17       		.uleb128 0x17
 1928 04cb E1040000 		.4byte	0x4e1
 1929 04cf DA040000 		.4byte	0x4da
 1930 04d3 18       		.uleb128 0x18
 1931 04d4 DA040000 		.4byte	0x4da
 1932 04d8 FF       		.byte	0xff
 1933 04d9 00       		.byte	0
 1934 04da 03       		.uleb128 0x3
 1935 04db 04       		.byte	0x4
 1936 04dc 07       		.byte	0x7
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 73


 1937 04dd 7A000000 		.4byte	.LASF52
 1938 04e1 10       		.uleb128 0x10
 1939 04e2 3E000000 		.4byte	0x3e
 1940 04e6 19       		.uleb128 0x19
 1941 04e7 F2030000 		.4byte	.LASF53
 1942 04eb 01       		.byte	0x1
 1943 04ec 60       		.byte	0x60
 1944 04ed F7040000 		.4byte	0x4f7
 1945 04f1 05       		.uleb128 0x5
 1946 04f2 03       		.byte	0x3
 1947 04f3 00000000 		.4byte	CPU_CntLeadZerosTbl
 1948 04f7 10       		.uleb128 0x10
 1949 04f8 CA040000 		.4byte	0x4ca
 1950 04fc 17       		.uleb128 0x17
 1951 04fd 25000000 		.4byte	0x25
 1952 0501 0C050000 		.4byte	0x50c
 1953 0505 18       		.uleb128 0x18
 1954 0506 DA040000 		.4byte	0x4da
 1955 050a 0F       		.byte	0xf
 1956 050b 00       		.byte	0
 1957 050c 1A       		.uleb128 0x1a
 1958 050d 09020000 		.4byte	.LASF54
 1959 0511 03       		.byte	0x3
 1960 0512 E7       		.byte	0xe7
 1961 0513 FC040000 		.4byte	0x4fc
 1962 0517 05       		.uleb128 0x5
 1963 0518 03       		.byte	0x3
 1964 0519 00000000 		.4byte	CPU_Name
 1965 051d 1A       		.uleb128 0x1a
 1966 051e 1F010000 		.4byte	.LASF55
 1967 0522 03       		.byte	0x3
 1968 0523 F8       		.byte	0xf8
 1969 0524 17010000 		.4byte	0x117
 1970 0528 05       		.uleb128 0x5
 1971 0529 03       		.byte	0x3
 1972 052a 00000000 		.4byte	CPU_TS_TmrFreq_Hz
 1973 052e 00       		.byte	0
 1974              		.section	.debug_abbrev,"",%progbits
 1975              	.Ldebug_abbrev0:
 1976 0000 01       		.uleb128 0x1
 1977 0001 11       		.uleb128 0x11
 1978 0002 01       		.byte	0x1
 1979 0003 25       		.uleb128 0x25
 1980 0004 0E       		.uleb128 0xe
 1981 0005 13       		.uleb128 0x13
 1982 0006 0B       		.uleb128 0xb
 1983 0007 03       		.uleb128 0x3
 1984 0008 0E       		.uleb128 0xe
 1985 0009 1B       		.uleb128 0x1b
 1986 000a 0E       		.uleb128 0xe
 1987 000b 55       		.uleb128 0x55
 1988 000c 17       		.uleb128 0x17
 1989 000d 11       		.uleb128 0x11
 1990 000e 01       		.uleb128 0x1
 1991 000f 10       		.uleb128 0x10
 1992 0010 17       		.uleb128 0x17
 1993 0011 00       		.byte	0
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 74


 1994 0012 00       		.byte	0
 1995 0013 02       		.uleb128 0x2
 1996 0014 16       		.uleb128 0x16
 1997 0015 00       		.byte	0
 1998 0016 03       		.uleb128 0x3
 1999 0017 0E       		.uleb128 0xe
 2000 0018 3A       		.uleb128 0x3a
 2001 0019 0B       		.uleb128 0xb
 2002 001a 3B       		.uleb128 0x3b
 2003 001b 0B       		.uleb128 0xb
 2004 001c 49       		.uleb128 0x49
 2005 001d 13       		.uleb128 0x13
 2006 001e 00       		.byte	0
 2007 001f 00       		.byte	0
 2008 0020 03       		.uleb128 0x3
 2009 0021 24       		.uleb128 0x24
 2010 0022 00       		.byte	0
 2011 0023 0B       		.uleb128 0xb
 2012 0024 0B       		.uleb128 0xb
 2013 0025 3E       		.uleb128 0x3e
 2014 0026 0B       		.uleb128 0xb
 2015 0027 03       		.uleb128 0x3
 2016 0028 0E       		.uleb128 0xe
 2017 0029 00       		.byte	0
 2018 002a 00       		.byte	0
 2019 002b 04       		.uleb128 0x4
 2020 002c 24       		.uleb128 0x24
 2021 002d 00       		.byte	0
 2022 002e 0B       		.uleb128 0xb
 2023 002f 0B       		.uleb128 0xb
 2024 0030 3E       		.uleb128 0x3e
 2025 0031 0B       		.uleb128 0xb
 2026 0032 03       		.uleb128 0x3
 2027 0033 08       		.uleb128 0x8
 2028 0034 00       		.byte	0
 2029 0035 00       		.byte	0
 2030 0036 05       		.uleb128 0x5
 2031 0037 16       		.uleb128 0x16
 2032 0038 00       		.byte	0
 2033 0039 03       		.uleb128 0x3
 2034 003a 0E       		.uleb128 0xe
 2035 003b 3A       		.uleb128 0x3a
 2036 003c 0B       		.uleb128 0xb
 2037 003d 3B       		.uleb128 0x3b
 2038 003e 05       		.uleb128 0x5
 2039 003f 49       		.uleb128 0x49
 2040 0040 13       		.uleb128 0x13
 2041 0041 00       		.byte	0
 2042 0042 00       		.byte	0
 2043 0043 06       		.uleb128 0x6
 2044 0044 04       		.uleb128 0x4
 2045 0045 01       		.byte	0x1
 2046 0046 03       		.uleb128 0x3
 2047 0047 0E       		.uleb128 0xe
 2048 0048 0B       		.uleb128 0xb
 2049 0049 0B       		.uleb128 0xb
 2050 004a 49       		.uleb128 0x49
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 75


 2051 004b 13       		.uleb128 0x13
 2052 004c 3A       		.uleb128 0x3a
 2053 004d 0B       		.uleb128 0xb
 2054 004e 3B       		.uleb128 0x3b
 2055 004f 0B       		.uleb128 0xb
 2056 0050 01       		.uleb128 0x1
 2057 0051 13       		.uleb128 0x13
 2058 0052 00       		.byte	0
 2059 0053 00       		.byte	0
 2060 0054 07       		.uleb128 0x7
 2061 0055 28       		.uleb128 0x28
 2062 0056 00       		.byte	0
 2063 0057 03       		.uleb128 0x3
 2064 0058 0E       		.uleb128 0xe
 2065 0059 1C       		.uleb128 0x1c
 2066 005a 0B       		.uleb128 0xb
 2067 005b 00       		.byte	0
 2068 005c 00       		.byte	0
 2069 005d 08       		.uleb128 0x8
 2070 005e 28       		.uleb128 0x28
 2071 005f 00       		.byte	0
 2072 0060 03       		.uleb128 0x3
 2073 0061 0E       		.uleb128 0xe
 2074 0062 1C       		.uleb128 0x1c
 2075 0063 05       		.uleb128 0x5
 2076 0064 00       		.byte	0
 2077 0065 00       		.byte	0
 2078 0066 09       		.uleb128 0x9
 2079 0067 2E       		.uleb128 0x2e
 2080 0068 00       		.byte	0
 2081 0069 3F       		.uleb128 0x3f
 2082 006a 19       		.uleb128 0x19
 2083 006b 03       		.uleb128 0x3
 2084 006c 0E       		.uleb128 0xe
 2085 006d 3A       		.uleb128 0x3a
 2086 006e 0B       		.uleb128 0xb
 2087 006f 3B       		.uleb128 0x3b
 2088 0070 0B       		.uleb128 0xb
 2089 0071 27       		.uleb128 0x27
 2090 0072 19       		.uleb128 0x19
 2091 0073 11       		.uleb128 0x11
 2092 0074 01       		.uleb128 0x1
 2093 0075 12       		.uleb128 0x12
 2094 0076 06       		.uleb128 0x6
 2095 0077 40       		.uleb128 0x40
 2096 0078 18       		.uleb128 0x18
 2097 0079 9642     		.uleb128 0x2116
 2098 007b 19       		.uleb128 0x19
 2099 007c 00       		.byte	0
 2100 007d 00       		.byte	0
 2101 007e 0A       		.uleb128 0xa
 2102 007f 2E       		.uleb128 0x2e
 2103 0080 00       		.byte	0
 2104 0081 3F       		.uleb128 0x3f
 2105 0082 19       		.uleb128 0x19
 2106 0083 03       		.uleb128 0x3
 2107 0084 0E       		.uleb128 0xe
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 76


 2108 0085 3A       		.uleb128 0x3a
 2109 0086 0B       		.uleb128 0xb
 2110 0087 3B       		.uleb128 0x3b
 2111 0088 0B       		.uleb128 0xb
 2112 0089 27       		.uleb128 0x27
 2113 008a 19       		.uleb128 0x19
 2114 008b 11       		.uleb128 0x11
 2115 008c 01       		.uleb128 0x1
 2116 008d 12       		.uleb128 0x12
 2117 008e 06       		.uleb128 0x6
 2118 008f 40       		.uleb128 0x40
 2119 0090 18       		.uleb128 0x18
 2120 0091 9742     		.uleb128 0x2117
 2121 0093 19       		.uleb128 0x19
 2122 0094 00       		.byte	0
 2123 0095 00       		.byte	0
 2124 0096 0B       		.uleb128 0xb
 2125 0097 2E       		.uleb128 0x2e
 2126 0098 01       		.byte	0x1
 2127 0099 3F       		.uleb128 0x3f
 2128 009a 19       		.uleb128 0x19
 2129 009b 03       		.uleb128 0x3
 2130 009c 0E       		.uleb128 0xe
 2131 009d 3A       		.uleb128 0x3a
 2132 009e 0B       		.uleb128 0xb
 2133 009f 3B       		.uleb128 0x3b
 2134 00a0 05       		.uleb128 0x5
 2135 00a1 27       		.uleb128 0x27
 2136 00a2 19       		.uleb128 0x19
 2137 00a3 11       		.uleb128 0x11
 2138 00a4 01       		.uleb128 0x1
 2139 00a5 12       		.uleb128 0x12
 2140 00a6 06       		.uleb128 0x6
 2141 00a7 40       		.uleb128 0x40
 2142 00a8 18       		.uleb128 0x18
 2143 00a9 9642     		.uleb128 0x2116
 2144 00ab 19       		.uleb128 0x19
 2145 00ac 01       		.uleb128 0x1
 2146 00ad 13       		.uleb128 0x13
 2147 00ae 00       		.byte	0
 2148 00af 00       		.byte	0
 2149 00b0 0C       		.uleb128 0xc
 2150 00b1 34       		.uleb128 0x34
 2151 00b2 00       		.byte	0
 2152 00b3 03       		.uleb128 0x3
 2153 00b4 0E       		.uleb128 0xe
 2154 00b5 3A       		.uleb128 0x3a
 2155 00b6 0B       		.uleb128 0xb
 2156 00b7 3B       		.uleb128 0x3b
 2157 00b8 05       		.uleb128 0x5
 2158 00b9 49       		.uleb128 0x49
 2159 00ba 13       		.uleb128 0x13
 2160 00bb 02       		.uleb128 0x2
 2161 00bc 18       		.uleb128 0x18
 2162 00bd 00       		.byte	0
 2163 00be 00       		.byte	0
 2164 00bf 0D       		.uleb128 0xd
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 77


 2165 00c0 05       		.uleb128 0x5
 2166 00c1 00       		.byte	0
 2167 00c2 03       		.uleb128 0x3
 2168 00c3 0E       		.uleb128 0xe
 2169 00c4 3A       		.uleb128 0x3a
 2170 00c5 0B       		.uleb128 0xb
 2171 00c6 3B       		.uleb128 0x3b
 2172 00c7 05       		.uleb128 0x5
 2173 00c8 49       		.uleb128 0x49
 2174 00c9 13       		.uleb128 0x13
 2175 00ca 02       		.uleb128 0x2
 2176 00cb 18       		.uleb128 0x18
 2177 00cc 00       		.byte	0
 2178 00cd 00       		.byte	0
 2179 00ce 0E       		.uleb128 0xe
 2180 00cf 0F       		.uleb128 0xf
 2181 00d0 00       		.byte	0
 2182 00d1 0B       		.uleb128 0xb
 2183 00d2 0B       		.uleb128 0xb
 2184 00d3 49       		.uleb128 0x49
 2185 00d4 13       		.uleb128 0x13
 2186 00d5 00       		.byte	0
 2187 00d6 00       		.byte	0
 2188 00d7 0F       		.uleb128 0xf
 2189 00d8 34       		.uleb128 0x34
 2190 00d9 00       		.byte	0
 2191 00da 03       		.uleb128 0x3
 2192 00db 08       		.uleb128 0x8
 2193 00dc 3A       		.uleb128 0x3a
 2194 00dd 0B       		.uleb128 0xb
 2195 00de 3B       		.uleb128 0x3b
 2196 00df 05       		.uleb128 0x5
 2197 00e0 49       		.uleb128 0x49
 2198 00e1 13       		.uleb128 0x13
 2199 00e2 02       		.uleb128 0x2
 2200 00e3 18       		.uleb128 0x18
 2201 00e4 00       		.byte	0
 2202 00e5 00       		.byte	0
 2203 00e6 10       		.uleb128 0x10
 2204 00e7 26       		.uleb128 0x26
 2205 00e8 00       		.byte	0
 2206 00e9 49       		.uleb128 0x49
 2207 00ea 13       		.uleb128 0x13
 2208 00eb 00       		.byte	0
 2209 00ec 00       		.byte	0
 2210 00ed 11       		.uleb128 0x11
 2211 00ee 2E       		.uleb128 0x2e
 2212 00ef 01       		.byte	0x1
 2213 00f0 3F       		.uleb128 0x3f
 2214 00f1 19       		.uleb128 0x19
 2215 00f2 03       		.uleb128 0x3
 2216 00f3 0E       		.uleb128 0xe
 2217 00f4 3A       		.uleb128 0x3a
 2218 00f5 0B       		.uleb128 0xb
 2219 00f6 3B       		.uleb128 0x3b
 2220 00f7 05       		.uleb128 0x5
 2221 00f8 27       		.uleb128 0x27
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 78


 2222 00f9 19       		.uleb128 0x19
 2223 00fa 49       		.uleb128 0x49
 2224 00fb 13       		.uleb128 0x13
 2225 00fc 11       		.uleb128 0x11
 2226 00fd 01       		.uleb128 0x1
 2227 00fe 12       		.uleb128 0x12
 2228 00ff 06       		.uleb128 0x6
 2229 0100 40       		.uleb128 0x40
 2230 0101 18       		.uleb128 0x18
 2231 0102 9642     		.uleb128 0x2116
 2232 0104 19       		.uleb128 0x19
 2233 0105 01       		.uleb128 0x1
 2234 0106 13       		.uleb128 0x13
 2235 0107 00       		.byte	0
 2236 0108 00       		.byte	0
 2237 0109 12       		.uleb128 0x12
 2238 010a 2E       		.uleb128 0x2e
 2239 010b 00       		.byte	0
 2240 010c 3F       		.uleb128 0x3f
 2241 010d 19       		.uleb128 0x19
 2242 010e 03       		.uleb128 0x3
 2243 010f 0E       		.uleb128 0xe
 2244 0110 3A       		.uleb128 0x3a
 2245 0111 0B       		.uleb128 0xb
 2246 0112 3B       		.uleb128 0x3b
 2247 0113 05       		.uleb128 0x5
 2248 0114 27       		.uleb128 0x27
 2249 0115 19       		.uleb128 0x19
 2250 0116 11       		.uleb128 0x11
 2251 0117 01       		.uleb128 0x1
 2252 0118 12       		.uleb128 0x12
 2253 0119 06       		.uleb128 0x6
 2254 011a 40       		.uleb128 0x40
 2255 011b 18       		.uleb128 0x18
 2256 011c 9742     		.uleb128 0x2117
 2257 011e 19       		.uleb128 0x19
 2258 011f 00       		.byte	0
 2259 0120 00       		.byte	0
 2260 0121 13       		.uleb128 0x13
 2261 0122 2E       		.uleb128 0x2e
 2262 0123 01       		.byte	0x1
 2263 0124 3F       		.uleb128 0x3f
 2264 0125 19       		.uleb128 0x19
 2265 0126 03       		.uleb128 0x3
 2266 0127 0E       		.uleb128 0xe
 2267 0128 3A       		.uleb128 0x3a
 2268 0129 0B       		.uleb128 0xb
 2269 012a 3B       		.uleb128 0x3b
 2270 012b 05       		.uleb128 0x5
 2271 012c 27       		.uleb128 0x27
 2272 012d 19       		.uleb128 0x19
 2273 012e 11       		.uleb128 0x11
 2274 012f 01       		.uleb128 0x1
 2275 0130 12       		.uleb128 0x12
 2276 0131 06       		.uleb128 0x6
 2277 0132 40       		.uleb128 0x40
 2278 0133 18       		.uleb128 0x18
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 79


 2279 0134 9742     		.uleb128 0x2117
 2280 0136 19       		.uleb128 0x19
 2281 0137 01       		.uleb128 0x1
 2282 0138 13       		.uleb128 0x13
 2283 0139 00       		.byte	0
 2284 013a 00       		.byte	0
 2285 013b 14       		.uleb128 0x14
 2286 013c 05       		.uleb128 0x5
 2287 013d 00       		.byte	0
 2288 013e 03       		.uleb128 0x3
 2289 013f 08       		.uleb128 0x8
 2290 0140 3A       		.uleb128 0x3a
 2291 0141 0B       		.uleb128 0xb
 2292 0142 3B       		.uleb128 0x3b
 2293 0143 05       		.uleb128 0x5
 2294 0144 49       		.uleb128 0x49
 2295 0145 13       		.uleb128 0x13
 2296 0146 02       		.uleb128 0x2
 2297 0147 18       		.uleb128 0x18
 2298 0148 00       		.byte	0
 2299 0149 00       		.byte	0
 2300 014a 15       		.uleb128 0x15
 2301 014b 2E       		.uleb128 0x2e
 2302 014c 01       		.byte	0x1
 2303 014d 3F       		.uleb128 0x3f
 2304 014e 19       		.uleb128 0x19
 2305 014f 03       		.uleb128 0x3
 2306 0150 0E       		.uleb128 0xe
 2307 0151 3A       		.uleb128 0x3a
 2308 0152 0B       		.uleb128 0xb
 2309 0153 3B       		.uleb128 0x3b
 2310 0154 05       		.uleb128 0x5
 2311 0155 27       		.uleb128 0x27
 2312 0156 19       		.uleb128 0x19
 2313 0157 49       		.uleb128 0x49
 2314 0158 13       		.uleb128 0x13
 2315 0159 11       		.uleb128 0x11
 2316 015a 01       		.uleb128 0x1
 2317 015b 12       		.uleb128 0x12
 2318 015c 06       		.uleb128 0x6
 2319 015d 40       		.uleb128 0x40
 2320 015e 18       		.uleb128 0x18
 2321 015f 9742     		.uleb128 0x2117
 2322 0161 19       		.uleb128 0x19
 2323 0162 01       		.uleb128 0x1
 2324 0163 13       		.uleb128 0x13
 2325 0164 00       		.byte	0
 2326 0165 00       		.byte	0
 2327 0166 16       		.uleb128 0x16
 2328 0167 2E       		.uleb128 0x2e
 2329 0168 00       		.byte	0
 2330 0169 03       		.uleb128 0x3
 2331 016a 0E       		.uleb128 0xe
 2332 016b 3A       		.uleb128 0x3a
 2333 016c 0B       		.uleb128 0xb
 2334 016d 3B       		.uleb128 0x3b
 2335 016e 05       		.uleb128 0x5
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 80


 2336 016f 27       		.uleb128 0x27
 2337 0170 19       		.uleb128 0x19
 2338 0171 11       		.uleb128 0x11
 2339 0172 01       		.uleb128 0x1
 2340 0173 12       		.uleb128 0x12
 2341 0174 06       		.uleb128 0x6
 2342 0175 40       		.uleb128 0x40
 2343 0176 18       		.uleb128 0x18
 2344 0177 9642     		.uleb128 0x2116
 2345 0179 19       		.uleb128 0x19
 2346 017a 00       		.byte	0
 2347 017b 00       		.byte	0
 2348 017c 17       		.uleb128 0x17
 2349 017d 01       		.uleb128 0x1
 2350 017e 01       		.byte	0x1
 2351 017f 49       		.uleb128 0x49
 2352 0180 13       		.uleb128 0x13
 2353 0181 01       		.uleb128 0x1
 2354 0182 13       		.uleb128 0x13
 2355 0183 00       		.byte	0
 2356 0184 00       		.byte	0
 2357 0185 18       		.uleb128 0x18
 2358 0186 21       		.uleb128 0x21
 2359 0187 00       		.byte	0
 2360 0188 49       		.uleb128 0x49
 2361 0189 13       		.uleb128 0x13
 2362 018a 2F       		.uleb128 0x2f
 2363 018b 0B       		.uleb128 0xb
 2364 018c 00       		.byte	0
 2365 018d 00       		.byte	0
 2366 018e 19       		.uleb128 0x19
 2367 018f 34       		.uleb128 0x34
 2368 0190 00       		.byte	0
 2369 0191 03       		.uleb128 0x3
 2370 0192 0E       		.uleb128 0xe
 2371 0193 3A       		.uleb128 0x3a
 2372 0194 0B       		.uleb128 0xb
 2373 0195 3B       		.uleb128 0x3b
 2374 0196 0B       		.uleb128 0xb
 2375 0197 49       		.uleb128 0x49
 2376 0198 13       		.uleb128 0x13
 2377 0199 02       		.uleb128 0x2
 2378 019a 18       		.uleb128 0x18
 2379 019b 00       		.byte	0
 2380 019c 00       		.byte	0
 2381 019d 1A       		.uleb128 0x1a
 2382 019e 34       		.uleb128 0x34
 2383 019f 00       		.byte	0
 2384 01a0 03       		.uleb128 0x3
 2385 01a1 0E       		.uleb128 0xe
 2386 01a2 3A       		.uleb128 0x3a
 2387 01a3 0B       		.uleb128 0xb
 2388 01a4 3B       		.uleb128 0x3b
 2389 01a5 0B       		.uleb128 0xb
 2390 01a6 49       		.uleb128 0x49
 2391 01a7 13       		.uleb128 0x13
 2392 01a8 3F       		.uleb128 0x3f
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 81


 2393 01a9 19       		.uleb128 0x19
 2394 01aa 02       		.uleb128 0x2
 2395 01ab 18       		.uleb128 0x18
 2396 01ac 00       		.byte	0
 2397 01ad 00       		.byte	0
 2398 01ae 00       		.byte	0
 2399              		.section	.debug_aranges,"",%progbits
 2400 0000 AC000000 		.4byte	0xac
 2401 0004 0200     		.2byte	0x2
 2402 0006 00000000 		.4byte	.Ldebug_info0
 2403 000a 04       		.byte	0x4
 2404 000b 00       		.byte	0
 2405 000c 0000     		.2byte	0
 2406 000e 0000     		.2byte	0
 2407 0010 00000000 		.4byte	.LFB0
 2408 0014 10000000 		.4byte	.LFE0-.LFB0
 2409 0018 00000000 		.4byte	.LFB1
 2410 001c 06000000 		.4byte	.LFE1-.LFB1
 2411 0020 00000000 		.4byte	.LFB2
 2412 0024 2C000000 		.4byte	.LFE2-.LFB2
 2413 0028 00000000 		.4byte	.LFB3
 2414 002c 4C000000 		.4byte	.LFE3-.LFB3
 2415 0030 00000000 		.4byte	.LFB4
 2416 0034 68000000 		.4byte	.LFE4-.LFB4
 2417 0038 00000000 		.4byte	.LFB5
 2418 003c 16000000 		.4byte	.LFE5-.LFB5
 2419 0040 00000000 		.4byte	.LFB6
 2420 0044 0C000000 		.4byte	.LFE6-.LFB6
 2421 0048 00000000 		.4byte	.LFB7
 2422 004c 38000000 		.4byte	.LFE7-.LFB7
 2423 0050 00000000 		.4byte	.LFB8
 2424 0054 1C000000 		.4byte	.LFE8-.LFB8
 2425 0058 00000000 		.4byte	.LFB9
 2426 005c 24000000 		.4byte	.LFE9-.LFB9
 2427 0060 00000000 		.4byte	.LFB10
 2428 0064 24000000 		.4byte	.LFE10-.LFB10
 2429 0068 00000000 		.4byte	.LFB11
 2430 006c 1A000000 		.4byte	.LFE11-.LFB11
 2431 0070 00000000 		.4byte	.LFB12
 2432 0074 80010000 		.4byte	.LFE12-.LFB12
 2433 0078 00000000 		.4byte	.LFB13
 2434 007c 28000000 		.4byte	.LFE13-.LFB13
 2435 0080 00000000 		.4byte	.LFB14
 2436 0084 28000000 		.4byte	.LFE14-.LFB14
 2437 0088 00000000 		.4byte	.LFB15
 2438 008c 24000000 		.4byte	.LFE15-.LFB15
 2439 0090 00000000 		.4byte	.LFB16
 2440 0094 4C000000 		.4byte	.LFE16-.LFB16
 2441 0098 00000000 		.4byte	.LFB17
 2442 009c 0C000000 		.4byte	.LFE17-.LFB17
 2443 00a0 00000000 		.4byte	.LFB18
 2444 00a4 18000000 		.4byte	.LFE18-.LFB18
 2445 00a8 00000000 		.4byte	0
 2446 00ac 00000000 		.4byte	0
 2447              		.section	.debug_ranges,"",%progbits
 2448              	.Ldebug_ranges0:
 2449 0000 00000000 		.4byte	.LFB0
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 82


 2450 0004 10000000 		.4byte	.LFE0
 2451 0008 00000000 		.4byte	.LFB1
 2452 000c 06000000 		.4byte	.LFE1
 2453 0010 00000000 		.4byte	.LFB2
 2454 0014 2C000000 		.4byte	.LFE2
 2455 0018 00000000 		.4byte	.LFB3
 2456 001c 4C000000 		.4byte	.LFE3
 2457 0020 00000000 		.4byte	.LFB4
 2458 0024 68000000 		.4byte	.LFE4
 2459 0028 00000000 		.4byte	.LFB5
 2460 002c 16000000 		.4byte	.LFE5
 2461 0030 00000000 		.4byte	.LFB6
 2462 0034 0C000000 		.4byte	.LFE6
 2463 0038 00000000 		.4byte	.LFB7
 2464 003c 38000000 		.4byte	.LFE7
 2465 0040 00000000 		.4byte	.LFB8
 2466 0044 1C000000 		.4byte	.LFE8
 2467 0048 00000000 		.4byte	.LFB9
 2468 004c 24000000 		.4byte	.LFE9
 2469 0050 00000000 		.4byte	.LFB10
 2470 0054 24000000 		.4byte	.LFE10
 2471 0058 00000000 		.4byte	.LFB11
 2472 005c 1A000000 		.4byte	.LFE11
 2473 0060 00000000 		.4byte	.LFB12
 2474 0064 80010000 		.4byte	.LFE12
 2475 0068 00000000 		.4byte	.LFB13
 2476 006c 28000000 		.4byte	.LFE13
 2477 0070 00000000 		.4byte	.LFB14
 2478 0074 28000000 		.4byte	.LFE14
 2479 0078 00000000 		.4byte	.LFB15
 2480 007c 24000000 		.4byte	.LFE15
 2481 0080 00000000 		.4byte	.LFB16
 2482 0084 4C000000 		.4byte	.LFE16
 2483 0088 00000000 		.4byte	.LFB17
 2484 008c 0C000000 		.4byte	.LFE17
 2485 0090 00000000 		.4byte	.LFB18
 2486 0094 18000000 		.4byte	.LFE18
 2487 0098 00000000 		.4byte	0
 2488 009c 00000000 		.4byte	0
 2489              		.section	.debug_line,"",%progbits
 2490              	.Ldebug_line0:
 2491 0000 66020000 		.section	.debug_str,"MS",%progbits,1
 2491      02007C00 
 2491      00000201 
 2491      FB0E0D00 
 2491      01010101 
 2492              	.LASF57:
 2493 0000 2E2E5C2E 		.ascii	"..\\..\\..\\..\\..\\..\\uC-CPU\\cpu_core.c\000"
 2493      2E5C2E2E 
 2493      5C2E2E5C 
 2493      2E2E5C2E 
 2493      2E5C7543 
 2494              	.LASF25:
 2495 0024 4350555F 		.ascii	"CPU_TS_TMR_FREQ\000"
 2495      54535F54 
 2495      4D525F46 
 2495      52455100 
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 83


 2496              	.LASF39:
 2497 0034 4350555F 		.ascii	"CPU_CntLeadZeros08\000"
 2497      436E744C 
 2497      6561645A 
 2497      65726F73 
 2497      303800
 2498              	.LASF22:
 2499 0047 4350555F 		.ascii	"CPU_ERR_TS_FREQ_INVALID\000"
 2499      4552525F 
 2499      54535F46 
 2499      5245515F 
 2499      494E5641 
 2500              	.LASF27:
 2501 005f 4350555F 		.ascii	"CPU_SW_Exception\000"
 2501      53575F45 
 2501      78636570 
 2501      74696F6E 
 2501      00
 2502              	.LASF7:
 2503 0070 73686F72 		.ascii	"short int\000"
 2503      7420696E 
 2503      7400
 2504              	.LASF52:
 2505 007a 73697A65 		.ascii	"sizetype\000"
 2505      74797065 
 2505      00
 2506              	.LASF23:
 2507 0083 4350555F 		.ascii	"CPU_ERR\000"
 2507      45525200 
 2508              	.LASF31:
 2509 008b 705F6572 		.ascii	"p_err\000"
 2509      7200
 2510              	.LASF56:
 2511 0091 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2511      43313120 
 2511      352E342E 
 2511      31203230 
 2511      31363036 
 2512 00c4 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2512      20726576 
 2512      6973696F 
 2512      6E203233 
 2512      37373135 
 2513 00f7 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2513      66756E63 
 2513      74696F6E 
 2513      2D736563 
 2513      74696F6E 
 2514              	.LASF55:
 2515 011f 4350555F 		.ascii	"CPU_TS_TmrFreq_Hz\000"
 2515      54535F54 
 2515      6D724672 
 2515      65715F48 
 2515      7A00
 2516              	.LASF45:
 2517 0131 6E62725F 		.ascii	"nbr_trail_zeros\000"
 2517      74726169 
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 84


 2517      6C5F7A65 
 2517      726F7300 
 2518              	.LASF26:
 2519 0141 4350555F 		.ascii	"CPU_Init\000"
 2519      496E6974 
 2519      00
 2520              	.LASF50:
 2521 014a 4350555F 		.ascii	"CPU_NameInit\000"
 2521      4E616D65 
 2521      496E6974 
 2521      00
 2522              	.LASF40:
 2523 0157 6E62725F 		.ascii	"nbr_lead_zeros\000"
 2523      6C656164 
 2523      5F7A6572 
 2523      6F7300
 2524              	.LASF38:
 2525 0166 4350555F 		.ascii	"CPU_TS_TmrFreqSet\000"
 2525      54535F54 
 2525      6D724672 
 2525      65715365 
 2525      7400
 2526              	.LASF15:
 2527 0178 4350555F 		.ascii	"CPU_ADDR\000"
 2527      41444452 
 2527      00
 2528              	.LASF58:
 2529 0181 483A5C42 		.ascii	"H:\\BCC722-RTOS-moinho\\UCoS\\Micrium_2\\Software\\"
 2529      43433732 
 2529      322D5254 
 2529      4F532D6D 
 2529      6F696E68 
 2530 01af 4576616C 		.ascii	"EvalBoards\\Cypress\\CY8CKIT-050\\PSoC\\uCOS-III-Pr"
 2530      426F6172 
 2530      64735C43 
 2530      79707265 
 2530      73735C43 
 2531 01de 6F62655C 		.ascii	"obe\\BCC722-RTOS-MOINHO.cydsn\000"
 2531      42434337 
 2531      32322D52 
 2531      544F532D 
 2531      4D4F494E 
 2532              	.LASF59:
 2533 01fb 6370755F 		.ascii	"cpu_err\000"
 2533      65727200 
 2534              	.LASF13:
 2535 0203 666C6F61 		.ascii	"float\000"
 2535      7400
 2536              	.LASF54:
 2537 0209 4350555F 		.ascii	"CPU_Name\000"
 2537      4E616D65 
 2537      00
 2538              	.LASF12:
 2539 0212 6C6F6E67 		.ascii	"long long int\000"
 2539      206C6F6E 
 2539      6720696E 
 2539      7400
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 85


 2540              	.LASF41:
 2541 0220 4350555F 		.ascii	"CPU_CntLeadZeros16\000"
 2541      436E744C 
 2541      6561645A 
 2541      65726F73 
 2541      313600
 2542              	.LASF51:
 2543 0233 4350555F 		.ascii	"CPU_TS_Init\000"
 2543      54535F49 
 2543      6E697400 
 2544              	.LASF33:
 2545 023f 4350555F 		.ascii	"CPU_NameSet\000"
 2545      4E616D65 
 2545      53657400 
 2546              	.LASF48:
 2547 024b 4350555F 		.ascii	"CPU_CntTrailZeros64\000"
 2547      436E7454 
 2547      7261696C 
 2547      5A65726F 
 2547      73363400 
 2548              	.LASF20:
 2549 025f 4350555F 		.ascii	"CPU_ERR_NULL_PTR\000"
 2549      4552525F 
 2549      4E554C4C 
 2549      5F505452 
 2549      00
 2550              	.LASF1:
 2551 0270 756E7369 		.ascii	"unsigned char\000"
 2551      676E6564 
 2551      20636861 
 2551      7200
 2552              	.LASF4:
 2553 027e 7369676E 		.ascii	"signed char\000"
 2553      65642063 
 2553      68617200 
 2554              	.LASF37:
 2555 028a 66726571 		.ascii	"freq_hz\000"
 2555      5F687A00 
 2556              	.LASF11:
 2557 0292 6C6F6E67 		.ascii	"long long unsigned int\000"
 2557      206C6F6E 
 2557      6720756E 
 2557      7369676E 
 2557      65642069 
 2558              	.LASF19:
 2559 02a9 4350555F 		.ascii	"CPU_ERR_NONE\000"
 2559      4552525F 
 2559      4E4F4E45 
 2559      00
 2560              	.LASF2:
 2561 02b6 4350555F 		.ascii	"CPU_CHAR\000"
 2561      43484152 
 2561      00
 2562              	.LASF9:
 2563 02bf 756E7369 		.ascii	"unsigned int\000"
 2563      676E6564 
 2563      20696E74 
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 86


 2563      00
 2564              	.LASF49:
 2565 02cc 76616C5F 		.ascii	"val_bit_mask\000"
 2565      6269745F 
 2565      6D61736B 
 2565      00
 2566              	.LASF34:
 2567 02d9 4350555F 		.ascii	"CPU_TS_Update\000"
 2567      54535F55 
 2567      70646174 
 2567      6500
 2568              	.LASF6:
 2569 02e7 73686F72 		.ascii	"short unsigned int\000"
 2569      7420756E 
 2569      7369676E 
 2569      65642069 
 2569      6E7400
 2570              	.LASF47:
 2571 02fa 4350555F 		.ascii	"CPU_CntTrailZeros32\000"
 2571      436E7454 
 2571      7261696C 
 2571      5A65726F 
 2571      73333200 
 2572              	.LASF16:
 2573 030e 4350555F 		.ascii	"CPU_DATA\000"
 2573      44415441 
 2573      00
 2574              	.LASF3:
 2575 0317 4350555F 		.ascii	"CPU_INT08U\000"
 2575      494E5430 
 2575      385500
 2576              	.LASF35:
 2577 0322 4350555F 		.ascii	"CPU_TS_Get32\000"
 2577      54535F47 
 2577      65743332 
 2577      00
 2578              	.LASF0:
 2579 032f 63686172 		.ascii	"char\000"
 2579      00
 2580              	.LASF30:
 2581 0334 705F6E61 		.ascii	"p_name\000"
 2581      6D6500
 2582              	.LASF43:
 2583 033b 4350555F 		.ascii	"CPU_CntLeadZeros64\000"
 2583      436E744C 
 2583      6561645A 
 2583      65726F73 
 2583      363400
 2584              	.LASF8:
 2585 034e 4350555F 		.ascii	"CPU_INT32U\000"
 2585      494E5433 
 2585      325500
 2586              	.LASF21:
 2587 0359 4350555F 		.ascii	"CPU_ERR_NAME_SIZE\000"
 2587      4552525F 
 2587      4E414D45 
 2587      5F53495A 
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 87


 2587      4500
 2588              	.LASF46:
 2589 036b 4350555F 		.ascii	"CPU_CntTrailZeros16\000"
 2589      436E7454 
 2589      7261696C 
 2589      5A65726F 
 2589      73313600 
 2590              	.LASF28:
 2591 037f 4350555F 		.ascii	"CPU_NameClr\000"
 2591      4E616D65 
 2591      436C7200 
 2592              	.LASF14:
 2593 038b 646F7562 		.ascii	"double\000"
 2593      6C6500
 2594              	.LASF29:
 2595 0392 4350555F 		.ascii	"CPU_NameGet\000"
 2595      4E616D65 
 2595      47657400 
 2596              	.LASF24:
 2597 039e 4350555F 		.ascii	"CPU_TS32\000"
 2597      54533332 
 2597      00
 2598              	.LASF17:
 2599 03a7 4350555F 		.ascii	"CPU_SIZE_T\000"
 2599      53495A45 
 2599      5F5400
 2600              	.LASF44:
 2601 03b2 4350555F 		.ascii	"CPU_CntTrailZeros08\000"
 2601      436E7454 
 2601      7261696C 
 2601      5A65726F 
 2601      73303800 
 2602              	.LASF42:
 2603 03c6 4350555F 		.ascii	"CPU_CntLeadZeros32\000"
 2603      436E744C 
 2603      6561645A 
 2603      65726F73 
 2603      333200
 2604              	.LASF10:
 2605 03d9 4350555F 		.ascii	"CPU_INT64U\000"
 2605      494E5436 
 2605      345500
 2606              	.LASF32:
 2607 03e4 6370755F 		.ascii	"cpu_sr\000"
 2607      737200
 2608              	.LASF18:
 2609 03eb 4350555F 		.ascii	"CPU_SR\000"
 2609      535200
 2610              	.LASF53:
 2611 03f2 4350555F 		.ascii	"CPU_CntLeadZerosTbl\000"
 2611      436E744C 
 2611      6561645A 
 2611      65726F73 
 2611      54626C00 
 2612              	.LASF5:
 2613 0406 4350555F 		.ascii	"CPU_INT16U\000"
 2613      494E5431 
ARM GAS  C:\Users\alex\AppData\Local\Temp\ccSBLcnl.s 			page 88


 2613      365500
 2614              	.LASF36:
 2615 0411 4350555F 		.ascii	"CPU_TS_TmrFreqGet\000"
 2615      54535F54 
 2615      6D724672 
 2615      65714765 
 2615      7400
 2616              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
