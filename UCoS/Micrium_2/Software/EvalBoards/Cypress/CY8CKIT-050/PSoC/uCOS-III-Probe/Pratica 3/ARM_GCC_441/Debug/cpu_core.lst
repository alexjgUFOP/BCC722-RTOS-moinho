ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"cpu_core.c"
  14              		.section	.debug_abbrev,"",%progbits
  15              	.Ldebug_abbrev0:
  16              		.section	.debug_info,"",%progbits
  17              	.Ldebug_info0:
  18              		.section	.debug_line,"",%progbits
  19              	.Ldebug_line0:
  20 0000 70020000 		.text
  20      02009700 
  20      00000201 
  20      FB0E0D00 
  20      01010101 
  21              	.Ltext0:
  22              		.cfi_sections	.debug_frame
  23              		.comm	CPU_Name,16,4
  24              		.comm	CPU_TS_TmrFreq_Hz,4,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	CPU_CntLeadZerosTbl, %object
  28              		.size	CPU_CntLeadZerosTbl, 256
  29              	CPU_CntLeadZerosTbl:
  30 0000 08       		.byte	8
  31 0001 07       		.byte	7
  32 0002 06       		.byte	6
  33 0003 06       		.byte	6
  34 0004 05       		.byte	5
  35 0005 05       		.byte	5
  36 0006 05       		.byte	5
  37 0007 05       		.byte	5
  38 0008 04       		.byte	4
  39 0009 04       		.byte	4
  40 000a 04       		.byte	4
  41 000b 04       		.byte	4
  42 000c 04       		.byte	4
  43 000d 04       		.byte	4
  44 000e 04       		.byte	4
  45 000f 04       		.byte	4
  46 0010 03       		.byte	3
  47 0011 03       		.byte	3
  48 0012 03       		.byte	3
  49 0013 03       		.byte	3
  50 0014 03       		.byte	3
  51 0015 03       		.byte	3
  52 0016 03       		.byte	3
  53 0017 03       		.byte	3
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 2


  54 0018 03       		.byte	3
  55 0019 03       		.byte	3
  56 001a 03       		.byte	3
  57 001b 03       		.byte	3
  58 001c 03       		.byte	3
  59 001d 03       		.byte	3
  60 001e 03       		.byte	3
  61 001f 03       		.byte	3
  62 0020 02       		.byte	2
  63 0021 02       		.byte	2
  64 0022 02       		.byte	2
  65 0023 02       		.byte	2
  66 0024 02       		.byte	2
  67 0025 02       		.byte	2
  68 0026 02       		.byte	2
  69 0027 02       		.byte	2
  70 0028 02       		.byte	2
  71 0029 02       		.byte	2
  72 002a 02       		.byte	2
  73 002b 02       		.byte	2
  74 002c 02       		.byte	2
  75 002d 02       		.byte	2
  76 002e 02       		.byte	2
  77 002f 02       		.byte	2
  78 0030 02       		.byte	2
  79 0031 02       		.byte	2
  80 0032 02       		.byte	2
  81 0033 02       		.byte	2
  82 0034 02       		.byte	2
  83 0035 02       		.byte	2
  84 0036 02       		.byte	2
  85 0037 02       		.byte	2
  86 0038 02       		.byte	2
  87 0039 02       		.byte	2
  88 003a 02       		.byte	2
  89 003b 02       		.byte	2
  90 003c 02       		.byte	2
  91 003d 02       		.byte	2
  92 003e 02       		.byte	2
  93 003f 02       		.byte	2
  94 0040 01       		.byte	1
  95 0041 01       		.byte	1
  96 0042 01       		.byte	1
  97 0043 01       		.byte	1
  98 0044 01       		.byte	1
  99 0045 01       		.byte	1
 100 0046 01       		.byte	1
 101 0047 01       		.byte	1
 102 0048 01       		.byte	1
 103 0049 01       		.byte	1
 104 004a 01       		.byte	1
 105 004b 01       		.byte	1
 106 004c 01       		.byte	1
 107 004d 01       		.byte	1
 108 004e 01       		.byte	1
 109 004f 01       		.byte	1
 110 0050 01       		.byte	1
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 3


 111 0051 01       		.byte	1
 112 0052 01       		.byte	1
 113 0053 01       		.byte	1
 114 0054 01       		.byte	1
 115 0055 01       		.byte	1
 116 0056 01       		.byte	1
 117 0057 01       		.byte	1
 118 0058 01       		.byte	1
 119 0059 01       		.byte	1
 120 005a 01       		.byte	1
 121 005b 01       		.byte	1
 122 005c 01       		.byte	1
 123 005d 01       		.byte	1
 124 005e 01       		.byte	1
 125 005f 01       		.byte	1
 126 0060 01       		.byte	1
 127 0061 01       		.byte	1
 128 0062 01       		.byte	1
 129 0063 01       		.byte	1
 130 0064 01       		.byte	1
 131 0065 01       		.byte	1
 132 0066 01       		.byte	1
 133 0067 01       		.byte	1
 134 0068 01       		.byte	1
 135 0069 01       		.byte	1
 136 006a 01       		.byte	1
 137 006b 01       		.byte	1
 138 006c 01       		.byte	1
 139 006d 01       		.byte	1
 140 006e 01       		.byte	1
 141 006f 01       		.byte	1
 142 0070 01       		.byte	1
 143 0071 01       		.byte	1
 144 0072 01       		.byte	1
 145 0073 01       		.byte	1
 146 0074 01       		.byte	1
 147 0075 01       		.byte	1
 148 0076 01       		.byte	1
 149 0077 01       		.byte	1
 150 0078 01       		.byte	1
 151 0079 01       		.byte	1
 152 007a 01       		.byte	1
 153 007b 01       		.byte	1
 154 007c 01       		.byte	1
 155 007d 01       		.byte	1
 156 007e 01       		.byte	1
 157 007f 01       		.byte	1
 158 0080 00       		.byte	0
 159 0081 00       		.byte	0
 160 0082 00       		.byte	0
 161 0083 00       		.byte	0
 162 0084 00       		.byte	0
 163 0085 00       		.byte	0
 164 0086 00       		.byte	0
 165 0087 00       		.byte	0
 166 0088 00       		.byte	0
 167 0089 00       		.byte	0
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 4


 168 008a 00       		.byte	0
 169 008b 00       		.byte	0
 170 008c 00       		.byte	0
 171 008d 00       		.byte	0
 172 008e 00       		.byte	0
 173 008f 00       		.byte	0
 174 0090 00       		.byte	0
 175 0091 00       		.byte	0
 176 0092 00       		.byte	0
 177 0093 00       		.byte	0
 178 0094 00       		.byte	0
 179 0095 00       		.byte	0
 180 0096 00       		.byte	0
 181 0097 00       		.byte	0
 182 0098 00       		.byte	0
 183 0099 00       		.byte	0
 184 009a 00       		.byte	0
 185 009b 00       		.byte	0
 186 009c 00       		.byte	0
 187 009d 00       		.byte	0
 188 009e 00       		.byte	0
 189 009f 00       		.byte	0
 190 00a0 00       		.byte	0
 191 00a1 00       		.byte	0
 192 00a2 00       		.byte	0
 193 00a3 00       		.byte	0
 194 00a4 00       		.byte	0
 195 00a5 00       		.byte	0
 196 00a6 00       		.byte	0
 197 00a7 00       		.byte	0
 198 00a8 00       		.byte	0
 199 00a9 00       		.byte	0
 200 00aa 00       		.byte	0
 201 00ab 00       		.byte	0
 202 00ac 00       		.byte	0
 203 00ad 00       		.byte	0
 204 00ae 00       		.byte	0
 205 00af 00       		.byte	0
 206 00b0 00       		.byte	0
 207 00b1 00       		.byte	0
 208 00b2 00       		.byte	0
 209 00b3 00       		.byte	0
 210 00b4 00       		.byte	0
 211 00b5 00       		.byte	0
 212 00b6 00       		.byte	0
 213 00b7 00       		.byte	0
 214 00b8 00       		.byte	0
 215 00b9 00       		.byte	0
 216 00ba 00       		.byte	0
 217 00bb 00       		.byte	0
 218 00bc 00       		.byte	0
 219 00bd 00       		.byte	0
 220 00be 00       		.byte	0
 221 00bf 00       		.byte	0
 222 00c0 00       		.byte	0
 223 00c1 00       		.byte	0
 224 00c2 00       		.byte	0
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 5


 225 00c3 00       		.byte	0
 226 00c4 00       		.byte	0
 227 00c5 00       		.byte	0
 228 00c6 00       		.byte	0
 229 00c7 00       		.byte	0
 230 00c8 00       		.byte	0
 231 00c9 00       		.byte	0
 232 00ca 00       		.byte	0
 233 00cb 00       		.byte	0
 234 00cc 00       		.byte	0
 235 00cd 00       		.byte	0
 236 00ce 00       		.byte	0
 237 00cf 00       		.byte	0
 238 00d0 00       		.byte	0
 239 00d1 00       		.byte	0
 240 00d2 00       		.byte	0
 241 00d3 00       		.byte	0
 242 00d4 00       		.byte	0
 243 00d5 00       		.byte	0
 244 00d6 00       		.byte	0
 245 00d7 00       		.byte	0
 246 00d8 00       		.byte	0
 247 00d9 00       		.byte	0
 248 00da 00       		.byte	0
 249 00db 00       		.byte	0
 250 00dc 00       		.byte	0
 251 00dd 00       		.byte	0
 252 00de 00       		.byte	0
 253 00df 00       		.byte	0
 254 00e0 00       		.byte	0
 255 00e1 00       		.byte	0
 256 00e2 00       		.byte	0
 257 00e3 00       		.byte	0
 258 00e4 00       		.byte	0
 259 00e5 00       		.byte	0
 260 00e6 00       		.byte	0
 261 00e7 00       		.byte	0
 262 00e8 00       		.byte	0
 263 00e9 00       		.byte	0
 264 00ea 00       		.byte	0
 265 00eb 00       		.byte	0
 266 00ec 00       		.byte	0
 267 00ed 00       		.byte	0
 268 00ee 00       		.byte	0
 269 00ef 00       		.byte	0
 270 00f0 00       		.byte	0
 271 00f1 00       		.byte	0
 272 00f2 00       		.byte	0
 273 00f3 00       		.byte	0
 274 00f4 00       		.byte	0
 275 00f5 00       		.byte	0
 276 00f6 00       		.byte	0
 277 00f7 00       		.byte	0
 278 00f8 00       		.byte	0
 279 00f9 00       		.byte	0
 280 00fa 00       		.byte	0
 281 00fb 00       		.byte	0
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 6


 282 00fc 00       		.byte	0
 283 00fd 00       		.byte	0
 284 00fe 00       		.byte	0
 285 00ff 00       		.byte	0
 286              		.section	.text.CPU_Init,"ax",%progbits
 287              		.align	2
 288              		.global	CPU_Init
 289              		.thumb
 290              		.thumb_func
 291              		.type	CPU_Init, %function
 292              	CPU_Init:
 293              	.LFB0:
 294              		.file 1 "C:\\Micrium\\Software\\uC-CPU\\cpu_core.c"
   1:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
   2:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
   3:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                                uC/CPU
   4:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                    CPU CONFIGURATION & PORT LAYER
   5:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
   6:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                          (c) Copyright 2004-2011; Micrium, Inc.; Weston, FL
   7:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
   8:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               All rights reserved.  Protected by international copyright laws.
   9:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
  10:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               uC/CPU is provided in source form to registered licensees ONLY.  It is
  11:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               illegal to distribute this source code to any third party unless you receive
  12:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               written permission by an authorized Micrium representative.  Knowledge of
  13:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               the source code may NOT be used to develop a similar product.
  14:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
  15:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               Please help us continue to provide the Embedded community with the finest
  16:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               software available.  Your honesty is greatly appreciated.
  17:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
  18:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               You can contact us at www.micrium.com.
  19:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
  20:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
  21:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
  22:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
  23:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
  24:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
  25:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                           CORE CPU MODULE
  26:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
  27:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Filename      : cpu_core.c
  28:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Version       : V1.29.01
  29:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Programmer(s) : SR
  30:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                 ITJ
  31:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
  32:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
  33:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
  34:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
  35:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
  36:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
  37:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                            INCLUDE FILES
  38:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
  39:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
  40:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
  41:C:\Micrium\Software\uC-CPU\cpu_core.c **** #define    MICRIUM_SOURCE
  42:C:\Micrium\Software\uC-CPU\cpu_core.c **** #define    CPU_CORE_MODULE
  43:C:\Micrium\Software\uC-CPU\cpu_core.c **** #include  <cpu_core.h>
  44:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 7


  45:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
  46:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*$PAGE*/
  47:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
  48:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
  49:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                            LOCAL DEFINES
  50:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
  51:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
  52:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
  53:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
  54:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
  55:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
  56:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                           LOCAL CONSTANTS
  57:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
  58:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
  59:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
  60:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
  61:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
  62:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
  63:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                          LOCAL DATA TYPES
  64:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
  65:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
  66:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
  67:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
  68:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
  69:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
  70:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                            LOCAL TABLES
  71:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
  72:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
  73:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
  74:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
  75:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
  76:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                  CPU COUNT LEAD ZEROs LOOKUP TABLE
  77:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
  78:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Note(s) : (1) Index into bit pattern table determines the number of leading zeros in an 8-bit val
  79:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
  80:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                         b07  b06  b05  b04  b03  b02  b01  b00    # Leading Zeros
  81:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                         ---  ---  ---  ---  ---  ---  ---  ---    ---------------
  82:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                          1    x    x    x    x    x    x    x            0
  83:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                          0    1    x    x    x    x    x    x            1
  84:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                          0    0    1    x    x    x    x    x            2
  85:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                          0    0    0    1    x    x    x    x            3
  86:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                          0    0    0    0    1    x    x    x            4
  87:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                          0    0    0    0    0    1    x    x            5
  88:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                          0    0    0    0    0    0    1    x            6
  89:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                          0    0    0    0    0    0    0    1            7
  90:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                          0    0    0    0    0    0    0    0            8
  91:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
  92:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
  93:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
  94:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if (!(defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) || \
  95:C:\Micrium\Software\uC-CPU\cpu_core.c ****       (CPU_CFG_DATA_SIZE_MAX > CPU_CFG_DATA_SIZE))
  96:C:\Micrium\Software\uC-CPU\cpu_core.c **** static  const  CPU_INT08U  CPU_CntLeadZerosTbl[256] = {                             /* Data vals : 
  97:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*   0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F   */
  98:C:\Micrium\Software\uC-CPU\cpu_core.c ****     8u,  7u,  6u,  6u,  5u,  5u,  5u,  5u,  4u,  4u,  4u,  4u,  4u,  4u,  4u,  4u,  /*   0x00 to 0x
  99:C:\Micrium\Software\uC-CPU\cpu_core.c ****     3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  3u,  /*   0x10 to 0x
 100:C:\Micrium\Software\uC-CPU\cpu_core.c ****     2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  /*   0x20 to 0x
 101:C:\Micrium\Software\uC-CPU\cpu_core.c ****     2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  2u,  /*   0x30 to 0x
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 8


 102:C:\Micrium\Software\uC-CPU\cpu_core.c ****     1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  /*   0x40 to 0x
 103:C:\Micrium\Software\uC-CPU\cpu_core.c ****     1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  /*   0x50 to 0x
 104:C:\Micrium\Software\uC-CPU\cpu_core.c ****     1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  /*   0x60 to 0x
 105:C:\Micrium\Software\uC-CPU\cpu_core.c ****     1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  1u,  /*   0x70 to 0x
 106:C:\Micrium\Software\uC-CPU\cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  /*   0x80 to 0x
 107:C:\Micrium\Software\uC-CPU\cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  /*   0x90 to 0x
 108:C:\Micrium\Software\uC-CPU\cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  /*   0xA0 to 0x
 109:C:\Micrium\Software\uC-CPU\cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  /*   0xB0 to 0x
 110:C:\Micrium\Software\uC-CPU\cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  /*   0xC0 to 0x
 111:C:\Micrium\Software\uC-CPU\cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  /*   0xD0 to 0x
 112:C:\Micrium\Software\uC-CPU\cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  /*   0xE0 to 0x
 113:C:\Micrium\Software\uC-CPU\cpu_core.c ****     0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u,  0u   /*   0xF0 to 0x
 114:C:\Micrium\Software\uC-CPU\cpu_core.c **** };
 115:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
 116:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 117:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 118:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*$PAGE*/
 119:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
 120:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
 121:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                       LOCAL GLOBAL VARIABLES
 122:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
 123:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
 124:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 125:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 126:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
 127:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
 128:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                      LOCAL FUNCTION PROTOTYPES
 129:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
 130:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
 131:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 132:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if    (CPU_CFG_NAME_EN   == DEF_ENABLED)                           /* ---------------- CPU NAME FN
 133:C:\Micrium\Software\uC-CPU\cpu_core.c **** static  void        CPU_NameInit         (void);
 134:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
 135:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 136:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 137:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                     /* ----------------- CPU TS FNC
 138:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if   ((CPU_CFG_TS_EN     == DEF_ENABLED) || \
 139:C:\Micrium\Software\uC-CPU\cpu_core.c ****        (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
 140:C:\Micrium\Software\uC-CPU\cpu_core.c **** static  void        CPU_TS_Init          (void);
 141:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
 142:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 143:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 144:C:\Micrium\Software\uC-CPU\cpu_core.c **** #ifdef  CPU_CFG_INT_DIS_MEAS_EN                                     /* ---------- CPU INT DIS TIME 
 145:C:\Micrium\Software\uC-CPU\cpu_core.c **** static  void        CPU_IntDisMeasInit   (void);
 146:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 147:C:\Micrium\Software\uC-CPU\cpu_core.c **** static  CPU_TS_TMR  CPU_IntDisMeasMaxCalc(CPU_TS_TMR  time_tot_cnts);
 148:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
 149:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 150:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 151:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
 152:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
 153:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                     LOCAL CONFIGURATION ERRORS
 154:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
 155:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
 156:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 157:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 158:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*$PAGE*/
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 9


 159:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
 160:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
 161:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                             CPU_Init()
 162:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 163:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Description : (1) Initialize CPU module :
 164:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 165:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   (a) Initialize CPU timestamps
 166:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   (b) Initialize CPU interrupts disabled time measurements
 167:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   (c) Initialize CPU host name
 168:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 169:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 170:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Argument(s) : none.
 171:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 172:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Return(s)   : none.
 173:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 174:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Caller(s)   : Your Product's Application.
 175:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 176:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               This function is a CPU initialization function & MAY be called by application/
 177:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               initialization function(s).
 178:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 179:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Note(s)     : (2) CPU_Init() MUST be called ... :
 180:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 181:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   (a) ONLY ONCE from a product's application; ...
 182:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   (b) BEFORE product's application calls any core CPU module function(s)
 183:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 184:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               (3) The following initialization functions MUST be sequenced as follows :
 185:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 186:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   (a) CPU_TS_Init()           SHOULD precede ALL calls to other CPU timestamp fun
 187:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 188:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   (b) CPU_IntDisMeasInit()    SHOULD precede ALL calls to CPU_CRITICAL_ENTER()/CP
 189:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                                   & other CPU interrupts disabled time measuremen
 190:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
 191:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
 192:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 193:C:\Micrium\Software\uC-CPU\cpu_core.c **** void  CPU_Init (void)
 194:C:\Micrium\Software\uC-CPU\cpu_core.c **** {
 295              		.loc 1 194 0
 296              		.cfi_startproc
 297              		@ args = 0, pretend = 0, frame = 0
 298              		@ frame_needed = 1, uses_anonymous_args = 0
 299 0000 80B5     		push	{r7, lr}
 300              	.LCFI0:
 301              		.cfi_def_cfa_offset 8
 302 0002 00AF     		add	r7, sp, #0
 303              		.cfi_offset 14, -4
 304              		.cfi_offset 7, -8
 305              	.LCFI1:
 306              		.cfi_def_cfa_register 7
 195:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                 /* --------------------- INIT TS --
 196:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if ((CPU_CFG_TS_EN     == DEF_ENABLED) || \
 197:C:\Micrium\Software\uC-CPU\cpu_core.c ****      (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
 198:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_TS_Init();                                              /* See Note #3a.                   
 307              		.loc 1 198 0
 308 0004 FFF7FEFF 		bl	CPU_TS_Init
 199:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
 200:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                 /* -------------- INIT INT DIS TIME
 201:C:\Micrium\Software\uC-CPU\cpu_core.c **** #ifdef  CPU_CFG_INT_DIS_MEAS_EN
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 10


 202:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_IntDisMeasInit();                                       /* See Note #3b.                   
 203:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
 204:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 205:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                 /* ------------------ INIT CPU NAME
 206:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if (CPU_CFG_NAME_EN == DEF_ENABLED)
 207:C:\Micrium\Software\uC-CPU\cpu_core.c ****      CPU_NameInit();
 309              		.loc 1 207 0
 310 0008 FFF7FEFF 		bl	CPU_NameInit
 208:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
 209:C:\Micrium\Software\uC-CPU\cpu_core.c **** }
 311              		.loc 1 209 0
 312 000c 80BD     		pop	{r7, pc}
 313              		.cfi_endproc
 314              	.LFE0:
 315              		.size	CPU_Init, .-CPU_Init
 316 000e 00BF     		.section	.text.CPU_SW_Exception,"ax",%progbits
 317              		.align	2
 318              		.global	CPU_SW_Exception
 319              		.thumb
 320              		.thumb_func
 321              		.type	CPU_SW_Exception, %function
 322              	CPU_SW_Exception:
 323              	.LFB1:
 210:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 211:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 212:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*$PAGE*/
 213:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
 214:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
 215:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                         CPU_SW_Exception()
 216:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 217:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Description : Trap unrecoverable software exception.
 218:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 219:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Argument(s) : none.
 220:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 221:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Return(s)   : none.
 222:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 223:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Caller(s)   : various.
 224:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 225:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Note(s)     : (1) CPU_SW_Exception() deadlocks the current code execution -- whether multi-tasked
 226:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   -processed/-threaded or single-threaded -- when the current code execution cann
 227:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   gracefully recover or report a fault or exception condition.
 228:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 229:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   See also 'cpu_core.h  CPU_SW_EXCEPTION()  Note #1'.
 230:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
 231:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
 232:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 233:C:\Micrium\Software\uC-CPU\cpu_core.c **** void  CPU_SW_Exception (void)
 234:C:\Micrium\Software\uC-CPU\cpu_core.c **** {
 324              		.loc 1 234 0
 325              		.cfi_startproc
 326              		@ args = 0, pretend = 0, frame = 0
 327              		@ frame_needed = 1, uses_anonymous_args = 0
 328              		@ link register save eliminated.
 329 0000 80B4     		push	{r7}
 330              	.LCFI2:
 331              		.cfi_def_cfa_offset 4
 332 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 11


 333              		.cfi_offset 7, -4
 334              	.LCFI3:
 335              		.cfi_def_cfa_register 7
 336              	.L4:
 235:C:\Micrium\Software\uC-CPU\cpu_core.c ****     while (DEF_ON) {
 236:C:\Micrium\Software\uC-CPU\cpu_core.c ****         ;
 237:C:\Micrium\Software\uC-CPU\cpu_core.c ****     }
 337              		.loc 1 237 0
 338 0004 FEE7     		b	.L4
 339              		.cfi_endproc
 340              	.LFE1:
 341              		.size	CPU_SW_Exception, .-CPU_SW_Exception
 342 0006 00BF     		.section	.text.CPU_NameClr,"ax",%progbits
 343              		.align	2
 344              		.global	CPU_NameClr
 345              		.thumb
 346              		.thumb_func
 347              		.type	CPU_NameClr, %function
 348              	CPU_NameClr:
 349              	.LFB2:
 238:C:\Micrium\Software\uC-CPU\cpu_core.c **** }
 239:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 240:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 241:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*$PAGE*/
 242:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
 243:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
 244:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                            CPU_NameClr()
 245:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 246:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Description : Clear CPU Name.
 247:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 248:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Argument(s) : none.
 249:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 250:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Return(s)   : none.
 251:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 252:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Caller(s)   : CPU_NameInit(),
 253:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               Application.
 254:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 255:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
 256:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               called by application function(s).
 257:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 258:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Note(s)     : none.
 259:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
 260:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
 261:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 262:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if (CPU_CFG_NAME_EN == DEF_ENABLED)
 263:C:\Micrium\Software\uC-CPU\cpu_core.c **** void  CPU_NameClr (void)
 264:C:\Micrium\Software\uC-CPU\cpu_core.c **** {
 350              		.loc 1 264 0
 351              		.cfi_startproc
 352              		@ args = 0, pretend = 0, frame = 8
 353              		@ frame_needed = 1, uses_anonymous_args = 0
 354 0000 80B5     		push	{r7, lr}
 355              	.LCFI4:
 356              		.cfi_def_cfa_offset 8
 357 0002 82B0     		sub	sp, sp, #8
 358              	.LCFI5:
 359              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 12


 360 0004 00AF     		add	r7, sp, #0
 361              		.cfi_offset 14, -4
 362              		.cfi_offset 7, -8
 363              	.LCFI6:
 364              		.cfi_def_cfa_register 7
 265:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_SR_ALLOC();
 365              		.loc 1 265 0
 366 0006 4FF00003 		mov	r3, #0
 367 000a 7B60     		str	r3, [r7, #4]
 266:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 267:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 268:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_CRITICAL_ENTER();
 368              		.loc 1 268 0
 369 000c FFF7FEFF 		bl	CPU_SR_Save
 370 0010 0346     		mov	r3, r0
 371 0012 7B60     		str	r3, [r7, #4]
 269:C:\Micrium\Software\uC-CPU\cpu_core.c ****     Mem_Clr((void     *)&CPU_Name[0],
 372              		.loc 1 269 0
 373 0014 40F20000 		movw	r0, #:lower16:CPU_Name
 374 0018 C0F20000 		movt	r0, #:upper16:CPU_Name
 375 001c 4FF01001 		mov	r1, #16
 376 0020 FFF7FEFF 		bl	Mem_Clr
 270:C:\Micrium\Software\uC-CPU\cpu_core.c ****             (CPU_SIZE_T) CPU_CFG_NAME_SIZE);
 271:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_CRITICAL_EXIT();
 377              		.loc 1 271 0
 378 0024 7868     		ldr	r0, [r7, #4]
 379 0026 FFF7FEFF 		bl	CPU_SR_Restore
 272:C:\Micrium\Software\uC-CPU\cpu_core.c **** }
 380              		.loc 1 272 0
 381 002a 07F10807 		add	r7, r7, #8
 382 002e BD46     		mov	sp, r7
 383 0030 80BD     		pop	{r7, pc}
 384              		.cfi_endproc
 385              	.LFE2:
 386              		.size	CPU_NameClr, .-CPU_NameClr
 387 0032 00BF     		.section	.text.CPU_NameGet,"ax",%progbits
 388              		.align	2
 389              		.global	CPU_NameGet
 390              		.thumb
 391              		.thumb_func
 392              		.type	CPU_NameGet, %function
 393              	CPU_NameGet:
 394              	.LFB3:
 273:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
 274:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 275:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 276:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*$PAGE*/
 277:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
 278:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
 279:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                            CPU_NameGet()
 280:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 281:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Description : Get CPU host name.
 282:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 283:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Argument(s) : p_name      Pointer to an ASCII character array that will receive the return CPU ho
 284:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               name ASCII string from this function (see Note #1).
 285:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 286:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               p_err       Pointer to variable that will receive the return error code from this f
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 13


 287:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 288:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               CPU_ERR_NONE                    CPU host name successfully returned
 289:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               CPU_ERR_NULL_PTR                Argument 'p_name' passed a NULL poi
 290:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 291:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Return(s)   : none.
 292:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 293:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Caller(s)   : Application.
 294:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 295:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
 296:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               be called by application function(s).
 297:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 298:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Note(s)     : (1) The size of the ASCII character array that will receive the return CPU host nam
 299:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   ASCII string :
 300:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 301:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   (a) MUST   be greater than or equal to the current CPU host name's ASCII string
 302:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           size including the terminating NULL character;
 303:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   (b) SHOULD be greater than or equal to CPU_CFG_NAME_SIZE
 304:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
 305:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
 306:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 307:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if (CPU_CFG_NAME_EN == DEF_ENABLED)
 308:C:\Micrium\Software\uC-CPU\cpu_core.c **** void  CPU_NameGet (CPU_CHAR  *p_name,
 309:C:\Micrium\Software\uC-CPU\cpu_core.c ****                    CPU_ERR   *p_err)
 310:C:\Micrium\Software\uC-CPU\cpu_core.c **** {
 395              		.loc 1 310 0
 396              		.cfi_startproc
 397              		@ args = 0, pretend = 0, frame = 16
 398              		@ frame_needed = 1, uses_anonymous_args = 0
 399 0000 80B5     		push	{r7, lr}
 400              	.LCFI7:
 401              		.cfi_def_cfa_offset 8
 402 0002 84B0     		sub	sp, sp, #16
 403              	.LCFI8:
 404              		.cfi_def_cfa_offset 24
 405 0004 00AF     		add	r7, sp, #0
 406              		.cfi_offset 14, -4
 407              		.cfi_offset 7, -8
 408              	.LCFI9:
 409              		.cfi_def_cfa_register 7
 410 0006 7860     		str	r0, [r7, #4]
 411 0008 3960     		str	r1, [r7, #0]
 311:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_SR_ALLOC();
 412              		.loc 1 311 0
 413 000a 4FF00003 		mov	r3, #0
 414 000e FB60     		str	r3, [r7, #12]
 312:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 313:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 314:C:\Micrium\Software\uC-CPU\cpu_core.c ****     if (p_err == (CPU_ERR *)0) {
 415              		.loc 1 314 0
 416 0010 3B68     		ldr	r3, [r7, #0]
 417 0012 002B     		cmp	r3, #0
 418 0014 01D1     		bne	.L9
 315:C:\Micrium\Software\uC-CPU\cpu_core.c ****         CPU_SW_EXCEPTION(;);
 419              		.loc 1 315 0
 420 0016 FFF7FEFF 		bl	CPU_SW_Exception
 421              	.L9:
 316:C:\Micrium\Software\uC-CPU\cpu_core.c ****     }
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 14


 317:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 318:C:\Micrium\Software\uC-CPU\cpu_core.c ****     if (p_name == (CPU_CHAR *)0) {
 422              		.loc 1 318 0
 423 001a 7B68     		ldr	r3, [r7, #4]
 424 001c 002B     		cmp	r3, #0
 425 001e 04D1     		bne	.L10
 319:C:\Micrium\Software\uC-CPU\cpu_core.c ****        *p_err = CPU_ERR_NULL_PTR;
 426              		.loc 1 319 0
 427 0020 3B68     		ldr	r3, [r7, #0]
 428 0022 4FF00A02 		mov	r2, #10
 429 0026 1A80     		strh	r2, [r3, #0]	@ movhi
 320:C:\Micrium\Software\uC-CPU\cpu_core.c ****         return;
 430              		.loc 1 320 0
 431 0028 13E0     		b	.L12
 432              	.L10:
 321:C:\Micrium\Software\uC-CPU\cpu_core.c ****     }
 322:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 323:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_CRITICAL_ENTER();
 433              		.loc 1 323 0
 434 002a FFF7FEFF 		bl	CPU_SR_Save
 435 002e 0346     		mov	r3, r0
 436 0030 FB60     		str	r3, [r7, #12]
 324:C:\Micrium\Software\uC-CPU\cpu_core.c ****    (void)Str_Copy_N(p_name,
 437              		.loc 1 324 0
 438 0032 7868     		ldr	r0, [r7, #4]
 439 0034 40F20001 		movw	r1, #:lower16:CPU_Name
 440 0038 C0F20001 		movt	r1, #:upper16:CPU_Name
 441 003c 4FF01002 		mov	r2, #16
 442 0040 FFF7FEFF 		bl	Str_Copy_N
 325:C:\Micrium\Software\uC-CPU\cpu_core.c ****                    &CPU_Name[0],
 326:C:\Micrium\Software\uC-CPU\cpu_core.c ****                     CPU_CFG_NAME_SIZE);
 327:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_CRITICAL_EXIT();
 443              		.loc 1 327 0
 444 0044 F868     		ldr	r0, [r7, #12]
 445 0046 FFF7FEFF 		bl	CPU_SR_Restore
 328:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 329:C:\Micrium\Software\uC-CPU\cpu_core.c ****    *p_err = CPU_ERR_NONE;
 446              		.loc 1 329 0
 447 004a 3B68     		ldr	r3, [r7, #0]
 448 004c 4FF00002 		mov	r2, #0
 449 0050 1A80     		strh	r2, [r3, #0]	@ movhi
 450              	.L12:
 330:C:\Micrium\Software\uC-CPU\cpu_core.c **** }
 451              		.loc 1 330 0
 452 0052 07F11007 		add	r7, r7, #16
 453 0056 BD46     		mov	sp, r7
 454 0058 80BD     		pop	{r7, pc}
 455              		.cfi_endproc
 456              	.LFE3:
 457              		.size	CPU_NameGet, .-CPU_NameGet
 458 005a 00BF     		.section	.text.CPU_NameSet,"ax",%progbits
 459              		.align	2
 460              		.global	CPU_NameSet
 461              		.thumb
 462              		.thumb_func
 463              		.type	CPU_NameSet, %function
 464              	CPU_NameSet:
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 15


 465              	.LFB4:
 331:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
 332:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 333:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 334:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*$PAGE*/
 335:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
 336:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
 337:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                            CPU_NameSet()
 338:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 339:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Description : Set CPU host name.
 340:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 341:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Argument(s) : p_name      Pointer to CPU host name to set.
 342:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 343:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               p_err       Pointer to variable that will receive the return error code from this f
 344:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 345:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               CPU_ERR_NONE                    CPU host name successfully set.
 346:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               CPU_ERR_NULL_PTR                Argument 'p_name' passed a NULL poi
 347:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               CPU_ERR_NAME_SIZE               Invalid CPU host name size (see Not
 348:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 349:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Return(s)   : none.
 350:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 351:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Caller(s)   : Application.
 352:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 353:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
 354:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               called by application function(s).
 355:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 356:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Note(s)     : (1) 'p_name' ASCII string size, including the terminating NULL character, MUST be l
 357:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                    than or equal to CPU_CFG_NAME_SIZE.
 358:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
 359:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
 360:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 361:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if (CPU_CFG_NAME_EN == DEF_ENABLED)
 362:C:\Micrium\Software\uC-CPU\cpu_core.c **** void  CPU_NameSet (const  CPU_CHAR  *p_name,
 363:C:\Micrium\Software\uC-CPU\cpu_core.c ****                           CPU_ERR   *p_err)
 364:C:\Micrium\Software\uC-CPU\cpu_core.c **** {
 466              		.loc 1 364 0
 467              		.cfi_startproc
 468              		@ args = 0, pretend = 0, frame = 16
 469              		@ frame_needed = 1, uses_anonymous_args = 0
 470 0000 80B5     		push	{r7, lr}
 471              	.LCFI10:
 472              		.cfi_def_cfa_offset 8
 473 0002 84B0     		sub	sp, sp, #16
 474              	.LCFI11:
 475              		.cfi_def_cfa_offset 24
 476 0004 00AF     		add	r7, sp, #0
 477              		.cfi_offset 14, -4
 478              		.cfi_offset 7, -8
 479              	.LCFI12:
 480              		.cfi_def_cfa_register 7
 481 0006 7860     		str	r0, [r7, #4]
 482 0008 3960     		str	r1, [r7, #0]
 365:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_SIZE_T  len;
 366:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_SR_ALLOC();
 483              		.loc 1 366 0
 484 000a 4FF00003 		mov	r3, #0
 485 000e FB60     		str	r3, [r7, #12]
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 16


 367:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 368:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 369:C:\Micrium\Software\uC-CPU\cpu_core.c ****     if (p_err == (CPU_ERR *)0) {
 486              		.loc 1 369 0
 487 0010 3B68     		ldr	r3, [r7, #0]
 488 0012 002B     		cmp	r3, #0
 489 0014 01D1     		bne	.L14
 370:C:\Micrium\Software\uC-CPU\cpu_core.c ****         CPU_SW_EXCEPTION(;);
 490              		.loc 1 370 0
 491 0016 FFF7FEFF 		bl	CPU_SW_Exception
 492              	.L14:
 371:C:\Micrium\Software\uC-CPU\cpu_core.c ****     }
 372:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 373:C:\Micrium\Software\uC-CPU\cpu_core.c ****     if (p_name == (const CPU_CHAR *)0) {
 493              		.loc 1 373 0
 494 001a 7B68     		ldr	r3, [r7, #4]
 495 001c 002B     		cmp	r3, #0
 496 001e 04D1     		bne	.L15
 374:C:\Micrium\Software\uC-CPU\cpu_core.c ****        *p_err = CPU_ERR_NULL_PTR;
 497              		.loc 1 374 0
 498 0020 3B68     		ldr	r3, [r7, #0]
 499 0022 4FF00A02 		mov	r2, #10
 500 0026 1A80     		strh	r2, [r3, #0]	@ movhi
 375:C:\Micrium\Software\uC-CPU\cpu_core.c ****         return;
 501              		.loc 1 375 0
 502 0028 22E0     		b	.L18
 503              	.L15:
 376:C:\Micrium\Software\uC-CPU\cpu_core.c ****     }
 377:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 378:C:\Micrium\Software\uC-CPU\cpu_core.c ****     len = Str_Len_N(p_name,
 504              		.loc 1 378 0
 505 002a 7868     		ldr	r0, [r7, #4]
 506 002c 4FF01001 		mov	r1, #16
 507 0030 FFF7FEFF 		bl	Str_Len_N
 508 0034 0346     		mov	r3, r0
 509 0036 BB60     		str	r3, [r7, #8]
 379:C:\Micrium\Software\uC-CPU\cpu_core.c ****                     CPU_CFG_NAME_SIZE);
 380:C:\Micrium\Software\uC-CPU\cpu_core.c ****     if (len < CPU_CFG_NAME_SIZE) {                              /* If       cfg name len < max name
 510              		.loc 1 380 0
 511 0038 BB68     		ldr	r3, [r7, #8]
 512 003a 0F2B     		cmp	r3, #15
 513 003c 14D8     		bhi	.L17
 381:C:\Micrium\Software\uC-CPU\cpu_core.c ****         CPU_CRITICAL_ENTER();
 514              		.loc 1 381 0
 515 003e FFF7FEFF 		bl	CPU_SR_Save
 516 0042 0346     		mov	r3, r0
 517 0044 FB60     		str	r3, [r7, #12]
 382:C:\Micrium\Software\uC-CPU\cpu_core.c ****        (void)Str_Copy_N(&CPU_Name[0],                           /* ... copy cfg name to CPU host na
 518              		.loc 1 382 0
 519 0046 40F20000 		movw	r0, #:lower16:CPU_Name
 520 004a C0F20000 		movt	r0, #:upper16:CPU_Name
 521 004e 7968     		ldr	r1, [r7, #4]
 522 0050 4FF01002 		mov	r2, #16
 523 0054 FFF7FEFF 		bl	Str_Copy_N
 383:C:\Micrium\Software\uC-CPU\cpu_core.c ****                          p_name,
 384:C:\Micrium\Software\uC-CPU\cpu_core.c ****                          CPU_CFG_NAME_SIZE);
 385:C:\Micrium\Software\uC-CPU\cpu_core.c ****         CPU_CRITICAL_EXIT();
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 17


 524              		.loc 1 385 0
 525 0058 F868     		ldr	r0, [r7, #12]
 526 005a FFF7FEFF 		bl	CPU_SR_Restore
 386:C:\Micrium\Software\uC-CPU\cpu_core.c ****        *p_err = CPU_ERR_NONE;
 527              		.loc 1 386 0
 528 005e 3B68     		ldr	r3, [r7, #0]
 529 0060 4FF00002 		mov	r2, #0
 530 0064 1A80     		strh	r2, [r3, #0]	@ movhi
 531 0066 03E0     		b	.L18
 532              	.L17:
 387:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 388:C:\Micrium\Software\uC-CPU\cpu_core.c ****     } else {
 389:C:\Micrium\Software\uC-CPU\cpu_core.c ****        *p_err = CPU_ERR_NAME_SIZE;
 533              		.loc 1 389 0
 534 0068 3B68     		ldr	r3, [r7, #0]
 535 006a 4FF47A72 		mov	r2, #1000
 536 006e 1A80     		strh	r2, [r3, #0]	@ movhi
 537              	.L18:
 390:C:\Micrium\Software\uC-CPU\cpu_core.c ****     }
 391:C:\Micrium\Software\uC-CPU\cpu_core.c **** }
 538              		.loc 1 391 0
 539 0070 07F11007 		add	r7, r7, #16
 540 0074 BD46     		mov	sp, r7
 541 0076 80BD     		pop	{r7, pc}
 542              		.cfi_endproc
 543              	.LFE4:
 544              		.size	CPU_NameSet, .-CPU_NameSet
 545              		.section	.text.CPU_TS_Get32,"ax",%progbits
 546              		.align	2
 547              		.global	CPU_TS_Get32
 548              		.thumb
 549              		.thumb_func
 550              		.type	CPU_TS_Get32, %function
 551              	CPU_TS_Get32:
 552              	.LFB5:
 392:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
 393:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 394:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 395:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*$PAGE*/
 396:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
 397:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
 398:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                           CPU_TS_Get32()
 399:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 400:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Description : Get current 32-bit CPU timestamp.
 401:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 402:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Argument(s) : none.
 403:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 404:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Return(s)   : Current 32-bit CPU timestamp (in timestamp timer counts).
 405:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 406:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Caller(s)   : Application.
 407:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 408:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
 409:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               be called by application function(s).
 410:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 411:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Note(s)     : (1) When applicable, the amount of time measured by CPU timestamps is calculated by
 412:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   either of the following equations :
 413:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 18


 414:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       (a) Time measured  =  Number timer counts  *  Timer period
 415:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 416:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               where
 417:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 418:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   Number timer counts     Number of timer counts measured
 419:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   Timer period            Timer's period in some units of
 420:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                                               (fractional) seconds
 421:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   Time measured           Amount of time measured, in same
 422:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                                               units of (fractional) seconds
 423:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                                               as the Timer period
 424:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 425:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                              Number timer counts
 426:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       (b) Time measured  =  ---------------------
 427:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                                Timer frequency
 428:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 429:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               where
 430:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 431:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   Number timer counts     Number of timer counts measured
 432:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   Timer frequency         Timer's frequency in some units
 433:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                                               of counts per second
 434:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   Time measured           Amount of time measured, in seconds
 435:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 436:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()  Note #2c1'.
 437:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 438:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               (2) In case the CPU timestamp timer has lower precision than the 32-bit CPU timesta
 439:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   its precision is extended via periodic updates by accumulating the deltas of th
 440:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   timestamp timer count values into the higher-precision 32-bit CPU timestamp.
 441:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 442:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               (3) After initialization, 'CPU_TS_32_Accum' & 'CPU_TS_32_TmrPrev' MUST ALWAYS
 443:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   be accessed AND updated exclusively with interrupts disabled -- but NOT
 444:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   with critical sections.
 445:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
 446:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
 447:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 448:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if (CPU_CFG_TS_32_EN == DEF_ENABLED)
 449:C:\Micrium\Software\uC-CPU\cpu_core.c **** CPU_TS32  CPU_TS_Get32 (void)
 450:C:\Micrium\Software\uC-CPU\cpu_core.c **** {
 553              		.loc 1 450 0
 554              		.cfi_startproc
 555              		@ args = 0, pretend = 0, frame = 8
 556              		@ frame_needed = 1, uses_anonymous_args = 0
 557 0000 80B5     		push	{r7, lr}
 558              	.LCFI13:
 559              		.cfi_def_cfa_offset 8
 560 0002 82B0     		sub	sp, sp, #8
 561              	.LCFI14:
 562              		.cfi_def_cfa_offset 16
 563 0004 00AF     		add	r7, sp, #0
 564              		.cfi_offset 14, -4
 565              		.cfi_offset 7, -8
 566              	.LCFI15:
 567              		.cfi_def_cfa_register 7
 451:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_TS32    ts;
 452:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32)
 453:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_TS_TMR  tmr_cur;
 454:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_TS_TMR  tmr_delta;
 455:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_SR_ALLOC();
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 19


 456:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
 457:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 458:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 459:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if (CPU_CFG_TS_TMR_SIZE >= CPU_WORD_SIZE_32)
 460:C:\Micrium\Software\uC-CPU\cpu_core.c ****     ts = (CPU_TS32)CPU_TS_TmrRd();                                  /* Get cur ts tmr val (in 32-bi
 568              		.loc 1 460 0
 569 0006 FFF7FEFF 		bl	CPU_TS_TmrRd
 570 000a 0346     		mov	r3, r0
 571 000c 7B60     		str	r3, [r7, #4]
 461:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 462:C:\Micrium\Software\uC-CPU\cpu_core.c **** #else
 463:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_INT_DIS();
 464:C:\Micrium\Software\uC-CPU\cpu_core.c ****     tmr_cur            = (CPU_TS_TMR) CPU_TS_TmrRd();               /* Get cur ts tmr val (in ts tm
 465:C:\Micrium\Software\uC-CPU\cpu_core.c ****     tmr_delta          = (CPU_TS_TMR)(tmr_cur - CPU_TS_32_TmrPrev); /* Calc      delta ts tmr cnts.
 466:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_TS_32_Accum   += (CPU_TS32  ) tmr_delta;                    /* Inc ts by delta ts tmr cnts 
 467:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_TS_32_TmrPrev  = (CPU_TS_TMR) tmr_cur;                      /* Save cur ts tmr cnts for nex
 468:C:\Micrium\Software\uC-CPU\cpu_core.c ****     ts                 = (CPU_TS32  ) CPU_TS_32_Accum;
 469:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_INT_EN();
 470:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
 471:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 472:C:\Micrium\Software\uC-CPU\cpu_core.c ****     return (ts);
 572              		.loc 1 472 0
 573 000e 7B68     		ldr	r3, [r7, #4]
 473:C:\Micrium\Software\uC-CPU\cpu_core.c **** }
 574              		.loc 1 473 0
 575 0010 1846     		mov	r0, r3
 576 0012 07F10807 		add	r7, r7, #8
 577 0016 BD46     		mov	sp, r7
 578 0018 80BD     		pop	{r7, pc}
 579              		.cfi_endproc
 580              	.LFE5:
 581              		.size	CPU_TS_Get32, .-CPU_TS_Get32
 582 001a 00BF     		.section	.text.CPU_TS_Update,"ax",%progbits
 583              		.align	2
 584              		.global	CPU_TS_Update
 585              		.thumb
 586              		.thumb_func
 587              		.type	CPU_TS_Update, %function
 588              	CPU_TS_Update:
 589              	.LFB6:
 474:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
 475:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 476:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 477:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*$PAGE*/
 478:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
 479:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
 480:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                           CPU_TS_Get64()
 481:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 482:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Description : Get current 64-bit CPU timestamp.
 483:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 484:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Argument(s) : none.
 485:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 486:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Return(s)   : Current 64-bit CPU timestamp (in timestamp timer counts).
 487:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 488:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Caller(s)   : Application.
 489:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 490:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 20


 491:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               be called by application function(s).
 492:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 493:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Note(s)     : (1) When applicable, the amount of time measured by CPU timestamps is calculated by
 494:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   either of the following equations :
 495:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 496:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       (a) Time measured  =  Number timer counts  *  Timer period
 497:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 498:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               where
 499:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 500:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   Number timer counts     Number of timer counts measured
 501:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   Timer period            Timer's period in some units of
 502:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                                               (fractional) seconds
 503:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   Time measured           Amount of time measured, in same
 504:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                                               units of (fractional) seconds
 505:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                                               as the Timer period
 506:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 507:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                              Number timer counts
 508:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       (b) Time measured  =  ---------------------
 509:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                                Timer frequency
 510:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 511:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               where
 512:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 513:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   Number timer counts     Number of timer counts measured
 514:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   Timer frequency         Timer's frequency in some units
 515:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                                               of counts per second
 516:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   Time measured           Amount of time measured, in seconds
 517:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 518:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()  Note #2c1'.
 519:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 520:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               (2) In case the CPU timestamp timer has lower precision than the 64-bit CPU timesta
 521:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   its precision is extended via periodic updates by accumulating the deltas of th
 522:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   timestamp timer count values into the higher-precision 64-bit CPU timestamp.
 523:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 524:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               (3) After initialization, 'CPU_TS_64_Accum' & 'CPU_TS_64_TmrPrev' MUST ALWAYS
 525:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   be accessed AND updated exclusively with interrupts disabled -- but NOT
 526:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   with critical sections.
 527:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
 528:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
 529:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 530:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if (CPU_CFG_TS_64_EN == DEF_ENABLED)
 531:C:\Micrium\Software\uC-CPU\cpu_core.c **** CPU_TS64  CPU_TS_Get64 (void)
 532:C:\Micrium\Software\uC-CPU\cpu_core.c **** {
 533:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_TS64    ts;
 534:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64)
 535:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_TS_TMR  tmr_cur;
 536:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_TS_TMR  tmr_delta;
 537:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_SR_ALLOC();
 538:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
 539:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 540:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 541:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if (CPU_CFG_TS_TMR_SIZE >= CPU_WORD_SIZE_64)
 542:C:\Micrium\Software\uC-CPU\cpu_core.c ****     ts = (CPU_TS64)CPU_TS_TmrRd();                                  /* Get cur ts tmr val (in 64-bi
 543:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 544:C:\Micrium\Software\uC-CPU\cpu_core.c **** #else
 545:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_INT_DIS();
 546:C:\Micrium\Software\uC-CPU\cpu_core.c ****     tmr_cur            = (CPU_TS_TMR) CPU_TS_TmrRd();               /* Get cur ts tmr val (in ts tm
 547:C:\Micrium\Software\uC-CPU\cpu_core.c ****     tmr_delta          = (CPU_TS_TMR)(tmr_cur - CPU_TS_64_TmrPrev); /* Calc      delta ts tmr cnts.
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 21


 548:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_TS_64_Accum   += (CPU_TS64  ) tmr_delta;                    /* Inc ts by delta ts tmr cnts 
 549:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_TS_64_TmrPrev  = (CPU_TS_TMR) tmr_cur;                      /* Save cur ts tmr cnts for nex
 550:C:\Micrium\Software\uC-CPU\cpu_core.c ****     ts                 = (CPU_TS64  ) CPU_TS_64_Accum;
 551:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_INT_EN();
 552:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
 553:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 554:C:\Micrium\Software\uC-CPU\cpu_core.c ****     return (ts);
 555:C:\Micrium\Software\uC-CPU\cpu_core.c **** }
 556:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
 557:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 558:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 559:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*$PAGE*/
 560:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
 561:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
 562:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                           CPU_TS_Update()
 563:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 564:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Description : Update current CPU timestamp(s).
 565:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 566:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Argument(s) : none.
 567:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 568:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Return(s)   : none.
 569:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 570:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Caller(s)   : Application/BSP periodic time handler (see Note #1).
 571:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 572:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               This function is a CPU timestamp BSP function & SHOULD be called only by appropriat
 573:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               application/BSP function(s).
 574:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 575:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Note(s)     : (1) (a) CPU timestamp(s) MUST be updated periodically by some application (or BSP) 
 576:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       handler in order to (adequately) maintain CPU timestamp(s)' time.
 577:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 578:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   (b) CPU timestamp(s) MUST be updated more frequently than the CPU timestamp tim
 579:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       overflows; otherwise, CPU timestamp(s) will lose time.
 580:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 581:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()  Note #2c2'.
 582:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
 583:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
 584:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 585:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if (CPU_CFG_TS_EN == DEF_ENABLED)
 586:C:\Micrium\Software\uC-CPU\cpu_core.c **** void  CPU_TS_Update (void)
 587:C:\Micrium\Software\uC-CPU\cpu_core.c **** {
 590              		.loc 1 587 0
 591              		.cfi_startproc
 592              		@ args = 0, pretend = 0, frame = 0
 593              		@ frame_needed = 1, uses_anonymous_args = 0
 594              		@ link register save eliminated.
 595 0000 80B4     		push	{r7}
 596              	.LCFI16:
 597              		.cfi_def_cfa_offset 4
 598 0002 00AF     		add	r7, sp, #0
 599              		.cfi_offset 7, -4
 600              	.LCFI17:
 601              		.cfi_def_cfa_register 7
 588:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if ((CPU_CFG_TS_32_EN    == DEF_ENABLED)  && \
 589:C:\Micrium\Software\uC-CPU\cpu_core.c ****      (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32))
 590:C:\Micrium\Software\uC-CPU\cpu_core.c ****    (void)CPU_TS_Get32();
 591:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
 592:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 22


 593:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if ((CPU_CFG_TS_64_EN    == DEF_ENABLED)  && \
 594:C:\Micrium\Software\uC-CPU\cpu_core.c ****      (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64))
 595:C:\Micrium\Software\uC-CPU\cpu_core.c ****    (void)CPU_TS_Get64();
 596:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
 597:C:\Micrium\Software\uC-CPU\cpu_core.c **** }
 602              		.loc 1 597 0
 603 0004 BD46     		mov	sp, r7
 604 0006 80BC     		pop	{r7}
 605 0008 7047     		bx	lr
 606              		.cfi_endproc
 607              	.LFE6:
 608              		.size	CPU_TS_Update, .-CPU_TS_Update
 609 000a 00BF     		.section	.text.CPU_TS_TmrFreqGet,"ax",%progbits
 610              		.align	2
 611              		.global	CPU_TS_TmrFreqGet
 612              		.thumb
 613              		.thumb_func
 614              		.type	CPU_TS_TmrFreqGet, %function
 615              	CPU_TS_TmrFreqGet:
 616              	.LFB7:
 598:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
 599:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 600:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 601:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*$PAGE*/
 602:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
 603:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
 604:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                         CPU_TS_TmrFreqGet()
 605:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 606:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Description : Get CPU timestamp's timer frequency.
 607:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 608:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Argument(s) : p_err       Pointer to variable that will receive the return error code from this f
 609:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 610:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               CPU_ERR_NONE                    CPU timestamp's timer frequency suc
 611:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                                                   returned.
 612:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               CPU_ERR_TS_FREQ_INVALID         CPU timestamp's timer frequency inv
 613:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                                                   NOT yet configured.
 614:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 615:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Return(s)   : CPU timestamp's timer frequency (in Hertz), if NO error(s).
 616:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 617:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               0,                                          otherwise.
 618:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 619:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Caller(s)   : Application.
 620:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 621:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
 622:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               called by application function(s).
 623:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 624:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Note(s)     : none.
 625:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
 626:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
 627:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 628:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
 629:C:\Micrium\Software\uC-CPU\cpu_core.c **** CPU_TS_TMR_FREQ  CPU_TS_TmrFreqGet (CPU_ERR  *p_err)
 630:C:\Micrium\Software\uC-CPU\cpu_core.c **** {
 617              		.loc 1 630 0
 618              		.cfi_startproc
 619              		@ args = 0, pretend = 0, frame = 16
 620              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 23


 621 0000 80B5     		push	{r7, lr}
 622              	.LCFI18:
 623              		.cfi_def_cfa_offset 8
 624 0002 84B0     		sub	sp, sp, #16
 625              	.LCFI19:
 626              		.cfi_def_cfa_offset 24
 627 0004 00AF     		add	r7, sp, #0
 628              		.cfi_offset 14, -4
 629              		.cfi_offset 7, -8
 630              	.LCFI20:
 631              		.cfi_def_cfa_register 7
 632 0006 7860     		str	r0, [r7, #4]
 631:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_TS_TMR_FREQ  freq_hz;
 632:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 633:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 634:C:\Micrium\Software\uC-CPU\cpu_core.c ****     if (p_err == (CPU_ERR *)0) {
 633              		.loc 1 634 0
 634 0008 7B68     		ldr	r3, [r7, #4]
 635 000a 002B     		cmp	r3, #0
 636 000c 01D1     		bne	.L24
 635:C:\Micrium\Software\uC-CPU\cpu_core.c ****         CPU_SW_EXCEPTION(;);
 637              		.loc 1 635 0
 638 000e FFF7FEFF 		bl	CPU_SW_Exception
 639              	.L24:
 636:C:\Micrium\Software\uC-CPU\cpu_core.c ****     }
 637:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 638:C:\Micrium\Software\uC-CPU\cpu_core.c ****     freq_hz =  CPU_TS_TmrFreq_Hz;
 640              		.loc 1 638 0
 641 0012 40F20003 		movw	r3, #:lower16:CPU_TS_TmrFreq_Hz
 642 0016 C0F20003 		movt	r3, #:upper16:CPU_TS_TmrFreq_Hz
 643 001a 1B68     		ldr	r3, [r3, #0]
 644 001c FB60     		str	r3, [r7, #12]
 639:C:\Micrium\Software\uC-CPU\cpu_core.c ****    *p_err   = (freq_hz != 0u) ? CPU_ERR_NONE : CPU_ERR_TS_FREQ_INVALID;
 645              		.loc 1 639 0
 646 001e FB68     		ldr	r3, [r7, #12]
 647 0020 002B     		cmp	r3, #0
 648 0022 02D0     		beq	.L25
 649 0024 4FF00003 		mov	r3, #0
 650 0028 01E0     		b	.L26
 651              	.L25:
 652 002a 4FF4FA63 		mov	r3, #2000
 653              	.L26:
 654 002e 7A68     		ldr	r2, [r7, #4]
 655 0030 1380     		strh	r3, [r2, #0]	@ movhi
 640:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 641:C:\Micrium\Software\uC-CPU\cpu_core.c ****     return (freq_hz);
 656              		.loc 1 641 0
 657 0032 FB68     		ldr	r3, [r7, #12]
 642:C:\Micrium\Software\uC-CPU\cpu_core.c **** }
 658              		.loc 1 642 0
 659 0034 1846     		mov	r0, r3
 660 0036 07F11007 		add	r7, r7, #16
 661 003a BD46     		mov	sp, r7
 662 003c 80BD     		pop	{r7, pc}
 663              		.cfi_endproc
 664              	.LFE7:
 665              		.size	CPU_TS_TmrFreqGet, .-CPU_TS_TmrFreqGet
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 24


 666 003e 00BF     		.section	.text.CPU_TS_TmrFreqSet,"ax",%progbits
 667              		.align	2
 668              		.global	CPU_TS_TmrFreqSet
 669              		.thumb
 670              		.thumb_func
 671              		.type	CPU_TS_TmrFreqSet, %function
 672              	CPU_TS_TmrFreqSet:
 673              	.LFB8:
 643:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
 644:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 645:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 646:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*$PAGE*/
 647:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
 648:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
 649:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                         CPU_TS_TmrFreqSet()
 650:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 651:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Description : Set CPU timestamp's timer frequency.
 652:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 653:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Argument(s) : freq_hz     Frequency (in Hertz) to set for CPU timestamp's timer.
 654:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 655:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Return(s)   : none.
 656:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 657:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Caller(s)   : CPU_TS_TmrInit(),
 658:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               Application/BSP initialization function(s).
 659:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 660:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               This function is a CPU module BSP function & SHOULD be called only by appropriate
 661:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               application/BSP function(s) [see Note #1].
 662:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 663:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Note(s)     : (1) (a) (1) CPU timestamp timer frequency is NOT required for internal CPU timestam
 664:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           operations but may OPTIONALLY be configured by CPU_TS_TmrInit() or othe
 665:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           application/BSP initialization functions.
 666:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 667:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       (2) CPU timestamp timer frequency MAY be used with optional CPU_TSxx_to_uSe
 668:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           to convert CPU timestamps from timer counts into microseconds.
 669:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 670:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TSxx_to_uSec()  Note #2a
 671:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 672:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   (b) CPU timestamp timer period SHOULD be less than the typical measured time bu
 673:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       be less than the maximum measured time; otherwise, timer resolution inadequ
 674:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       measure desired times.
 675:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 676:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TSxx_to_uSec()  Note #2b'.
 677:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
 678:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
 679:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 680:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
 681:C:\Micrium\Software\uC-CPU\cpu_core.c **** void  CPU_TS_TmrFreqSet (CPU_TS_TMR_FREQ  freq_hz)
 682:C:\Micrium\Software\uC-CPU\cpu_core.c **** {
 674              		.loc 1 682 0
 675              		.cfi_startproc
 676              		@ args = 0, pretend = 0, frame = 8
 677              		@ frame_needed = 1, uses_anonymous_args = 0
 678              		@ link register save eliminated.
 679 0000 80B4     		push	{r7}
 680              	.LCFI21:
 681              		.cfi_def_cfa_offset 4
 682 0002 83B0     		sub	sp, sp, #12
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 25


 683              	.LCFI22:
 684              		.cfi_def_cfa_offset 16
 685 0004 00AF     		add	r7, sp, #0
 686              		.cfi_offset 7, -4
 687              	.LCFI23:
 688              		.cfi_def_cfa_register 7
 689 0006 7860     		str	r0, [r7, #4]
 683:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_TS_TmrFreq_Hz = freq_hz;
 690              		.loc 1 683 0
 691 0008 40F20003 		movw	r3, #:lower16:CPU_TS_TmrFreq_Hz
 692 000c C0F20003 		movt	r3, #:upper16:CPU_TS_TmrFreq_Hz
 693 0010 7A68     		ldr	r2, [r7, #4]
 694 0012 1A60     		str	r2, [r3, #0]
 684:C:\Micrium\Software\uC-CPU\cpu_core.c **** }
 695              		.loc 1 684 0
 696 0014 07F10C07 		add	r7, r7, #12
 697 0018 BD46     		mov	sp, r7
 698 001a 80BC     		pop	{r7}
 699 001c 7047     		bx	lr
 700              		.cfi_endproc
 701              	.LFE8:
 702              		.size	CPU_TS_TmrFreqSet, .-CPU_TS_TmrFreqSet
 703 001e 00BF     		.section	.text.CPU_CntLeadZeros08,"ax",%progbits
 704              		.align	2
 705              		.global	CPU_CntLeadZeros08
 706              		.thumb
 707              		.thumb_func
 708              		.type	CPU_CntLeadZeros08, %function
 709              	CPU_CntLeadZeros08:
 710              	.LFB9:
 685:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
 686:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 687:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 688:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*$PAGE*/
 689:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
 690:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
 691:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                     CPU_IntDisMeasMaxCurReset()
 692:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 693:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Description : Reset current maximum interrupts disabled time.
 694:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 695:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Argument(s) : none.
 696:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 697:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Return(s)   : Maximum interrupts disabled time (in CPU timestamp timer counts) before resetting.
 698:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 699:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()      Note #2c'
 700:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                      & 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TSxx_to_uSec()  Note #2'.
 701:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 702:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Caller(s)   : Application.
 703:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 704:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               This function is a CPU module application programming interface (API) function 
 705:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               & MAY be called by application function(s).
 706:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 707:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Note(s)     : (1) After initialization, 'CPU_IntDisMeasMaxCur_cnts' MUST ALWAYS be accessed
 708:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   exclusively with interrupts disabled -- but NOT with critical sections.
 709:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
 710:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
 711:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 26


 712:C:\Micrium\Software\uC-CPU\cpu_core.c **** #ifdef  CPU_CFG_INT_DIS_MEAS_EN
 713:C:\Micrium\Software\uC-CPU\cpu_core.c **** CPU_TS_TMR  CPU_IntDisMeasMaxCurReset (void)
 714:C:\Micrium\Software\uC-CPU\cpu_core.c **** {
 715:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_TS_TMR  time_max_cnts;
 716:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_SR_ALLOC();
 717:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 718:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 719:C:\Micrium\Software\uC-CPU\cpu_core.c ****     time_max_cnts             = CPU_IntDisMeasMaxCurGet();
 720:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_INT_DIS();
 721:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_IntDisMeasMaxCur_cnts = 0u;
 722:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_INT_EN();
 723:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 724:C:\Micrium\Software\uC-CPU\cpu_core.c ****     return (time_max_cnts);
 725:C:\Micrium\Software\uC-CPU\cpu_core.c **** }
 726:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
 727:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 728:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 729:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*$PAGE*/
 730:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
 731:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
 732:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                      CPU_IntDisMeasMaxCurGet()
 733:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 734:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Description : Get current maximum interrupts disabled time.
 735:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 736:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Argument(s) : none.
 737:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 738:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Return(s)   : Current maximum interrupts disabled time (in CPU timestamp timer counts).
 739:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 740:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()      Note #2c'
 741:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                      & 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TSxx_to_uSec()  Note #2'.
 742:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 743:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Caller(s)   : CPU_IntDisMeasMaxCurReset(),
 744:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               Application.
 745:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 746:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               This function is a CPU module application programming interface (API) function 
 747:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               & MAY be called by application function(s).
 748:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 749:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Note(s)     : (1) After initialization, 'CPU_IntDisMeasMaxCur_cnts' MUST ALWAYS be accessed
 750:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   exclusively with interrupts disabled -- but NOT with critical sections.
 751:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
 752:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
 753:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 754:C:\Micrium\Software\uC-CPU\cpu_core.c **** #ifdef  CPU_CFG_INT_DIS_MEAS_EN
 755:C:\Micrium\Software\uC-CPU\cpu_core.c **** CPU_TS_TMR  CPU_IntDisMeasMaxCurGet (void)
 756:C:\Micrium\Software\uC-CPU\cpu_core.c **** {
 757:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_TS_TMR  time_tot_cnts;
 758:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_TS_TMR  time_max_cnts;
 759:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_SR_ALLOC();
 760:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 761:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 762:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_INT_DIS();
 763:C:\Micrium\Software\uC-CPU\cpu_core.c ****     time_tot_cnts = CPU_IntDisMeasMaxCur_cnts;
 764:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_INT_EN();
 765:C:\Micrium\Software\uC-CPU\cpu_core.c ****     time_max_cnts = CPU_IntDisMeasMaxCalc(time_tot_cnts);
 766:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 767:C:\Micrium\Software\uC-CPU\cpu_core.c ****     return (time_max_cnts);
 768:C:\Micrium\Software\uC-CPU\cpu_core.c **** }
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 27


 769:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
 770:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 771:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 772:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*$PAGE*/
 773:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
 774:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
 775:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                       CPU_IntDisMeasMaxGet()
 776:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 777:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Description : Get (non-resetable) maximum interrupts disabled time.
 778:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 779:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Argument(s) : none.
 780:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 781:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Return(s)   : (Non-resetable) maximum interrupts disabled time (in CPU timestamp timer counts).
 782:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 783:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()      Note #2c'
 784:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                      & 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TSxx_to_uSec()  Note #2'.
 785:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 786:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Caller(s)   : CPU_IntDisMeasInit(),
 787:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               Application.
 788:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 789:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               This function is a CPU module application programming interface (API) function 
 790:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               & MAY be called by application function(s).
 791:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 792:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Note(s)     : (1) After initialization, 'CPU_IntDisMeasMax_cnts' MUST ALWAYS be accessed
 793:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   exclusively with interrupts disabled -- but NOT with critical sections.
 794:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
 795:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
 796:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 797:C:\Micrium\Software\uC-CPU\cpu_core.c **** #ifdef  CPU_CFG_INT_DIS_MEAS_EN
 798:C:\Micrium\Software\uC-CPU\cpu_core.c **** CPU_TS_TMR  CPU_IntDisMeasMaxGet (void)
 799:C:\Micrium\Software\uC-CPU\cpu_core.c **** {
 800:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_TS_TMR  time_tot_cnts;
 801:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_TS_TMR  time_max_cnts;
 802:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_SR_ALLOC();
 803:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 804:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 805:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_INT_DIS();
 806:C:\Micrium\Software\uC-CPU\cpu_core.c ****     time_tot_cnts = CPU_IntDisMeasMax_cnts;
 807:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_INT_EN();
 808:C:\Micrium\Software\uC-CPU\cpu_core.c ****     time_max_cnts = CPU_IntDisMeasMaxCalc(time_tot_cnts);
 809:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 810:C:\Micrium\Software\uC-CPU\cpu_core.c ****     return (time_max_cnts);
 811:C:\Micrium\Software\uC-CPU\cpu_core.c **** }
 812:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
 813:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 814:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 815:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*$PAGE*/
 816:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
 817:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
 818:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                        CPU_IntDisMeasStart()
 819:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 820:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Description : Start interrupts disabled time measurement.
 821:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 822:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Argument(s) : none.
 823:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 824:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Return(s)   : none.
 825:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 28


 826:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Caller(s)   : CPU_CRITICAL_ENTER().
 827:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 828:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               This function is an INTERNAL CPU module function & MUST NOT be called by applicatio
 829:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               function(s).
 830:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 831:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Note(s)     : none.
 832:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
 833:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
 834:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 835:C:\Micrium\Software\uC-CPU\cpu_core.c **** #ifdef  CPU_CFG_INT_DIS_MEAS_EN
 836:C:\Micrium\Software\uC-CPU\cpu_core.c **** void  CPU_IntDisMeasStart (void)
 837:C:\Micrium\Software\uC-CPU\cpu_core.c **** {
 838:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_IntDisMeasCtr++;
 839:C:\Micrium\Software\uC-CPU\cpu_core.c ****     if (CPU_IntDisNestCtr == 0u) {                                  /* If ints NOT yet dis'd, ...  
 840:C:\Micrium\Software\uC-CPU\cpu_core.c ****         CPU_IntDisMeasStart_cnts = CPU_TS_TmrRd();                  /* ... get ints dis'd start tim
 841:C:\Micrium\Software\uC-CPU\cpu_core.c ****     }
 842:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_IntDisNestCtr++;
 843:C:\Micrium\Software\uC-CPU\cpu_core.c **** }
 844:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
 845:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 846:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
 847:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*$PAGE*/
 848:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
 849:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
 850:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                        CPU_IntDisMeasStop()
 851:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 852:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Description : Stop interrupts disabled time measurement.
 853:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 854:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Argument(s) : none.
 855:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 856:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Return(s)   : none.
 857:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 858:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Caller(s)   : CPU_CRITICAL_EXIT().
 859:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 860:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               This function is an INTERNAL CPU module function & MUST NOT be called by applicatio
 861:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               function(s).
 862:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 863:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Note(s)     : (1) (a) The total amount of time interrupts are disabled by system &/or application
 864:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       during critical sections is calculated by the following equations :
 865:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 866:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       (1) When interrupts disabled time measurements are disabled :
 867:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 868:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 869:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               |   CRITICAL  |                           |   CRITICAL  |
 870:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               |<- SECTION ->|                           |<- SECTION ->|
 871:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               |    ENTER    |                           |    EXIT     |
 872:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 873:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                            Disable                                    Enable
 874:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           Interrupts                                Interrupts
 875:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 876:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               ||           ||                           ||           ||
 877:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               ||           ||                           ||           ||
 878:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               ||       |   ||<------------------------->||       |   ||
 879:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               ||       |<->||             |             ||<----->|   ||
 880:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               ||       | | ||             |             ||   |   |   ||
 881:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                        | |                |                  |   |
 882:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   interrupts            time                 interrupts
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 29


 883:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                    disabled                 interrupts       |enabled
 884:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                          |                   disabled        |
 885:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                          |              (via application)    |
 886:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                       time                                 time
 887:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                           interrupts                           interrupts
 888:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                         disabled ovrhd                        enabled ovrhd
 889:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 890:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 891:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           (A) time            =  [ time            -  time           ]  -  time
 892:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   interrupts     [     interrupts         interrupts ]         to
 893:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                    disabled      [      enabled            disabled  ]         ov
 894:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               (via application)
 895:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 896:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 897:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           (B) time       =  time              +  time
 898:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   total         interrupts           interrupts
 899:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   ovrhd        enabled ovrhd       disabled ovrhd
 900:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 901:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 902:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   where
 903:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 904:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                           time                    time interrupts are disabled be
 905:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                               interrupts              first critical section ente
 906:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                                disabled               last  critical section exit
 907:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                           (via application)           minus total overhead time)
 908:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 909:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                           time                    time when interrupts are disabl
 910:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                               interrupts
 911:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                                disabled
 912:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 913:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                           time                    time when interrupts are  enabl
 914:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                               interrupts
 915:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                                enabled
 916:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 917:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 918:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                           time                    total overhead time to disable/
 919:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                               total                   interrupts during critical 
 920:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                               ovrhd                   enter & exit
 921:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 922:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                           time                    total overhead time to disable 
 923:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                               interrupts              during critical section ent
 924:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                             disabled ovrhd
 925:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 926:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                           time                    total overhead time to enable  
 927:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                               interrupts              during critical section exi
 928:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                              enabled ovrhd
 929:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 930:C:\Micrium\Software\uC-CPU\cpu_core.c **** *$PAGE*
 931:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 932:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       (2) When interrupts disabled time measurements are enabled :
 933:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 934:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 935:C:\Micrium\Software\uC-CPU\cpu_core.c **** *        |                                    |                           |                        
 936:C:\Micrium\Software\uC-CPU\cpu_core.c **** *        |<----- CRITICAL SECTION ENTER ----->|                           |<------- CRITICAL SECTIO
 937:C:\Micrium\Software\uC-CPU\cpu_core.c **** *        |                                    |                           |                        
 938:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 939:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   Time                                                 Time
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 30


 940:C:\Micrium\Software\uC-CPU\cpu_core.c **** *     Disable    Measurement                                          Measurement                  
 941:C:\Micrium\Software\uC-CPU\cpu_core.c **** *    Interrupts     Start                                                Stop                    In
 942:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 943:C:\Micrium\Software\uC-CPU\cpu_core.c **** *        ||           |                      ||                           ||                       
 944:C:\Micrium\Software\uC-CPU\cpu_core.c **** *        ||           |                      ||                           ||                       
 945:C:\Micrium\Software\uC-CPU\cpu_core.c **** *        ||           |        |             ||<------------------------->||               |       
 946:C:\Micrium\Software\uC-CPU\cpu_core.c **** *        ||       |   |        |<----------->||             |             ||<------------->|       
 947:C:\Micrium\Software\uC-CPU\cpu_core.c **** *        ||       |   |        |      |      ||             |             ||       |       |       
 948:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                 |            |      |                     |                      |       |       
 949:C:\Micrium\Software\uC-CPU\cpu_core.c **** *            interrupts       get     |                   time                     |      get      
 950:C:\Micrium\Software\uC-CPU\cpu_core.c **** *             disabled    start time  |                       interrupts           |   stop time   
 951:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                            meas     |                        disabled            |     meas
 952:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   time                  (via application)      time
 953:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                       start meas                                   stop meas
 954:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                         ovrhd                                        ovrhd
 955:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 956:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 957:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           (A) time            =  [ time       -  time      ]  -  time
 958:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   interrupts     [      stop         start ]         total meas
 959:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                    disabled      [      meas         meas  ]           ovrhd
 960:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               (via application)
 961:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 962:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 963:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           (B) time            =  time            +  time
 964:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   total meas         start meas         stop meas
 965:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                     ovrhd              ovrhd              ovrhd
 966:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 967:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 968:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   where
 969:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 970:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                           time                    time interrupts are disabled be
 971:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                               interrupts              critical section enter & la
 972:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                                disabled               section exit (i.e. minus me
 973:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                           (via application)           overhead time; however, thi
 974:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                                                       include any overhead time t
 975:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                                                       or enable interrupts during
 976:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                                                       section enter & exit)
 977:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 978:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                           time                    time of disable interrupts star
 979:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                               start                   measurement (in timer count
 980:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                               meas
 981:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 982:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                           time                    time of disable interrupts stop
 983:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                               stop                    measurement (in timer count
 984:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                               meas
 985:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 986:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 987:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                           time                    total overhead time to start/st
 988:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                               total meas              interrupts time measurement
 989:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                                 ovrhd                 counts)
 990:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 991:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                           time                    total overhead time after getti
 992:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                               start meas              time until end of start mea
 993:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                                 ovrhd                 function  (in timer counts)
 994:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 995:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                           time                    total overhead time from beginn
 996:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                               stop meas               measurement function until 
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 31


 997:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                                 ovrhd                 stop time (in timer counts)
 998:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
 999:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1000:C:\Micrium\Software\uC-CPU\cpu_core.c **** *$PAGE*
1001:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   (b) (1) (A) In order to correctly handle unsigned subtraction overflows of star
1002:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               from stop times, CPU timestamp timer count values MUST be returned 
1003:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               word-size-configurable 'CPU_TS_TMR' data type.
1004:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1005:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()  Note #2a
1006:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1007:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           (B) Since unsigned subtraction of start times from stop times assumes i
1008:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               values, timestamp timer count values MUST increase with each time c
1009:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1010:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               See also 'cpu_core.h  FUNCTION PROTOTYPES  CPU_TS_TmrRd()  Note #2b
1011:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1012:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       (2) (A) To expedite & reduce interrupts disabled time measurement overhead;
1013:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               subtraction of start times from stop times is performed.
1014:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1015:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           (B) The final calculations to subtract the interrupts disabled time mea
1016:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               overhead is performed asynchronously in appropriate API functions.
1017:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1018:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               See also 'CPU_IntDisMeasMaxCalc()  Note #1b'.
1019:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
1020:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
1021:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1022:C:\Micrium\Software\uC-CPU\cpu_core.c **** #ifdef  CPU_CFG_INT_DIS_MEAS_EN
1023:C:\Micrium\Software\uC-CPU\cpu_core.c **** void  CPU_IntDisMeasStop (void)
1024:C:\Micrium\Software\uC-CPU\cpu_core.c **** {
1025:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_TS_TMR  time_ints_disd_cnts;
1026:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1027:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1028:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_IntDisNestCtr--;
1029:C:\Micrium\Software\uC-CPU\cpu_core.c ****     if (CPU_IntDisNestCtr == 0u) {                                  /* If ints NO longer dis'd,    
1030:C:\Micrium\Software\uC-CPU\cpu_core.c ****         CPU_IntDisMeasStop_cnts = CPU_TS_TmrRd();                   /* ... get  ints dis'd stop tim
1031:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                     /* ... calc ints dis'd tot  tim
1032:C:\Micrium\Software\uC-CPU\cpu_core.c ****         time_ints_disd_cnts     = CPU_IntDisMeasStop_cnts -
1033:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                   CPU_IntDisMeasStart_cnts;
1034:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                     /* Calc max ints dis'd times.  
1035:C:\Micrium\Software\uC-CPU\cpu_core.c ****         if (CPU_IntDisMeasMaxCur_cnts < time_ints_disd_cnts) {
1036:C:\Micrium\Software\uC-CPU\cpu_core.c ****             CPU_IntDisMeasMaxCur_cnts = time_ints_disd_cnts;
1037:C:\Micrium\Software\uC-CPU\cpu_core.c ****         }
1038:C:\Micrium\Software\uC-CPU\cpu_core.c ****         if (CPU_IntDisMeasMax_cnts    < time_ints_disd_cnts) {
1039:C:\Micrium\Software\uC-CPU\cpu_core.c ****             CPU_IntDisMeasMax_cnts    = time_ints_disd_cnts;
1040:C:\Micrium\Software\uC-CPU\cpu_core.c ****         }
1041:C:\Micrium\Software\uC-CPU\cpu_core.c ****     }
1042:C:\Micrium\Software\uC-CPU\cpu_core.c **** }
1043:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
1044:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1045:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1046:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*$PAGE*/
1047:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
1048:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
1049:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                         CPU_CntLeadZeros()
1050:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1051:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Description : Count the number of contiguous, most-significant, leading zero bits in a data value
1052:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1053:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Argument(s) : val         Data value to count leading zero bits.
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 32


1054:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1055:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Return(s)   : Number of contiguous, most-significant, leading zero bits in 'val', if NO error(s).
1056:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1057:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               DEF_INT_CPU_U_MAX_VAL,                                              otherwise.
1058:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1059:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Caller(s)   : CPU_CntTrailZeros(),
1060:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               Application.
1061:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1062:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1063:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               be called by application function(s).
1064:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1065:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Note(s)     : (1) (a) Supports the following data value sizes :
1066:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1067:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       (1)  8-bits
1068:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       (2) 16-bits
1069:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       (3) 32-bits
1070:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       (4) 64-bits
1071:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1072:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       See also 'cpu_def.h  CPU WORD CONFIGURATION  Note #1'.
1073:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1074:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   (b) (1) For  8-bit values :
1075:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1076:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                  b07  b06  b05  b04  b03  b02  b01  b00    # Leading Zeros
1077:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                  ---  ---  ---  ---  ---  ---  ---  ---    ---------------
1078:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   1    x    x    x    x    x    x    x            0
1079:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   0    1    x    x    x    x    x    x            1
1080:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   0    0    1    x    x    x    x    x            2
1081:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   0    0    0    1    x    x    x    x            3
1082:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   0    0    0    0    1    x    x    x            4
1083:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   0    0    0    0    0    1    x    x            5
1084:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   0    0    0    0    0    0    1    x            6
1085:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   0    0    0    0    0    0    0    1            7
1086:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   0    0    0    0    0    0    0    0            8
1087:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1088:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1089:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       (2) For 16-bit values :
1090:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1091:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                             b15  b14  b13  ...  b04  b03  b02  b01  b00    # Leading Zeros
1092:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                             ---  ---  ---       ---  ---  ---  ---  ---    ---------------
1093:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              1    x    x         x    x    x    x    x            0
1094:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              0    1    x         x    x    x    x    x            1
1095:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              0    0    1         x    x    x    x    x            2
1096:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              :    :    :         :    :    :    :    :            :
1097:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              :    :    :         :    :    :    :    :            :
1098:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              0    0    0         1    x    x    x    x           11
1099:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              0    0    0         0    1    x    x    x           12
1100:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              0    0    0         0    0    1    x    x           13
1101:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              0    0    0         0    0    0    1    x           14
1102:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              0    0    0         0    0    0    0    1           15
1103:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              0    0    0         0    0    0    0    0           16
1104:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1105:C:\Micrium\Software\uC-CPU\cpu_core.c **** *$PAGE*
1106:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       (3) For 32-bit values :
1107:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1108:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                             b31  b30  b29  ...  b04  b03  b02  b01  b00    # Leading Zeros
1109:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                             ---  ---  ---       ---  ---  ---  ---  ---    ---------------
1110:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              1    x    x         x    x    x    x    x            0
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 33


1111:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              0    1    x         x    x    x    x    x            1
1112:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              0    0    1         x    x    x    x    x            2
1113:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              :    :    :         :    :    :    :    :            :
1114:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              :    :    :         :    :    :    :    :            :
1115:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              0    0    0         1    x    x    x    x           27
1116:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              0    0    0         0    1    x    x    x           28
1117:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              0    0    0         0    0    1    x    x           29
1118:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              0    0    0         0    0    0    1    x           30
1119:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              0    0    0         0    0    0    0    1           31
1120:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              0    0    0         0    0    0    0    0           32
1121:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1122:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1123:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       (4) For 64-bit values :
1124:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1125:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                             b63  b62  b61  ...  b04  b03  b02  b01  b00    # Leading Zeros
1126:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                             ---  ---  ---       ---  ---  ---  ---  ---    ---------------
1127:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              1    x    x         x    x    x    x    x            0
1128:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              0    1    x         x    x    x    x    x            1
1129:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              0    0    1         x    x    x    x    x            2
1130:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              :    :    :         :    :    :    :    :            :
1131:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              :    :    :         :    :    :    :    :            :
1132:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              0    0    0         1    x    x    x    x           59
1133:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              0    0    0         0    1    x    x    x           60
1134:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              0    0    0         0    0    1    x    x           61
1135:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              0    0    0         0    0    0    1    x           62
1136:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              0    0    0         0    0    0    0    1           63
1137:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              0    0    0         0    0    0    0    0           64
1138:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1139:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1140:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       See also 'CPU COUNT LEAD ZEROs LOOKUP TABLE  Note #1'.
1141:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
1142:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
1143:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1144:C:\Micrium\Software\uC-CPU\cpu_core.c **** #ifndef   CPU_CFG_LEAD_ZEROS_ASM_PRESENT
1145:C:\Micrium\Software\uC-CPU\cpu_core.c **** CPU_DATA  CPU_CntLeadZeros (CPU_DATA  val)
1146:C:\Micrium\Software\uC-CPU\cpu_core.c **** {
1147:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_DATA  nbr_lead_zeros;
1148:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1149:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1150:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if   (CPU_CFG_DATA_SIZE == CPU_WORD_SIZE_08)
1151:C:\Micrium\Software\uC-CPU\cpu_core.c ****     nbr_lead_zeros = CPU_CntLeadZeros08((CPU_INT08U)val);
1152:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1153:C:\Micrium\Software\uC-CPU\cpu_core.c **** #elif (CPU_CFG_DATA_SIZE == CPU_WORD_SIZE_16)
1154:C:\Micrium\Software\uC-CPU\cpu_core.c ****     nbr_lead_zeros = CPU_CntLeadZeros16((CPU_INT16U)val);
1155:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1156:C:\Micrium\Software\uC-CPU\cpu_core.c **** #elif (CPU_CFG_DATA_SIZE == CPU_WORD_SIZE_32)
1157:C:\Micrium\Software\uC-CPU\cpu_core.c ****     nbr_lead_zeros = CPU_CntLeadZeros32((CPU_INT32U)val);
1158:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1159:C:\Micrium\Software\uC-CPU\cpu_core.c **** #elif (CPU_CFG_DATA_SIZE == CPU_WORD_SIZE_64)
1160:C:\Micrium\Software\uC-CPU\cpu_core.c ****     nbr_lead_zeros = CPU_CntLeadZeros64((CPU_INT64U)val);
1161:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1162:C:\Micrium\Software\uC-CPU\cpu_core.c **** #else                                                           /* See Note #1a.                   
1163:C:\Micrium\Software\uC-CPU\cpu_core.c ****     nbr_lead_zeros = DEF_INT_CPU_U_MAX_VAL;
1164:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
1165:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1166:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1167:C:\Micrium\Software\uC-CPU\cpu_core.c ****     return (nbr_lead_zeros);
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 34


1168:C:\Micrium\Software\uC-CPU\cpu_core.c **** }
1169:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
1170:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1171:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1172:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*$PAGE*/
1173:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
1174:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
1175:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                        CPU_CntLeadZeros08()
1176:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1177:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Description : Count the number of contiguous, most-significant, leading zero bits in an 8-bit dat
1178:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1179:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Argument(s) : val         Data value to count leading zero bits.
1180:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1181:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Return(s)   : Number of contiguous, most-significant, leading zero bits in 'val'.
1182:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1183:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Caller(s)   : CPU_CntLeadZeros(),
1184:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               CPU_CntTrailZeros08(),
1185:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               Application.
1186:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1187:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1188:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               called by application function(s).
1189:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1190:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Note(s)     : (1) Supports  8-bit values :
1191:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1192:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               b07  b06  b05  b04  b03  b02  b01  b00    # Leading Zeros
1193:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               ---  ---  ---  ---  ---  ---  ---  ---    ---------------
1194:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                1    x    x    x    x    x    x    x            0
1195:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                0    1    x    x    x    x    x    x            1
1196:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                0    0    1    x    x    x    x    x            2
1197:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                0    0    0    1    x    x    x    x            3
1198:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                0    0    0    0    1    x    x    x            4
1199:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                0    0    0    0    0    1    x    x            5
1200:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                0    0    0    0    0    0    1    x            6
1201:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                0    0    0    0    0    0    0    1            7
1202:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                0    0    0    0    0    0    0    0            8
1203:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1204:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1205:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   See also 'CPU COUNT LEAD ZEROs LOOKUP TABLE  Note #1'.
1206:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
1207:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
1208:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1209:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_08)
1210:C:\Micrium\Software\uC-CPU\cpu_core.c **** CPU_DATA  CPU_CntLeadZeros08 (CPU_INT08U  val)
1211:C:\Micrium\Software\uC-CPU\cpu_core.c **** {
 711              		.loc 1 1211 0
 712              		.cfi_startproc
 713              		@ args = 0, pretend = 0, frame = 16
 714              		@ frame_needed = 1, uses_anonymous_args = 0
 715 0000 80B5     		push	{r7, lr}
 716              	.LCFI24:
 717              		.cfi_def_cfa_offset 8
 718 0002 84B0     		sub	sp, sp, #16
 719              	.LCFI25:
 720              		.cfi_def_cfa_offset 24
 721 0004 00AF     		add	r7, sp, #0
 722              		.cfi_offset 14, -4
 723              		.cfi_offset 7, -8
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 35


 724              	.LCFI26:
 725              		.cfi_def_cfa_register 7
 726 0006 0346     		mov	r3, r0
 727 0008 FB71     		strb	r3, [r7, #7]
1212:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1213:C:\Micrium\Software\uC-CPU\cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08)))
1214:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_DATA  ix;
1215:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
1216:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_DATA  nbr_lead_zeros;
1217:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1218:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                                 /* ---------- ASM-O
1219:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1220:C:\Micrium\Software\uC-CPU\cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08))
1221:C:\Micrium\Software\uC-CPU\cpu_core.c ****     nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
 728              		.loc 1 1221 0
 729 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 730 000c 1846     		mov	r0, r3
 731 000e FFF7FEFF 		bl	CPU_CntLeadZeros
 732 0012 0346     		mov	r3, r0
 733 0014 FB60     		str	r3, [r7, #12]
1222:C:\Micrium\Software\uC-CPU\cpu_core.c ****     nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_08) * DEF_OCTET_NBR_BITS;
 734              		.loc 1 1222 0
 735 0016 FB68     		ldr	r3, [r7, #12]
 736 0018 A3F11803 		sub	r3, r3, #24
 737 001c FB60     		str	r3, [r7, #12]
1223:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1224:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1225:C:\Micrium\Software\uC-CPU\cpu_core.c **** #else                                                                           /* ----------- C-OP
1226:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                                 /* Chk bits [07:00]
1227:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                                 /* .. Nbr lead zero
1228:C:\Micrium\Software\uC-CPU\cpu_core.c ****     ix              = (CPU_DATA)(val >>  0u);                                   /* .. lookup tbl ix
1229:C:\Micrium\Software\uC-CPU\cpu_core.c ****     nbr_lead_zeros  = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  0u);                /* .. plus nbr msb 
1230:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
1231:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1232:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1233:C:\Micrium\Software\uC-CPU\cpu_core.c ****     return (nbr_lead_zeros);
 738              		.loc 1 1233 0
 739 001e FB68     		ldr	r3, [r7, #12]
1234:C:\Micrium\Software\uC-CPU\cpu_core.c **** }
 740              		.loc 1 1234 0
 741 0020 1846     		mov	r0, r3
 742 0022 07F11007 		add	r7, r7, #16
 743 0026 BD46     		mov	sp, r7
 744 0028 80BD     		pop	{r7, pc}
 745              		.cfi_endproc
 746              	.LFE9:
 747              		.size	CPU_CntLeadZeros08, .-CPU_CntLeadZeros08
 748 002a 00BF     		.section	.text.CPU_CntLeadZeros16,"ax",%progbits
 749              		.align	2
 750              		.global	CPU_CntLeadZeros16
 751              		.thumb
 752              		.thumb_func
 753              		.type	CPU_CntLeadZeros16, %function
 754              	CPU_CntLeadZeros16:
 755              	.LFB10:
1235:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
1236:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 36


1237:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1238:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*$PAGE*/
1239:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
1240:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
1241:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                        CPU_CntLeadZeros16()
1242:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1243:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Description : Count the number of contiguous, most-significant, leading zero bits in a 16-bit dat
1244:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1245:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Argument(s) : val         Data value to count leading zero bits.
1246:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1247:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Return(s)   : Number of contiguous, most-significant, leading zero bits in 'val'.
1248:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1249:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Caller(s)   : CPU_CntLeadZeros(),
1250:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               CPU_CntTrailZeros16(),
1251:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               Application.
1252:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1253:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1254:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               called by application function(s).
1255:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1256:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Note(s)     : (1) Supports 16-bit values :
1257:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1258:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                          b15  b14  b13  ...  b04  b03  b02  b01  b00    # Leading Zeros
1259:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                          ---  ---  ---       ---  ---  ---  ---  ---    ---------------
1260:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           1    x    x         x    x    x    x    x            0
1261:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           0    1    x         x    x    x    x    x            1
1262:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           0    0    1         x    x    x    x    x            2
1263:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           :    :    :         :    :    :    :    :            :
1264:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           :    :    :         :    :    :    :    :            :
1265:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           0    0    0         1    x    x    x    x           11
1266:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           0    0    0         0    1    x    x    x           12
1267:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           0    0    0         0    0    1    x    x           13
1268:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           0    0    0         0    0    0    1    x           14
1269:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           0    0    0         0    0    0    0    1           15
1270:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           0    0    0         0    0    0    0    0           16
1271:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1272:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1273:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   See also 'CPU COUNT LEAD ZEROs LOOKUP TABLE  Note #1'.
1274:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
1275:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
1276:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1277:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_16)
1278:C:\Micrium\Software\uC-CPU\cpu_core.c **** CPU_DATA  CPU_CntLeadZeros16 (CPU_INT16U  val)
1279:C:\Micrium\Software\uC-CPU\cpu_core.c **** {
 756              		.loc 1 1279 0
 757              		.cfi_startproc
 758              		@ args = 0, pretend = 0, frame = 16
 759              		@ frame_needed = 1, uses_anonymous_args = 0
 760 0000 80B5     		push	{r7, lr}
 761              	.LCFI27:
 762              		.cfi_def_cfa_offset 8
 763 0002 84B0     		sub	sp, sp, #16
 764              	.LCFI28:
 765              		.cfi_def_cfa_offset 24
 766 0004 00AF     		add	r7, sp, #0
 767              		.cfi_offset 14, -4
 768              		.cfi_offset 7, -8
 769              	.LCFI29:
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 37


 770              		.cfi_def_cfa_register 7
 771 0006 0346     		mov	r3, r0
 772 0008 FB80     		strh	r3, [r7, #6]	@ movhi
1280:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1281:C:\Micrium\Software\uC-CPU\cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16)))
1282:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_DATA  ix;
1283:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
1284:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_DATA  nbr_lead_zeros;
1285:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1286:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                                 /* ---------- ASM-O
1287:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1288:C:\Micrium\Software\uC-CPU\cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16))
1289:C:\Micrium\Software\uC-CPU\cpu_core.c ****     nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
 773              		.loc 1 1289 0
 774 000a FB88     		ldrh	r3, [r7, #6]
 775 000c 1846     		mov	r0, r3
 776 000e FFF7FEFF 		bl	CPU_CntLeadZeros
 777 0012 0346     		mov	r3, r0
 778 0014 FB60     		str	r3, [r7, #12]
1290:C:\Micrium\Software\uC-CPU\cpu_core.c ****     nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_16) * DEF_OCTET_NBR_BITS;
 779              		.loc 1 1290 0
 780 0016 FB68     		ldr	r3, [r7, #12]
 781 0018 A3F11003 		sub	r3, r3, #16
 782 001c FB60     		str	r3, [r7, #12]
1291:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1292:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1293:C:\Micrium\Software\uC-CPU\cpu_core.c **** #else                                                                           /* ----------- C-OP
1294:C:\Micrium\Software\uC-CPU\cpu_core.c ****     if (val > 0x00FFu) {                                                        /* Chk bits [15:08]
1295:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                                 /* .. Nbr lead zero
1296:C:\Micrium\Software\uC-CPU\cpu_core.c ****         ix             = (CPU_DATA)(val >>  8u);                                /* .. lookup tbl ix
1297:C:\Micrium\Software\uC-CPU\cpu_core.c ****         nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  0u);             /* .. plus nbr msb 
1298:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1299:C:\Micrium\Software\uC-CPU\cpu_core.c ****     } else {                                                                    /* Chk bits [07:00]
1300:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                                 /* .. Nbr lead zero
1301:C:\Micrium\Software\uC-CPU\cpu_core.c ****         ix             = (CPU_DATA)(val >>  0u);                                /* .. lookup tbl ix
1302:C:\Micrium\Software\uC-CPU\cpu_core.c ****         nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  8u);             /* .. plus nbr msb 
1303:C:\Micrium\Software\uC-CPU\cpu_core.c ****     }
1304:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
1305:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1306:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1307:C:\Micrium\Software\uC-CPU\cpu_core.c ****     return (nbr_lead_zeros);
 783              		.loc 1 1307 0
 784 001e FB68     		ldr	r3, [r7, #12]
1308:C:\Micrium\Software\uC-CPU\cpu_core.c **** }
 785              		.loc 1 1308 0
 786 0020 1846     		mov	r0, r3
 787 0022 07F11007 		add	r7, r7, #16
 788 0026 BD46     		mov	sp, r7
 789 0028 80BD     		pop	{r7, pc}
 790              		.cfi_endproc
 791              	.LFE10:
 792              		.size	CPU_CntLeadZeros16, .-CPU_CntLeadZeros16
 793 002a 00BF     		.section	.text.CPU_CntLeadZeros32,"ax",%progbits
 794              		.align	2
 795              		.global	CPU_CntLeadZeros32
 796              		.thumb
 797              		.thumb_func
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 38


 798              		.type	CPU_CntLeadZeros32, %function
 799              	CPU_CntLeadZeros32:
 800              	.LFB11:
1309:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
1310:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1311:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1312:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*$PAGE*/
1313:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
1314:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
1315:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                        CPU_CntLeadZeros32()
1316:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1317:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Description : Count the number of contiguous, most-significant, leading zero bits in a 32-bit dat
1318:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1319:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Argument(s) : val         Data value to count leading zero bits.
1320:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1321:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Return(s)   : Number of contiguous, most-significant, leading zero bits in 'val'.
1322:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1323:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Caller(s)   : CPU_CntLeadZeros(),
1324:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               CPU_CntTrailZeros32(),
1325:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               Application.
1326:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1327:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1328:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               called by application function(s).
1329:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1330:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Note(s)     : (1) Supports 32-bit values :
1331:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1332:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                          b31  b30  b29  ...  b04  b03  b02  b01  b00    # Leading Zeros
1333:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                          ---  ---  ---       ---  ---  ---  ---  ---    ---------------
1334:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           1    x    x         x    x    x    x    x            0
1335:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           0    1    x         x    x    x    x    x            1
1336:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           0    0    1         x    x    x    x    x            2
1337:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           :    :    :         :    :    :    :    :            :
1338:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           :    :    :         :    :    :    :    :            :
1339:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           0    0    0         1    x    x    x    x           27
1340:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           0    0    0         0    1    x    x    x           28
1341:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           0    0    0         0    0    1    x    x           29
1342:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           0    0    0         0    0    0    1    x           30
1343:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           0    0    0         0    0    0    0    1           31
1344:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           0    0    0         0    0    0    0    0           32
1345:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1346:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1347:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   See also 'CPU COUNT LEAD ZEROs LOOKUP TABLE  Note #1'.
1348:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
1349:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
1350:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1351:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_32)
1352:C:\Micrium\Software\uC-CPU\cpu_core.c **** CPU_DATA  CPU_CntLeadZeros32 (CPU_INT32U  val)
1353:C:\Micrium\Software\uC-CPU\cpu_core.c **** {
 801              		.loc 1 1353 0
 802              		.cfi_startproc
 803              		@ args = 0, pretend = 0, frame = 16
 804              		@ frame_needed = 1, uses_anonymous_args = 0
 805 0000 80B5     		push	{r7, lr}
 806              	.LCFI30:
 807              		.cfi_def_cfa_offset 8
 808 0002 84B0     		sub	sp, sp, #16
 809              	.LCFI31:
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 39


 810              		.cfi_def_cfa_offset 24
 811 0004 00AF     		add	r7, sp, #0
 812              		.cfi_offset 14, -4
 813              		.cfi_offset 7, -8
 814              	.LCFI32:
 815              		.cfi_def_cfa_register 7
 816 0006 7860     		str	r0, [r7, #4]
1354:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1355:C:\Micrium\Software\uC-CPU\cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32)))
1356:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_DATA  ix;
1357:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
1358:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_DATA  nbr_lead_zeros;
1359:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1360:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                                 /* ---------- ASM-O
1361:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1362:C:\Micrium\Software\uC-CPU\cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32))
1363:C:\Micrium\Software\uC-CPU\cpu_core.c ****     nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
 817              		.loc 1 1363 0
 818 0008 7868     		ldr	r0, [r7, #4]
 819 000a FFF7FEFF 		bl	CPU_CntLeadZeros
 820 000e 0346     		mov	r3, r0
 821 0010 FB60     		str	r3, [r7, #12]
1364:C:\Micrium\Software\uC-CPU\cpu_core.c ****     nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_32) * DEF_OCTET_NBR_BITS;
1365:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1366:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1367:C:\Micrium\Software\uC-CPU\cpu_core.c **** #else                                                                           /* ----------- C-OP
1368:C:\Micrium\Software\uC-CPU\cpu_core.c ****     if (val > 0x0000FFFFu) {
1369:C:\Micrium\Software\uC-CPU\cpu_core.c ****         if (val > 0x00FFFFFFu) {                                                /* Chk bits [31:24]
1370:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                                 /* .. Nbr lead zero
1371:C:\Micrium\Software\uC-CPU\cpu_core.c ****             ix             = (CPU_DATA)(val >> 24u);                            /* .. lookup tbl ix
1372:C:\Micrium\Software\uC-CPU\cpu_core.c ****             nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  0u);         /* .. plus nbr msb 
1373:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1374:C:\Micrium\Software\uC-CPU\cpu_core.c ****         } else {                                                                /* Chk bits [23:16]
1375:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                                 /* .. Nbr lead zero
1376:C:\Micrium\Software\uC-CPU\cpu_core.c ****             ix             = (CPU_DATA)(val >> 16u);                            /* .. lookup tbl ix
1377:C:\Micrium\Software\uC-CPU\cpu_core.c ****             nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  8u);         /* .. plus nbr msb 
1378:C:\Micrium\Software\uC-CPU\cpu_core.c ****         }
1379:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1380:C:\Micrium\Software\uC-CPU\cpu_core.c ****     } else {
1381:C:\Micrium\Software\uC-CPU\cpu_core.c ****         if (val > 0x000000FFu) {                                                /* Chk bits [15:08]
1382:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                                 /* .. Nbr lead zero
1383:C:\Micrium\Software\uC-CPU\cpu_core.c ****             ix             = (CPU_DATA)(val >>  8u);                            /* .. lookup tbl ix
1384:C:\Micrium\Software\uC-CPU\cpu_core.c ****             nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 16u);         /* .. plus nbr msb 
1385:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1386:C:\Micrium\Software\uC-CPU\cpu_core.c ****         } else {                                                                /* Chk bits [07:00]
1387:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                                 /* .. Nbr lead zero
1388:C:\Micrium\Software\uC-CPU\cpu_core.c ****             ix             = (CPU_DATA)(val >>  0u);                            /* .. lookup tbl ix
1389:C:\Micrium\Software\uC-CPU\cpu_core.c ****             nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 24u);         /* .. plus nbr msb 
1390:C:\Micrium\Software\uC-CPU\cpu_core.c ****         }
1391:C:\Micrium\Software\uC-CPU\cpu_core.c ****     }
1392:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
1393:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1394:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1395:C:\Micrium\Software\uC-CPU\cpu_core.c ****     return (nbr_lead_zeros);
 822              		.loc 1 1395 0
 823 0012 FB68     		ldr	r3, [r7, #12]
1396:C:\Micrium\Software\uC-CPU\cpu_core.c **** }
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 40


 824              		.loc 1 1396 0
 825 0014 1846     		mov	r0, r3
 826 0016 07F11007 		add	r7, r7, #16
 827 001a BD46     		mov	sp, r7
 828 001c 80BD     		pop	{r7, pc}
 829              		.cfi_endproc
 830              	.LFE11:
 831              		.size	CPU_CntLeadZeros32, .-CPU_CntLeadZeros32
 832 001e 00BF     		.section	.text.CPU_CntLeadZeros64,"ax",%progbits
 833              		.align	2
 834              		.global	CPU_CntLeadZeros64
 835              		.thumb
 836              		.thumb_func
 837              		.type	CPU_CntLeadZeros64, %function
 838              	CPU_CntLeadZeros64:
 839              	.LFB12:
1397:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
1398:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1399:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1400:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*$PAGE*/
1401:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
1402:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
1403:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                        CPU_CntLeadZeros64()
1404:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1405:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Description : Count the number of contiguous, most-significant, leading zero bits in a 64-bit dat
1406:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1407:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Argument(s) : val         Data value to count leading zero bits.
1408:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1409:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Return(s)   : Number of contiguous, most-significant, leading zero bits in 'val'.
1410:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1411:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Caller(s)   : CPU_CntLeadZeros(),
1412:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               CPU_CntTrailZeros64(),
1413:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               Application.
1414:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1415:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1416:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               called by application function(s).
1417:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1418:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Note(s)     : (1) Supports 64-bit values :
1419:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1420:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                          b63  b62  b61  ...  b04  b03  b02  b01  b00    # Leading Zeros
1421:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                          ---  ---  ---       ---  ---  ---  ---  ---    ---------------
1422:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           1    x    x         x    x    x    x    x            0
1423:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           0    1    x         x    x    x    x    x            1
1424:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           0    0    1         x    x    x    x    x            2
1425:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           :    :    :         :    :    :    :    :            :
1426:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           :    :    :         :    :    :    :    :            :
1427:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           0    0    0         1    x    x    x    x           59
1428:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           0    0    0         0    1    x    x    x           60
1429:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           0    0    0         0    0    1    x    x           61
1430:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           0    0    0         0    0    0    1    x           62
1431:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           0    0    0         0    0    0    0    1           63
1432:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           0    0    0         0    0    0    0    0           64
1433:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1434:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1435:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   See also 'CPU COUNT LEAD ZEROs LOOKUP TABLE  Note #1'.
1436:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
1437:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 41


1438:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*$PAGE*/
1439:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_64)
1440:C:\Micrium\Software\uC-CPU\cpu_core.c **** CPU_DATA  CPU_CntLeadZeros64 (CPU_INT64U  val)
1441:C:\Micrium\Software\uC-CPU\cpu_core.c **** {
 840              		.loc 1 1441 0
 841              		.cfi_startproc
 842              		@ args = 0, pretend = 0, frame = 48
 843              		@ frame_needed = 1, uses_anonymous_args = 0
 844              		@ link register save eliminated.
 845 0000 2DE9B00F 		push	{r4, r5, r7, r8, r9, sl, fp}
 846              	.LCFI33:
 847              		.cfi_def_cfa_offset 28
 848 0004 8DB0     		sub	sp, sp, #52
 849              	.LCFI34:
 850              		.cfi_def_cfa_offset 80
 851 0006 00AF     		add	r7, sp, #0
 852              		.cfi_offset 11, -4
 853              		.cfi_offset 10, -8
 854              		.cfi_offset 9, -12
 855              		.cfi_offset 8, -16
 856              		.cfi_offset 7, -20
 857              		.cfi_offset 5, -24
 858              		.cfi_offset 4, -28
 859              	.LCFI35:
 860              		.cfi_def_cfa_register 7
 861 0008 C7E90801 		strd	r0, [r7, #32]
1442:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1443:C:\Micrium\Software\uC-CPU\cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64)))
1444:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_DATA  ix;
1445:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
1446:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_DATA  nbr_lead_zeros;
1447:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1448:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                                 /* ---------- ASM-O
1449:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
1450:C:\Micrium\Software\uC-CPU\cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64))
1451:C:\Micrium\Software\uC-CPU\cpu_core.c ****     nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
1452:C:\Micrium\Software\uC-CPU\cpu_core.c ****     nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_64) * DEF_OCTET_NBR_BITS;
1453:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1454:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1455:C:\Micrium\Software\uC-CPU\cpu_core.c **** #else                                                                           /* ----------- C-OP
1456:C:\Micrium\Software\uC-CPU\cpu_core.c ****     if (val > 0x00000000FFFFFFFFu) {
 862              		.loc 1 1456 0
 863 000c D7E90801 		ldrd	r0, [r7, #32]
 864 0010 4FF0FF32 		mov	r2, #-1
 865 0014 4FF00003 		mov	r3, #0
 866 0018 8242     		cmp	r2, r0
 867 001a 73EB010C 		sbcs	ip, r3, r1
 868 001e 68D2     		bcs	.L37
1457:C:\Micrium\Software\uC-CPU\cpu_core.c ****         if (val > 0x0000FFFFFFFFFFFFu) {
 869              		.loc 1 1457 0
 870 0020 D7E90823 		ldrd	r2, [r7, #32]
 871 0024 4FF0FF30 		mov	r0, #-1
 872 0028 4FF6FF71 		movw	r1, #65535
 873 002c 9042     		cmp	r0, r2
 874 002e 71EB030C 		sbcs	ip, r1, r3
 875 0032 2ED2     		bcs	.L38
1458:C:\Micrium\Software\uC-CPU\cpu_core.c ****             if (val > 0x00FFFFFFFFFFFFFFu) {                                    /* Chk bits [63:56]
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 42


 876              		.loc 1 1458 0
 877 0034 D7E90823 		ldrd	r2, [r7, #32]
 878 0038 4FF0FF30 		mov	r0, #-1
 879 003c 6FF07F41 		mvn	r1, #-16777216
 880 0040 9042     		cmp	r0, r2
 881 0042 71EB030C 		sbcs	ip, r1, r3
 882 0046 10D2     		bcs	.L39
1459:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                                 /* .. Nbr lead zero
1460:C:\Micrium\Software\uC-CPU\cpu_core.c ****                 ix             = (CPU_DATA)(val >> 56u);                        /* .. lookup tbl ix
 883              		.loc 1 1460 0
 884 0048 7B6A     		ldr	r3, [r7, #36]
 885 004a 4FEA1363 		lsr	r3, r3, #24
 886 004e 3B60     		str	r3, [r7, #0]
 887 0050 4FF00003 		mov	r3, #0
 888 0054 7B60     		str	r3, [r7, #4]
 889 0056 3B68     		ldr	r3, [r7, #0]
 890 0058 BB62     		str	r3, [r7, #40]
1461:C:\Micrium\Software\uC-CPU\cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  0u);     /* .. plus nbr msb 
 891              		.loc 1 1461 0
 892 005a BA6A     		ldr	r2, [r7, #40]
 893 005c 40F20003 		movw	r3, #:lower16:CPU_CntLeadZerosTbl
 894 0060 C0F20003 		movt	r3, #:upper16:CPU_CntLeadZerosTbl
 895 0064 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 896 0066 FB62     		str	r3, [r7, #44]
1462:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1463:C:\Micrium\Software\uC-CPU\cpu_core.c ****             } else {                                                            /* Chk bits [55:48]
1464:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                                 /* .. Nbr lead zero
1465:C:\Micrium\Software\uC-CPU\cpu_core.c ****                 ix             = (CPU_DATA)(val >> 48u);                        /* .. lookup tbl ix
1466:C:\Micrium\Software\uC-CPU\cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  8u);     /* .. plus nbr msb 
1467:C:\Micrium\Software\uC-CPU\cpu_core.c ****             }
1468:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1469:C:\Micrium\Software\uC-CPU\cpu_core.c ****         } else {
1470:C:\Micrium\Software\uC-CPU\cpu_core.c ****             if (val > 0x000000FFFFFFFFFFu) {                                    /* Chk bits [47:40]
1471:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                                 /* .. Nbr lead zero
1472:C:\Micrium\Software\uC-CPU\cpu_core.c ****                 ix             = (CPU_DATA)(val >> 40u);                        /* .. lookup tbl ix
1473:C:\Micrium\Software\uC-CPU\cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 16u);     /* .. plus nbr msb 
1474:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1475:C:\Micrium\Software\uC-CPU\cpu_core.c ****             } else {                                                            /* Chk bits [39:32]
1476:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                                 /* .. Nbr lead zero
1477:C:\Micrium\Software\uC-CPU\cpu_core.c ****                 ix             = (CPU_DATA)(val >> 32u);                        /* .. lookup tbl ix
1478:C:\Micrium\Software\uC-CPU\cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 24u);     /* .. plus nbr msb 
 897              		.loc 1 1478 0
 898 0068 B1E0     		b	.L43
 899              	.L39:
 900              		.loc 1 1465 0
 901 006a 7B6A     		ldr	r3, [r7, #36]
 902 006c 4FEA1343 		lsr	r3, r3, #16
 903 0070 BB60     		str	r3, [r7, #8]
 904 0072 4FF0000C 		mov	ip, #0
 905 0076 C7F80CC0 		str	ip, [r7, #12]
 906 007a BB68     		ldr	r3, [r7, #8]
 907 007c BB62     		str	r3, [r7, #40]
 908              		.loc 1 1466 0
 909 007e BA6A     		ldr	r2, [r7, #40]
 910 0080 40F20003 		movw	r3, #:lower16:CPU_CntLeadZerosTbl
 911 0084 C0F20003 		movt	r3, #:upper16:CPU_CntLeadZerosTbl
 912 0088 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 43


 913 008a 03F10803 		add	r3, r3, #8
 914 008e FB62     		str	r3, [r7, #44]
 915              		.loc 1 1478 0
 916 0090 9DE0     		b	.L43
 917              	.L38:
 918              		.loc 1 1470 0
 919 0092 D7E90823 		ldrd	r2, [r7, #32]
 920 0096 4FF0FF30 		mov	r0, #-1
 921 009a 4FF0FF01 		mov	r1, #255
 922 009e 9042     		cmp	r0, r2
 923 00a0 71EB030C 		sbcs	ip, r1, r3
 924 00a4 12D2     		bcs	.L42
 925              		.loc 1 1472 0
 926 00a6 7B6A     		ldr	r3, [r7, #36]
 927 00a8 4FEA1323 		lsr	r3, r3, #8
 928 00ac 3B61     		str	r3, [r7, #16]
 929 00ae 4FF00003 		mov	r3, #0
 930 00b2 7B61     		str	r3, [r7, #20]
 931 00b4 3B69     		ldr	r3, [r7, #16]
 932 00b6 BB62     		str	r3, [r7, #40]
 933              		.loc 1 1473 0
 934 00b8 BA6A     		ldr	r2, [r7, #40]
 935 00ba 40F20003 		movw	r3, #:lower16:CPU_CntLeadZerosTbl
 936 00be C0F20003 		movt	r3, #:upper16:CPU_CntLeadZerosTbl
 937 00c2 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 938 00c4 03F11003 		add	r3, r3, #16
 939 00c8 FB62     		str	r3, [r7, #44]
 940              		.loc 1 1478 0
 941 00ca 80E0     		b	.L43
 942              	.L42:
 943              		.loc 1 1477 0
 944 00cc 7B6A     		ldr	r3, [r7, #36]
 945 00ce 1B46     		mov	r3, r3
 946 00d0 BB61     		str	r3, [r7, #24]
 947 00d2 4FF0000C 		mov	ip, #0
 948 00d6 C7F81CC0 		str	ip, [r7, #28]
 949 00da BB69     		ldr	r3, [r7, #24]
 950 00dc BB62     		str	r3, [r7, #40]
 951              		.loc 1 1478 0
 952 00de BA6A     		ldr	r2, [r7, #40]
 953 00e0 40F20003 		movw	r3, #:lower16:CPU_CntLeadZerosTbl
 954 00e4 C0F20003 		movt	r3, #:upper16:CPU_CntLeadZerosTbl
 955 00e8 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 956 00ea 03F11803 		add	r3, r3, #24
 957 00ee FB62     		str	r3, [r7, #44]
 958 00f0 6DE0     		b	.L43
 959              	.L37:
1479:C:\Micrium\Software\uC-CPU\cpu_core.c ****             }
1480:C:\Micrium\Software\uC-CPU\cpu_core.c ****         }
1481:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1482:C:\Micrium\Software\uC-CPU\cpu_core.c ****     } else {
1483:C:\Micrium\Software\uC-CPU\cpu_core.c ****         if (val > 0x000000000000FFFFu) {
 960              		.loc 1 1483 0
 961 00f2 D7E90823 		ldrd	r2, [r7, #32]
 962 00f6 4FF6FF70 		movw	r0, #65535
 963 00fa 4FF00001 		mov	r1, #0
 964 00fe 9042     		cmp	r0, r2
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 44


 965 0100 71EB030C 		sbcs	ip, r1, r3
 966 0104 37D2     		bcs	.L44
1484:C:\Micrium\Software\uC-CPU\cpu_core.c ****             if (val > 0x0000000000FFFFFFu) {                                    /* Chk bits [31:24]
 967              		.loc 1 1484 0
 968 0106 D7E90823 		ldrd	r2, [r7, #32]
 969 010a 6FF07F40 		mvn	r0, #-16777216
 970 010e 4FF00001 		mov	r1, #0
 971 0112 9042     		cmp	r0, r2
 972 0114 71EB030C 		sbcs	ip, r1, r3
 973 0118 16D2     		bcs	.L45
1485:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                                 /* .. Nbr lead zero
1486:C:\Micrium\Software\uC-CPU\cpu_core.c ****                 ix             = (CPU_DATA)(val >> 24u);                        /* .. lookup tbl ix
 974              		.loc 1 1486 0
 975 011a 7B6A     		ldr	r3, [r7, #36]
 976 011c 4FEA0323 		lsl	r3, r3, #8
 977 0120 3A6A     		ldr	r2, [r7, #32]
 978 0122 4FEA126A 		lsr	sl, r2, #24
 979 0126 43EA0A0A 		orr	sl, r3, sl
 980 012a 7B6A     		ldr	r3, [r7, #36]
 981 012c 4FEA136B 		lsr	fp, r3, #24
 982 0130 5346     		mov	r3, sl
 983 0132 BB62     		str	r3, [r7, #40]
1487:C:\Micrium\Software\uC-CPU\cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 32u);     /* .. plus nbr msb 
 984              		.loc 1 1487 0
 985 0134 BA6A     		ldr	r2, [r7, #40]
 986 0136 40F20003 		movw	r3, #:lower16:CPU_CntLeadZerosTbl
 987 013a C0F20003 		movt	r3, #:upper16:CPU_CntLeadZerosTbl
 988 013e 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 989 0140 03F12003 		add	r3, r3, #32
 990 0144 FB62     		str	r3, [r7, #44]
1488:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1489:C:\Micrium\Software\uC-CPU\cpu_core.c ****             } else {                                                            /* Chk bits [23:16]
1490:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                                 /* .. Nbr lead zero
1491:C:\Micrium\Software\uC-CPU\cpu_core.c ****                 ix             = (CPU_DATA)(val >> 16u);                        /* .. lookup tbl ix
1492:C:\Micrium\Software\uC-CPU\cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 40u);     /* .. plus nbr msb 
 991              		.loc 1 1492 0
 992 0146 42E0     		b	.L43
 993              	.L45:
 994              		.loc 1 1491 0
 995 0148 7B6A     		ldr	r3, [r7, #36]
 996 014a 4FEA0343 		lsl	r3, r3, #16
 997 014e 3A6A     		ldr	r2, [r7, #32]
 998 0150 4FEA1248 		lsr	r8, r2, #16
 999 0154 43EA0808 		orr	r8, r3, r8
 1000 0158 7B6A     		ldr	r3, [r7, #36]
 1001 015a 4FEA1349 		lsr	r9, r3, #16
 1002 015e 4346     		mov	r3, r8
 1003 0160 BB62     		str	r3, [r7, #40]
 1004              		.loc 1 1492 0
 1005 0162 BA6A     		ldr	r2, [r7, #40]
 1006 0164 40F20003 		movw	r3, #:lower16:CPU_CntLeadZerosTbl
 1007 0168 C0F20003 		movt	r3, #:upper16:CPU_CntLeadZerosTbl
 1008 016c 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1009 016e 03F12803 		add	r3, r3, #40
 1010 0172 FB62     		str	r3, [r7, #44]
 1011 0174 2BE0     		b	.L43
 1012              	.L44:
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 45


1493:C:\Micrium\Software\uC-CPU\cpu_core.c ****             }
1494:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1495:C:\Micrium\Software\uC-CPU\cpu_core.c ****         } else {
1496:C:\Micrium\Software\uC-CPU\cpu_core.c ****             if (val > 0x00000000000000FFu) {                                    /* Chk bits [15:08]
 1013              		.loc 1 1496 0
 1014 0176 D7E90823 		ldrd	r2, [r7, #32]
 1015 017a 4FF0FF00 		mov	r0, #255
 1016 017e 4FF00001 		mov	r1, #0
 1017 0182 9042     		cmp	r0, r2
 1018 0184 71EB030C 		sbcs	ip, r1, r3
 1019 0188 16D2     		bcs	.L47
1497:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                                 /* .. Nbr lead zero
1498:C:\Micrium\Software\uC-CPU\cpu_core.c ****                 ix             = (CPU_DATA)(val >>  8u);                        /* .. lookup tbl ix
 1020              		.loc 1 1498 0
 1021 018a 7B6A     		ldr	r3, [r7, #36]
 1022 018c 4FEA0363 		lsl	r3, r3, #24
 1023 0190 3A6A     		ldr	r2, [r7, #32]
 1024 0192 4FEA1224 		lsr	r4, r2, #8
 1025 0196 43EA0404 		orr	r4, r3, r4
 1026 019a 7B6A     		ldr	r3, [r7, #36]
 1027 019c 4FEA1325 		lsr	r5, r3, #8
 1028 01a0 2346     		mov	r3, r4
 1029 01a2 BB62     		str	r3, [r7, #40]
1499:C:\Micrium\Software\uC-CPU\cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 48u);     /* .. plus nbr msb 
 1030              		.loc 1 1499 0
 1031 01a4 BA6A     		ldr	r2, [r7, #40]
 1032 01a6 40F20003 		movw	r3, #:lower16:CPU_CntLeadZerosTbl
 1033 01aa C0F20003 		movt	r3, #:upper16:CPU_CntLeadZerosTbl
 1034 01ae 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1035 01b0 03F13003 		add	r3, r3, #48
 1036 01b4 FB62     		str	r3, [r7, #44]
 1037 01b6 0AE0     		b	.L43
 1038              	.L47:
1500:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1501:C:\Micrium\Software\uC-CPU\cpu_core.c ****             } else {                                                            /* Chk bits [07:00]
1502:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                                 /* .. Nbr lead zero
1503:C:\Micrium\Software\uC-CPU\cpu_core.c ****                 ix             = (CPU_DATA)(val >>  0u);                        /* .. lookup tbl ix
 1039              		.loc 1 1503 0
 1040 01b8 3B6A     		ldr	r3, [r7, #32]
 1041 01ba BB62     		str	r3, [r7, #40]
1504:C:\Micrium\Software\uC-CPU\cpu_core.c ****                 nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 56u);     /* .. plus nbr msb 
 1042              		.loc 1 1504 0
 1043 01bc BA6A     		ldr	r2, [r7, #40]
 1044 01be 40F20003 		movw	r3, #:lower16:CPU_CntLeadZerosTbl
 1045 01c2 C0F20003 		movt	r3, #:upper16:CPU_CntLeadZerosTbl
 1046 01c6 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 1047 01c8 03F13803 		add	r3, r3, #56
 1048 01cc FB62     		str	r3, [r7, #44]
 1049              	.L43:
1505:C:\Micrium\Software\uC-CPU\cpu_core.c ****             }
1506:C:\Micrium\Software\uC-CPU\cpu_core.c ****         }
1507:C:\Micrium\Software\uC-CPU\cpu_core.c ****     }
1508:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
1509:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1510:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1511:C:\Micrium\Software\uC-CPU\cpu_core.c ****     return (nbr_lead_zeros);
 1050              		.loc 1 1511 0
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 46


 1051 01ce FB6A     		ldr	r3, [r7, #44]
1512:C:\Micrium\Software\uC-CPU\cpu_core.c **** }
 1052              		.loc 1 1512 0
 1053 01d0 1846     		mov	r0, r3
 1054 01d2 07F13407 		add	r7, r7, #52
 1055 01d6 BD46     		mov	sp, r7
 1056 01d8 BDE8B00F 		pop	{r4, r5, r7, r8, r9, sl, fp}
 1057 01dc 7047     		bx	lr
 1058              		.cfi_endproc
 1059              	.LFE12:
 1060              		.size	CPU_CntLeadZeros64, .-CPU_CntLeadZeros64
 1061 01de 00BF     		.section	.text.CPU_CntTrailZeros08,"ax",%progbits
 1062              		.align	2
 1063              		.global	CPU_CntTrailZeros08
 1064              		.thumb
 1065              		.thumb_func
 1066              		.type	CPU_CntTrailZeros08, %function
 1067              	CPU_CntTrailZeros08:
 1068              	.LFB13:
1513:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
1514:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1515:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1516:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*$PAGE*/
1517:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
1518:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
1519:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                         CPU_CntTrailZeros()
1520:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1521:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Description : Count the number of contiguous, least-significant, trailing zero bits in a data val
1522:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1523:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Argument(s) : val         Data value to count trailing zero bits.
1524:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1525:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Return(s)   : Number of contiguous, least-significant, trailing zero bits in 'val'.
1526:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1527:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Caller(s)   : Application.
1528:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1529:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1530:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               be called by application function(s).
1531:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1532:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Note(s)     : (1) (a) Supports the following data value sizes :
1533:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1534:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       (1)  8-bits
1535:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       (2) 16-bits
1536:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       (3) 32-bits
1537:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       (4) 64-bits
1538:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1539:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       See also 'cpu_def.h  CPU WORD CONFIGURATION  Note #1'.
1540:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1541:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   (b) (1) For  8-bit values :
1542:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1543:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                  b07  b06  b05  b04  b03  b02  b01  b00    # Trailing Zeros
1544:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                  ---  ---  ---  ---  ---  ---  ---  ---    ----------------
1545:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   x    x    x    x    x    x    x    1            0
1546:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   x    x    x    x    x    x    1    0            1
1547:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   x    x    x    x    x    1    0    0            2
1548:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   x    x    x    x    1    0    0    0            3
1549:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   x    x    x    1    0    0    0    0            4
1550:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   x    x    1    0    0    0    0    0            5
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 47


1551:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   x    1    0    0    0    0    0    0            6
1552:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   1    0    0    0    0    0    0    0            7
1553:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                   0    0    0    0    0    0    0    0            8
1554:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1555:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1556:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       (2) For 16-bit values :
1557:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1558:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                             b15  b14  b13  b12  b11  ...  b02  b01  b00    # Trailing Zeros
1559:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                             ---  ---  ---  ---  ---       ---  ---  ---    ----------------
1560:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              x    x    x    x    x         x    x    1            0
1561:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              x    x    x    x    x         x    1    0            1
1562:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              x    x    x    x    x         1    0    0            2
1563:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              :    :    :    :    :         :    :    :            :
1564:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              :    :    :    :    :         :    :    :            :
1565:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              x    x    x    x    1         0    0    0           11
1566:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              x    x    x    1    0         0    0    0           12
1567:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              x    x    1    0    0         0    0    0           13
1568:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              x    1    0    0    0         0    0    0           14
1569:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              1    0    0    0    0         0    0    0           15
1570:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              0    0    0    0    0         0    0    0           16
1571:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1572:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1573:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       (3) For 32-bit values :
1574:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1575:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                             b31  b30  b29  b28  b27  ...  b02  b01  b00    # Trailing Zeros
1576:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                             ---  ---  ---  ---  ---       ---  ---  ---    ----------------
1577:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              x    x    x    x    x         x    x    1            0
1578:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              x    x    x    x    x         x    1    0            1
1579:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              x    x    x    x    x         1    0    0            2
1580:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              :    :    :    :    :         :    :    :            :
1581:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              :    :    :    :    :         :    :    :            :
1582:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              x    x    x    x    1         0    0    0           27
1583:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              x    x    x    1    0         0    0    0           28
1584:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              x    x    1    0    0         0    0    0           29
1585:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              x    1    0    0    0         0    0    0           30
1586:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              1    0    0    0    0         0    0    0           31
1587:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              0    0    0    0    0         0    0    0           32
1588:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1589:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1590:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       (4) For 64-bit values :
1591:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1592:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                             b63  b62  b61  b60  b59  ...  b02  b01  b00    # Trailing Zeros
1593:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                             ---  ---  ---  ---  ---       ---  ---  ---    ----------------
1594:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              x    x    x    x    x         x    x    1            0
1595:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              x    x    x    x    x         x    1    0            1
1596:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              x    x    x    x    x         1    0    0            2
1597:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              :    :    :    :    :         :    :    :            :
1598:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              :    :    :    :    :         :    :    :            :
1599:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              x    x    x    x    1         0    0    0           59
1600:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              x    x    x    1    0         0    0    0           60
1601:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              x    x    1    0    0         0    0    0           61
1602:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              x    1    0    0    0         0    0    0           62
1603:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              1    0    0    0    0         0    0    0           63
1604:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                              0    0    0    0    0         0    0    0           64
1605:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1606:C:\Micrium\Software\uC-CPU\cpu_core.c **** *$PAGE*
1607:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               (2) For non-zero values, the returned number of contiguous, least-significant, trai
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 48


1608:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   zero bits is also equivalent to the bit position of the least-significant set b
1609:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1610:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               (3) 'val' SHOULD be validated for non-'0' PRIOR to all other counting zero calculat
1611:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1612:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   (a) CPU_CntTrailZeros()'s final conditional statement calculates 'val's number 
1613:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       trailing zeros based on its return data size, 'CPU_CFG_DATA_SIZE', & 'val's
1614:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       calculated number of lead zeros ONLY if the initial 'val' is non-'0' :
1615:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1616:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           if (val != 0u) {
1617:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               nbr_trail_zeros = ((CPU_CFG_DATA_SIZE * DEF_OCTET_NBR_BITS) - 1u) -
1618:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           } else {
1619:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               nbr_trail_zeros = nbr_lead_zeros;
1620:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           }
1621:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1622:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       Therefore, initially validating all non-'0' values avoids having to conditi
1623:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       execute the final 'if' statement.
1624:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
1625:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
1626:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1627:C:\Micrium\Software\uC-CPU\cpu_core.c **** #ifndef   CPU_CFG_TRAIL_ZEROS_ASM_PRESENT
1628:C:\Micrium\Software\uC-CPU\cpu_core.c **** CPU_DATA  CPU_CntTrailZeros (CPU_DATA  val)
1629:C:\Micrium\Software\uC-CPU\cpu_core.c **** {
1630:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_DATA  val_bit_mask;
1631:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_DATA  nbr_lead_zeros;
1632:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_DATA  nbr_trail_zeros;
1633:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1634:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1635:C:\Micrium\Software\uC-CPU\cpu_core.c ****     if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see 
1636:C:\Micrium\Software\uC-CPU\cpu_core.c ****         return (CPU_CFG_DATA_SIZE * DEF_OCTET_NBR_BITS);
1637:C:\Micrium\Software\uC-CPU\cpu_core.c ****     }
1638:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1639:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1640:C:\Micrium\Software\uC-CPU\cpu_core.c ****     val_bit_mask    = val & ((CPU_DATA)~val + 1u);              /* Zero/clr all bits EXCEPT least-s
1641:C:\Micrium\Software\uC-CPU\cpu_core.c ****     nbr_lead_zeros  = CPU_CntLeadZeros(val_bit_mask);           /* Cnt  nbr lead  0s.              
1642:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                 /* Calc nbr trail 0s = (nbr val bit
1643:C:\Micrium\Software\uC-CPU\cpu_core.c ****     nbr_trail_zeros = ((CPU_CFG_DATA_SIZE * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
1644:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1645:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1646:C:\Micrium\Software\uC-CPU\cpu_core.c ****     return (nbr_trail_zeros);
1647:C:\Micrium\Software\uC-CPU\cpu_core.c **** }
1648:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
1649:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1650:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1651:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*$PAGE*/
1652:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
1653:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
1654:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                        CPU_CntTrailZeros08()
1655:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1656:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Description : Count the number of contiguous, least-significant, trailing zero bits in an 8-bit d
1657:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1658:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Argument(s) : val         Data value to count trailing zero bits.
1659:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1660:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Return(s)   : Number of contiguous, least-significant, trailing zero bits in 'val'.
1661:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1662:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Caller(s)   : Application.
1663:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1664:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 49


1665:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               called by application function(s).
1666:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1667:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Note(s)     : (1) Supports  8-bit values :
1668:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1669:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               b07  b06  b05  b04  b03  b02  b01  b00    # Trailing Zeros
1670:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               ---  ---  ---  ---  ---  ---  ---  ---    ----------------
1671:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                x    x    x    x    x    x    x    1            0
1672:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                x    x    x    x    x    x    1    0            1
1673:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                x    x    x    x    x    1    0    0            2
1674:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                x    x    x    x    1    0    0    0            3
1675:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                x    x    x    1    0    0    0    0            4
1676:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                x    x    1    0    0    0    0    0            5
1677:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                x    1    0    0    0    0    0    0            6
1678:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                1    0    0    0    0    0    0    0            7
1679:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                0    0    0    0    0    0    0    0            8
1680:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1681:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1682:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               (2) For non-zero values, the returned number of contiguous, least-significant, trai
1683:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   zero bits is also equivalent to the bit position of the least-significant set b
1684:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1685:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               (3) 'val' SHOULD be validated for non-'0' PRIOR to all other counting zero calculat
1686:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1687:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   (a) For assembly-optimized implementations, CPU_CntTrailZeros() returns 'val's 
1688:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       number of trailing zeros via CPU's native data size, 'CPU_CFG_DATA_SIZE'.  
1689:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       If the returned number of zeros exceeds CPU_CntTrailZeros08()'s  8-bit retu
1690:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       data size, then the returned number of zeros must be offset by the differen
1691:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       between CPU_CntTrailZeros()'s  & CPU_CntTrailZeros08()'s return data size :
1692:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1693:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
1694:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           if (nbr_trail_zeros >  (CPU_WORD_SIZE_08  * DEF_OCTET_NBR_BITS)) {
1695:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               nbr_trail_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_08) * DEF_OCT
1696:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           }
1697:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1698:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       However, this ONLY occurs for an initial 'val' of '0' since all non-'0'  8-
1699:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       values would return a number of trailing zeros less than or equal to  8 bit
1700:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1701:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       Therefore, initially validating all non-'0' values prior to calling assembl
1702:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       optimized CPU_CntTrailZeros() avoids having to offset the number of returne
1703:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       trailing zeros by the difference in CPU data size and  8-bit data value bit
1704:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1705:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   (b) For CPU_CntTrailZeros08()'s C implementation, the final conditional stateme
1706:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       calculates 'val's number of trailing zeros based on CPU_CntTrailZeros08()'s
1707:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                        8-bit return data size & 'val's calculated number of lead zeros ONLY if th
1708:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       initial 'val' is non-'0' :
1709:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1710:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           if (val != 0u) {
1711:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               nbr_trail_zeros = ((CPU_WORD_SIZE_08 * DEF_OCTET_NBR_BITS) - 1u) - 
1712:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           } else {
1713:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               nbr_trail_zeros = nbr_lead_zeros;
1714:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           }
1715:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1716:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       Therefore, initially validating all non-'0' values avoids having to conditi
1717:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       execute the final 'if' statement.
1718:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
1719:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
1720:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*$PAGE*/
1721:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_08)
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 50


1722:C:\Micrium\Software\uC-CPU\cpu_core.c **** CPU_DATA  CPU_CntTrailZeros08 (CPU_INT08U  val)
1723:C:\Micrium\Software\uC-CPU\cpu_core.c **** {
 1069              		.loc 1 1723 0
 1070              		.cfi_startproc
 1071              		@ args = 0, pretend = 0, frame = 16
 1072              		@ frame_needed = 1, uses_anonymous_args = 0
 1073 0000 80B5     		push	{r7, lr}
 1074              	.LCFI36:
 1075              		.cfi_def_cfa_offset 8
 1076 0002 84B0     		sub	sp, sp, #16
 1077              	.LCFI37:
 1078              		.cfi_def_cfa_offset 24
 1079 0004 00AF     		add	r7, sp, #0
 1080              		.cfi_offset 14, -4
 1081              		.cfi_offset 7, -8
 1082              	.LCFI38:
 1083              		.cfi_def_cfa_register 7
 1084 0006 0346     		mov	r3, r0
 1085 0008 FB71     		strb	r3, [r7, #7]
1724:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
1725:C:\Micrium\Software\uC-CPU\cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08)))
1726:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_INT08U  val_bit_mask;
1727:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_DATA    nbr_lead_zeros;
1728:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
1729:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_DATA    nbr_trail_zeros;
1730:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1731:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1732:C:\Micrium\Software\uC-CPU\cpu_core.c ****     if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see 
 1086              		.loc 1 1732 0
 1087 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1088 000c 002B     		cmp	r3, #0
 1089 000e 02D1     		bne	.L50
1733:C:\Micrium\Software\uC-CPU\cpu_core.c ****         return (CPU_WORD_SIZE_08 * DEF_OCTET_NBR_BITS);
 1090              		.loc 1 1733 0
 1091 0010 4FF00803 		mov	r3, #8
 1092 0014 06E0     		b	.L51
 1093              	.L50:
1734:C:\Micrium\Software\uC-CPU\cpu_core.c ****     }
1735:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1736:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                 /* ------------------ ASM-OPTIMIZED
1737:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
1738:C:\Micrium\Software\uC-CPU\cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08))
1739:C:\Micrium\Software\uC-CPU\cpu_core.c ****     nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
 1094              		.loc 1 1739 0
 1095 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1096 0018 1846     		mov	r0, r3
 1097 001a FFF7FEFF 		bl	CPU_CntTrailZeros
 1098 001e 0346     		mov	r3, r0
 1099 0020 FB60     		str	r3, [r7, #12]
1740:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1741:C:\Micrium\Software\uC-CPU\cpu_core.c **** #else                                                           /* ------------------- C-OPTIMIZED 
1742:C:\Micrium\Software\uC-CPU\cpu_core.c ****     val_bit_mask    = val & ((CPU_INT08U)~val + 1u);            /* Zero/clr all bits EXCEPT least-s
1743:C:\Micrium\Software\uC-CPU\cpu_core.c ****     nbr_lead_zeros  = CPU_CntLeadZeros08(val_bit_mask);         /* Cnt  nbr lead  0s.              
1744:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                 /* Calc nbr trail 0s = (nbr val bit
1745:C:\Micrium\Software\uC-CPU\cpu_core.c ****     nbr_trail_zeros = ((CPU_WORD_SIZE_08 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
1746:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
1747:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 51


1748:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1749:C:\Micrium\Software\uC-CPU\cpu_core.c ****     return (nbr_trail_zeros);
 1100              		.loc 1 1749 0
 1101 0022 FB68     		ldr	r3, [r7, #12]
 1102              	.L51:
1750:C:\Micrium\Software\uC-CPU\cpu_core.c **** }
 1103              		.loc 1 1750 0
 1104 0024 1846     		mov	r0, r3
 1105 0026 07F11007 		add	r7, r7, #16
 1106 002a BD46     		mov	sp, r7
 1107 002c 80BD     		pop	{r7, pc}
 1108              		.cfi_endproc
 1109              	.LFE13:
 1110              		.size	CPU_CntTrailZeros08, .-CPU_CntTrailZeros08
 1111 002e 00BF     		.section	.text.CPU_CntTrailZeros16,"ax",%progbits
 1112              		.align	2
 1113              		.global	CPU_CntTrailZeros16
 1114              		.thumb
 1115              		.thumb_func
 1116              		.type	CPU_CntTrailZeros16, %function
 1117              	CPU_CntTrailZeros16:
 1118              	.LFB14:
1751:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
1752:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1753:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1754:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*$PAGE*/
1755:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
1756:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
1757:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                        CPU_CntTrailZeros16()
1758:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1759:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Description : Count the number of contiguous, least-significant, trailing zero bits in a 16-bit d
1760:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1761:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Argument(s) : val         Data value to count trailing zero bits.
1762:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1763:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Return(s)   : Number of contiguous, least-significant, trailing zero bits in 'val'.
1764:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1765:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Caller(s)   : Application.
1766:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1767:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1768:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               called by application function(s).
1769:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1770:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Note(s)     : (1) Supports 16-bit values :
1771:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1772:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                          b15  b14  b13  b12  b11  ...  b02  b01  b00    # Trailing Zeros
1773:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                          ---  ---  ---  ---  ---       ---  ---  ---    ----------------
1774:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           x    x    x    x    x         x    x    1            0
1775:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           x    x    x    x    x         x    1    0            1
1776:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           x    x    x    x    x         1    0    0            2
1777:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           :    :    :    :    :         :    :    :            :
1778:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           :    :    :    :    :         :    :    :            :
1779:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           x    x    x    x    1         0    0    0           11
1780:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           x    x    x    1    0         0    0    0           12
1781:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           x    x    1    0    0         0    0    0           13
1782:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           x    1    0    0    0         0    0    0           14
1783:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           1    0    0    0    0         0    0    0           15
1784:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           0    0    0    0    0         0    0    0           16
1785:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 52


1786:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1787:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               (2) For non-zero values, the returned number of contiguous, least-significant, trai
1788:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   zero bits is also equivalent to the bit position of the least-significant set b
1789:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1790:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               (3) 'val' SHOULD be validated for non-'0' PRIOR to all other counting zero calculat
1791:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1792:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   (a) For assembly-optimized implementations, CPU_CntTrailZeros() returns 'val's 
1793:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       number of trailing zeros via CPU's native data size, 'CPU_CFG_DATA_SIZE'.  
1794:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       If the returned number of zeros exceeds CPU_CntTrailZeros16()'s 16-bit retu
1795:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       data size, then the returned number of zeros must be offset by the differen
1796:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       between CPU_CntTrailZeros()'s  & CPU_CntTrailZeros16()'s return data size :
1797:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1798:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
1799:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           if (nbr_trail_zeros >  (CPU_WORD_SIZE_16  * DEF_OCTET_NBR_BITS)) {
1800:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               nbr_trail_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_16) * DEF_OCT
1801:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           }
1802:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1803:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       However, this ONLY occurs for an initial 'val' of '0' since all non-'0' 16-
1804:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       values would return a number of trailing zeros less than or equal to 16 bit
1805:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1806:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       Therefore, initially validating all non-'0' values prior to calling assembl
1807:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       optimized CPU_CntTrailZeros() avoids having to offset the number of returne
1808:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       trailing zeros by the difference in CPU data size and 16-bit data value bit
1809:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1810:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   (b) For CPU_CntTrailZeros16()'s C implementation, the final conditional stateme
1811:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       calculates 'val's number of trailing zeros based on CPU_CntTrailZeros16()'s
1812:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       16-bit return data size & 'val's calculated number of lead zeros ONLY if th
1813:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       initial 'val' is non-'0' :
1814:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1815:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           if (val != 0u) {
1816:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               nbr_trail_zeros = ((CPU_WORD_SIZE_16 * DEF_OCTET_NBR_BITS) - 1u) - 
1817:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           } else {
1818:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               nbr_trail_zeros = nbr_lead_zeros;
1819:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           }
1820:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1821:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       Therefore, initially validating all non-'0' values avoids having to conditi
1822:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       execute the final 'if' statement.
1823:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
1824:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
1825:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*$PAGE*/
1826:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_16)
1827:C:\Micrium\Software\uC-CPU\cpu_core.c **** CPU_DATA  CPU_CntTrailZeros16 (CPU_INT16U  val)
1828:C:\Micrium\Software\uC-CPU\cpu_core.c **** {
 1119              		.loc 1 1828 0
 1120              		.cfi_startproc
 1121              		@ args = 0, pretend = 0, frame = 16
 1122              		@ frame_needed = 1, uses_anonymous_args = 0
 1123 0000 80B5     		push	{r7, lr}
 1124              	.LCFI39:
 1125              		.cfi_def_cfa_offset 8
 1126 0002 84B0     		sub	sp, sp, #16
 1127              	.LCFI40:
 1128              		.cfi_def_cfa_offset 24
 1129 0004 00AF     		add	r7, sp, #0
 1130              		.cfi_offset 14, -4
 1131              		.cfi_offset 7, -8
 1132              	.LCFI41:
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 53


 1133              		.cfi_def_cfa_register 7
 1134 0006 0346     		mov	r3, r0
 1135 0008 FB80     		strh	r3, [r7, #6]	@ movhi
1829:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
1830:C:\Micrium\Software\uC-CPU\cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16)))
1831:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_INT16U  val_bit_mask;
1832:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_DATA    nbr_lead_zeros;
1833:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
1834:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_DATA    nbr_trail_zeros;
1835:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1836:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1837:C:\Micrium\Software\uC-CPU\cpu_core.c ****     if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see 
 1136              		.loc 1 1837 0
 1137 000a FB88     		ldrh	r3, [r7, #6]
 1138 000c 002B     		cmp	r3, #0
 1139 000e 02D1     		bne	.L54
1838:C:\Micrium\Software\uC-CPU\cpu_core.c ****         return (CPU_WORD_SIZE_16 * DEF_OCTET_NBR_BITS);
 1140              		.loc 1 1838 0
 1141 0010 4FF01003 		mov	r3, #16
 1142 0014 06E0     		b	.L55
 1143              	.L54:
1839:C:\Micrium\Software\uC-CPU\cpu_core.c ****     }
1840:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1841:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                 /* ------------------ ASM-OPTIMIZED
1842:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
1843:C:\Micrium\Software\uC-CPU\cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16))
1844:C:\Micrium\Software\uC-CPU\cpu_core.c ****     nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
 1144              		.loc 1 1844 0
 1145 0016 FB88     		ldrh	r3, [r7, #6]
 1146 0018 1846     		mov	r0, r3
 1147 001a FFF7FEFF 		bl	CPU_CntTrailZeros
 1148 001e 0346     		mov	r3, r0
 1149 0020 FB60     		str	r3, [r7, #12]
1845:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1846:C:\Micrium\Software\uC-CPU\cpu_core.c **** #else                                                           /* ------------------- C-OPTIMIZED 
1847:C:\Micrium\Software\uC-CPU\cpu_core.c ****     val_bit_mask    = val & ((CPU_INT16U)~val + 1u);            /* Zero/clr all bits EXCEPT least-s
1848:C:\Micrium\Software\uC-CPU\cpu_core.c ****     nbr_lead_zeros  = CPU_CntLeadZeros16(val_bit_mask);         /* Cnt  nbr lead  0s.              
1849:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                 /* Calc nbr trail 0s = (nbr val bit
1850:C:\Micrium\Software\uC-CPU\cpu_core.c ****     nbr_trail_zeros = ((CPU_WORD_SIZE_16 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
1851:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
1852:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1853:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1854:C:\Micrium\Software\uC-CPU\cpu_core.c ****     return (nbr_trail_zeros);
 1150              		.loc 1 1854 0
 1151 0022 FB68     		ldr	r3, [r7, #12]
 1152              	.L55:
1855:C:\Micrium\Software\uC-CPU\cpu_core.c **** }
 1153              		.loc 1 1855 0
 1154 0024 1846     		mov	r0, r3
 1155 0026 07F11007 		add	r7, r7, #16
 1156 002a BD46     		mov	sp, r7
 1157 002c 80BD     		pop	{r7, pc}
 1158              		.cfi_endproc
 1159              	.LFE14:
 1160              		.size	CPU_CntTrailZeros16, .-CPU_CntTrailZeros16
 1161 002e 00BF     		.section	.text.CPU_CntTrailZeros32,"ax",%progbits
 1162              		.align	2
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 54


 1163              		.global	CPU_CntTrailZeros32
 1164              		.thumb
 1165              		.thumb_func
 1166              		.type	CPU_CntTrailZeros32, %function
 1167              	CPU_CntTrailZeros32:
 1168              	.LFB15:
1856:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
1857:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1858:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1859:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*$PAGE*/
1860:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
1861:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
1862:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                        CPU_CntTrailZeros32()
1863:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1864:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Description : Count the number of contiguous, least-significant, trailing zero bits in a 32-bit d
1865:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1866:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Argument(s) : val         Data value to count trailing zero bits.
1867:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1868:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Return(s)   : Number of contiguous, least-significant, trailing zero bits in 'val'.
1869:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1870:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Caller(s)   : Application.
1871:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1872:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1873:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               called by application function(s).
1874:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1875:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Note(s)     : (1) Supports 32-bit values :
1876:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1877:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                          b31  b30  b29  b28  b27  ...  b02  b01  b00    # Trailing Zeros
1878:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                          ---  ---  ---  ---  ---       ---  ---  ---    ----------------
1879:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           x    x    x    x    x         x    x    1            0
1880:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           x    x    x    x    x         x    1    0            1
1881:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           x    x    x    x    x         1    0    0            2
1882:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           :    :    :    :    :         :    :    :            :
1883:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           :    :    :    :    :         :    :    :            :
1884:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           x    x    x    x    1         0    0    0           27
1885:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           x    x    x    1    0         0    0    0           28
1886:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           x    x    1    0    0         0    0    0           29
1887:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           x    1    0    0    0         0    0    0           30
1888:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           1    0    0    0    0         0    0    0           31
1889:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           0    0    0    0    0         0    0    0           32
1890:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1891:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1892:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               (2) For non-zero values, the returned number of contiguous, least-significant, trai
1893:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   zero bits is also equivalent to the bit position of the least-significant set b
1894:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1895:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               (3) 'val' SHOULD be validated for non-'0' PRIOR to all other counting zero calculat
1896:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1897:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   (a) For assembly-optimized implementations, CPU_CntTrailZeros() returns 'val's 
1898:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       number of trailing zeros via CPU's native data size, 'CPU_CFG_DATA_SIZE'.  
1899:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       If the returned number of zeros exceeds CPU_CntTrailZeros32()'s 32-bit retu
1900:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       data size, then the returned number of zeros must be offset by the differen
1901:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       between CPU_CntTrailZeros()'s  & CPU_CntTrailZeros32()'s return data size :
1902:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1903:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
1904:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           if (nbr_trail_zeros >  (CPU_WORD_SIZE_32  * DEF_OCTET_NBR_BITS)) {
1905:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               nbr_trail_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_32) * DEF_OCT
1906:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           }
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 55


1907:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1908:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       However, this ONLY occurs for an initial 'val' of '0' since all non-'0' 32-
1909:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       values would return a number of trailing zeros less than or equal to 32 bit
1910:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1911:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       Therefore, initially validating all non-'0' values prior to calling assembl
1912:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       optimized CPU_CntTrailZeros() avoids having to offset the number of returne
1913:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       trailing zeros by the difference in CPU data size and 32-bit data value bit
1914:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1915:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   (b) For CPU_CntTrailZeros32()'s C implementation, the final conditional stateme
1916:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       calculates 'val's number of trailing zeros based on CPU_CntTrailZeros32()'s
1917:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       32-bit return data size & 'val's calculated number of lead zeros ONLY if th
1918:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       initial 'val' is non-'0' :
1919:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1920:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           if (val != 0u) {
1921:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               nbr_trail_zeros = ((CPU_WORD_SIZE_32 * DEF_OCTET_NBR_BITS) - 1u) - 
1922:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           } else {
1923:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               nbr_trail_zeros = nbr_lead_zeros;
1924:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           }
1925:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1926:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       Therefore, initially validating all non-'0' values avoids having to conditi
1927:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       execute the final 'if' statement.
1928:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
1929:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
1930:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*$PAGE*/
1931:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_32)
1932:C:\Micrium\Software\uC-CPU\cpu_core.c **** CPU_DATA  CPU_CntTrailZeros32 (CPU_INT32U  val)
1933:C:\Micrium\Software\uC-CPU\cpu_core.c **** {
 1169              		.loc 1 1933 0
 1170              		.cfi_startproc
 1171              		@ args = 0, pretend = 0, frame = 16
 1172              		@ frame_needed = 1, uses_anonymous_args = 0
 1173 0000 80B5     		push	{r7, lr}
 1174              	.LCFI42:
 1175              		.cfi_def_cfa_offset 8
 1176 0002 84B0     		sub	sp, sp, #16
 1177              	.LCFI43:
 1178              		.cfi_def_cfa_offset 24
 1179 0004 00AF     		add	r7, sp, #0
 1180              		.cfi_offset 14, -4
 1181              		.cfi_offset 7, -8
 1182              	.LCFI44:
 1183              		.cfi_def_cfa_register 7
 1184 0006 7860     		str	r0, [r7, #4]
1934:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
1935:C:\Micrium\Software\uC-CPU\cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32)))
1936:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_INT32U  val_bit_mask;
1937:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_DATA    nbr_lead_zeros;
1938:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
1939:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_DATA    nbr_trail_zeros;
1940:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1941:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1942:C:\Micrium\Software\uC-CPU\cpu_core.c ****     if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see 
 1185              		.loc 1 1942 0
 1186 0008 7B68     		ldr	r3, [r7, #4]
 1187 000a 002B     		cmp	r3, #0
 1188 000c 02D1     		bne	.L58
1943:C:\Micrium\Software\uC-CPU\cpu_core.c ****         return (CPU_WORD_SIZE_32 * DEF_OCTET_NBR_BITS);
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 56


 1189              		.loc 1 1943 0
 1190 000e 4FF02003 		mov	r3, #32
 1191 0012 05E0     		b	.L59
 1192              	.L58:
1944:C:\Micrium\Software\uC-CPU\cpu_core.c ****     }
1945:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1946:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                 /* ------------------ ASM-OPTIMIZED
1947:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
1948:C:\Micrium\Software\uC-CPU\cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32))
1949:C:\Micrium\Software\uC-CPU\cpu_core.c ****     nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
 1193              		.loc 1 1949 0
 1194 0014 7868     		ldr	r0, [r7, #4]
 1195 0016 FFF7FEFF 		bl	CPU_CntTrailZeros
 1196 001a 0346     		mov	r3, r0
 1197 001c FB60     		str	r3, [r7, #12]
1950:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1951:C:\Micrium\Software\uC-CPU\cpu_core.c **** #else                                                           /* ------------------- C-OPTIMIZED 
1952:C:\Micrium\Software\uC-CPU\cpu_core.c ****     val_bit_mask    = val & ((CPU_INT32U)~val + 1u);            /* Zero/clr all bits EXCEPT least-s
1953:C:\Micrium\Software\uC-CPU\cpu_core.c ****     nbr_lead_zeros  = CPU_CntLeadZeros32(val_bit_mask);         /* Cnt  nbr lead  0s.              
1954:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                 /* Calc nbr trail 0s = (nbr val bit
1955:C:\Micrium\Software\uC-CPU\cpu_core.c ****     nbr_trail_zeros = ((CPU_WORD_SIZE_32 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
1956:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
1957:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1958:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1959:C:\Micrium\Software\uC-CPU\cpu_core.c ****     return (nbr_trail_zeros);
 1198              		.loc 1 1959 0
 1199 001e FB68     		ldr	r3, [r7, #12]
 1200              	.L59:
1960:C:\Micrium\Software\uC-CPU\cpu_core.c **** }
 1201              		.loc 1 1960 0
 1202 0020 1846     		mov	r0, r3
 1203 0022 07F11007 		add	r7, r7, #16
 1204 0026 BD46     		mov	sp, r7
 1205 0028 80BD     		pop	{r7, pc}
 1206              		.cfi_endproc
 1207              	.LFE15:
 1208              		.size	CPU_CntTrailZeros32, .-CPU_CntTrailZeros32
 1209 002a 00BF     		.section	.text.CPU_CntTrailZeros64,"ax",%progbits
 1210              		.align	2
 1211              		.global	CPU_CntTrailZeros64
 1212              		.thumb
 1213              		.thumb_func
 1214              		.type	CPU_CntTrailZeros64, %function
 1215              	CPU_CntTrailZeros64:
 1216              	.LFB16:
1961:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
1962:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1963:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
1964:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*$PAGE*/
1965:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
1966:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
1967:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                        CPU_CntTrailZeros64()
1968:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1969:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Description : Count the number of contiguous, least-significant, trailing zero bits in a 64-bit d
1970:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1971:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Argument(s) : val         Data value to count trailing zero bits.
1972:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 57


1973:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Return(s)   : Number of contiguous, least-significant, trailing zero bits in 'val'.
1974:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1975:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Caller(s)   : Application.
1976:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1977:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               This function is a CPU module application programming interface (API) function & MA
1978:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               called by application function(s).
1979:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1980:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Note(s)     : (1) Supports 64-bit values :
1981:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1982:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                          b63  b62  b61  b60  b59  ...  b02  b01  b00    # Trailing Zeros
1983:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                          ---  ---  ---  ---  ---       ---  ---  ---    ----------------
1984:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           x    x    x    x    x         x    x    1            0
1985:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           x    x    x    x    x         x    1    0            1
1986:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           x    x    x    x    x         1    0    0            2
1987:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           :    :    :    :    :         :    :    :            :
1988:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           :    :    :    :    :         :    :    :            :
1989:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           x    x    x    x    1         0    0    0           59
1990:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           x    x    x    1    0         0    0    0           60
1991:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           x    x    1    0    0         0    0    0           61
1992:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           x    1    0    0    0         0    0    0           62
1993:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           1    0    0    0    0         0    0    0           63
1994:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           0    0    0    0    0         0    0    0           64
1995:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1996:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
1997:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               (2) For non-zero values, the returned number of contiguous, least-significant, trai
1998:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   zero bits is also equivalent to the bit position of the least-significant set b
1999:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
2000:C:\Micrium\Software\uC-CPU\cpu_core.c **** *               (3) 'val' SHOULD be validated for non-'0' PRIOR to all other counting zero calculat
2001:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
2002:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   (a) For assembly-optimized implementations, CPU_CntTrailZeros() returns 'val's 
2003:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       number of trailing zeros via CPU's native data size, 'CPU_CFG_DATA_SIZE'.  
2004:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       If the returned number of zeros exceeds CPU_CntTrailZeros64()'s 64-bit retu
2005:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       data size, then the returned number of zeros must be offset by the differen
2006:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       between CPU_CntTrailZeros()'s  & CPU_CntTrailZeros64()'s return data size :
2007:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
2008:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
2009:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           if (nbr_trail_zeros >  (CPU_WORD_SIZE_64  * DEF_OCTET_NBR_BITS)) {
2010:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               nbr_trail_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_64) * DEF_OCT
2011:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           }
2012:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
2013:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       However, this ONLY occurs for an initial 'val' of '0' since all non-'0' 64-
2014:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       values would return a number of trailing zeros less than or equal to 64 bit
2015:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
2016:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       Therefore, initially validating all non-'0' values prior to calling assembl
2017:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       optimized CPU_CntTrailZeros() avoids having to offset the number of returne
2018:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       trailing zeros by the difference in CPU data size and 64-bit data value bit
2019:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
2020:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   (b) For CPU_CntTrailZeros64()'s C implementation, the final conditional stateme
2021:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       calculates 'val's number of trailing zeros based on CPU_CntTrailZeros64()'s
2022:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       64-bit return data size & 'val's calculated number of lead zeros ONLY if th
2023:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       initial 'val' is non-'0' :
2024:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
2025:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           if (val != 0u) {
2026:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               nbr_trail_zeros = ((CPU_WORD_SIZE_64 * DEF_OCTET_NBR_BITS) - 1u) - 
2027:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           } else {
2028:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                               nbr_trail_zeros = nbr_lead_zeros;
2029:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                           }
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 58


2030:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
2031:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       Therefore, initially validating all non-'0' values avoids having to conditi
2032:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                       execute the final 'if' statement.
2033:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
2034:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
2035:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*$PAGE*/
2036:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_64)
2037:C:\Micrium\Software\uC-CPU\cpu_core.c **** CPU_DATA  CPU_CntTrailZeros64 (CPU_INT64U  val)
2038:C:\Micrium\Software\uC-CPU\cpu_core.c **** {
 1217              		.loc 1 2038 0
 1218              		.cfi_startproc
 1219              		@ args = 0, pretend = 0, frame = 24
 1220              		@ frame_needed = 1, uses_anonymous_args = 0
 1221 0000 80B5     		push	{r7, lr}
 1222              	.LCFI45:
 1223              		.cfi_def_cfa_offset 8
 1224 0002 86B0     		sub	sp, sp, #24
 1225              	.LCFI46:
 1226              		.cfi_def_cfa_offset 32
 1227 0004 00AF     		add	r7, sp, #0
 1228              		.cfi_offset 14, -4
 1229              		.cfi_offset 7, -8
 1230              	.LCFI47:
 1231              		.cfi_def_cfa_register 7
 1232 0006 C7E90001 		strd	r0, [r7]
2039:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
2040:C:\Micrium\Software\uC-CPU\cpu_core.c ****         (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64)))
2041:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_INT64U  val_bit_mask;
2042:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_DATA    nbr_lead_zeros;
2043:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
2044:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_DATA    nbr_trail_zeros;
2045:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
2046:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
2047:C:\Micrium\Software\uC-CPU\cpu_core.c ****     if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see 
 1233              		.loc 1 2047 0
 1234 000a D7E90023 		ldrd	r2, [r7]
 1235 000e 52EA0301 		orrs	r1, r2, r3
 1236 0012 02D1     		bne	.L62
2048:C:\Micrium\Software\uC-CPU\cpu_core.c ****         return (CPU_WORD_SIZE_64 * DEF_OCTET_NBR_BITS);
 1237              		.loc 1 2048 0
 1238 0014 4FF04003 		mov	r3, #64
 1239 0018 17E0     		b	.L63
 1240              	.L62:
2049:C:\Micrium\Software\uC-CPU\cpu_core.c ****     }
2050:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
2051:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                 /* ------------------ ASM-OPTIMIZED
2052:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
2053:C:\Micrium\Software\uC-CPU\cpu_core.c ****      (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64))
2054:C:\Micrium\Software\uC-CPU\cpu_core.c ****     nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
2055:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
2056:C:\Micrium\Software\uC-CPU\cpu_core.c **** #else                                                           /* ------------------- C-OPTIMIZED 
2057:C:\Micrium\Software\uC-CPU\cpu_core.c ****     val_bit_mask    = val & ((CPU_INT64U)~val + 1u);            /* Zero/clr all bits EXCEPT least-s
 1241              		.loc 1 2057 0
 1242 001a D7E90023 		ldrd	r2, [r7]
 1243 001e 5042     		negs	r0, r2
 1244 0020 63EB4301 		sbc	r1, r3, r3, lsl #1
 1245 0024 D7E90023 		ldrd	r2, [r7]
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 59


 1246 0028 02EA0002 		and	r2, r2, r0
 1247 002c 03EA0103 		and	r3, r3, r1
 1248 0030 C7E90223 		strd	r2, [r7, #8]
2058:C:\Micrium\Software\uC-CPU\cpu_core.c ****     nbr_lead_zeros  = CPU_CntLeadZeros64(val_bit_mask);         /* Cnt  nbr lead  0s.              
 1249              		.loc 1 2058 0
 1250 0034 D7E90201 		ldrd	r0, [r7, #8]
 1251 0038 FFF7FEFF 		bl	CPU_CntLeadZeros64
 1252 003c 0346     		mov	r3, r0
 1253 003e 3B61     		str	r3, [r7, #16]
2059:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                 /* Calc nbr trail 0s = (nbr val bit
2060:C:\Micrium\Software\uC-CPU\cpu_core.c ****     nbr_trail_zeros = ((CPU_WORD_SIZE_64 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
 1254              		.loc 1 2060 0
 1255 0040 3B69     		ldr	r3, [r7, #16]
 1256 0042 C3F13F03 		rsb	r3, r3, #63
 1257 0046 7B61     		str	r3, [r7, #20]
2061:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
2062:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
2063:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
2064:C:\Micrium\Software\uC-CPU\cpu_core.c ****     return (nbr_trail_zeros);
 1258              		.loc 1 2064 0
 1259 0048 7B69     		ldr	r3, [r7, #20]
 1260              	.L63:
2065:C:\Micrium\Software\uC-CPU\cpu_core.c **** }
 1261              		.loc 1 2065 0
 1262 004a 1846     		mov	r0, r3
 1263 004c 07F11807 		add	r7, r7, #24
 1264 0050 BD46     		mov	sp, r7
 1265 0052 80BD     		pop	{r7, pc}
 1266              		.cfi_endproc
 1267              	.LFE16:
 1268              		.size	CPU_CntTrailZeros64, .-CPU_CntTrailZeros64
 1269              		.section	.text.CPU_NameInit,"ax",%progbits
 1270              		.align	2
 1271              		.thumb
 1272              		.thumb_func
 1273              		.type	CPU_NameInit, %function
 1274              	CPU_NameInit:
 1275              	.LFB17:
2066:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
2067:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
2068:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
2069:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*$PAGE*/
2070:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
2071:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
2072:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
2073:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                           LOCAL FUNCTIONS
2074:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
2075:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
2076:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
2077:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
2078:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
2079:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
2080:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                           CPU_NameInit()
2081:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
2082:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Description : Initialize CPU Name.
2083:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
2084:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Argument(s) : none.
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 60


2085:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
2086:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Return(s)   : none.
2087:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
2088:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Caller(s)   : CPU_Init().
2089:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
2090:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Note(s)     : none.
2091:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
2092:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
2093:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
2094:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if (CPU_CFG_NAME_EN == DEF_ENABLED)
2095:C:\Micrium\Software\uC-CPU\cpu_core.c **** static  void  CPU_NameInit (void)
2096:C:\Micrium\Software\uC-CPU\cpu_core.c **** {
 1276              		.loc 1 2096 0
 1277              		.cfi_startproc
 1278              		@ args = 0, pretend = 0, frame = 0
 1279              		@ frame_needed = 1, uses_anonymous_args = 0
 1280 0000 80B5     		push	{r7, lr}
 1281              	.LCFI48:
 1282              		.cfi_def_cfa_offset 8
 1283 0002 00AF     		add	r7, sp, #0
 1284              		.cfi_offset 14, -4
 1285              		.cfi_offset 7, -8
 1286              	.LCFI49:
 1287              		.cfi_def_cfa_register 7
2097:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_NameClr();
 1288              		.loc 1 2097 0
 1289 0004 FFF7FEFF 		bl	CPU_NameClr
2098:C:\Micrium\Software\uC-CPU\cpu_core.c **** }
 1290              		.loc 1 2098 0
 1291 0008 80BD     		pop	{r7, pc}
 1292              		.cfi_endproc
 1293              	.LFE17:
 1294              		.size	CPU_NameInit, .-CPU_NameInit
 1295 000a 00BF     		.section	.text.CPU_TS_Init,"ax",%progbits
 1296              		.align	2
 1297              		.thumb
 1298              		.thumb_func
 1299              		.type	CPU_TS_Init, %function
 1300              	CPU_TS_Init:
 1301              	.LFB18:
2099:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
2100:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
2101:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
2102:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*$PAGE*/
2103:C:\Micrium\Software\uC-CPU\cpu_core.c **** /*
2104:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
2105:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                            CPU_TS_Init()
2106:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
2107:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Description : (1) Initialize CPU timestamp :
2108:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
2109:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   (a) Initialize/start CPU timestamp timer                            See Note #1
2110:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   (b) Initialize       CPU timestamp controls
2111:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
2112:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
2113:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Argument(s) : none.
2114:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
2115:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Return(s)   : none.
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 61


2116:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
2117:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Caller(s)   : CPU_Init().
2118:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
2119:C:\Micrium\Software\uC-CPU\cpu_core.c **** * Note(s)     : (1) The following initialization MUST be sequenced as follows :
2120:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
2121:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   (a) CPU_TS_TmrFreq_Hz     MUST be initialized prior to CPU_TS_TmrInit()
2122:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   (b) CPU_TS_TmrInit()      SHOULD precede calls to all other CPU timestamp funct
2123:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                                 otherwise, invalid time measurements may be calcu
2124:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                                                 returned.
2125:C:\Micrium\Software\uC-CPU\cpu_core.c **** *
2126:C:\Micrium\Software\uC-CPU\cpu_core.c **** *                   See also 'CPU_Init()  Note #3a'.
2127:C:\Micrium\Software\uC-CPU\cpu_core.c **** ***************************************************************************************************
2128:C:\Micrium\Software\uC-CPU\cpu_core.c **** */
2129:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
2130:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if ((CPU_CFG_TS_EN     == DEF_ENABLED) || \
2131:C:\Micrium\Software\uC-CPU\cpu_core.c ****      (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
2132:C:\Micrium\Software\uC-CPU\cpu_core.c **** static  void  CPU_TS_Init (void)
2133:C:\Micrium\Software\uC-CPU\cpu_core.c **** {
 1302              		.loc 1 2133 0
 1303              		.cfi_startproc
 1304              		@ args = 0, pretend = 0, frame = 0
 1305              		@ frame_needed = 1, uses_anonymous_args = 0
 1306 0000 80B5     		push	{r7, lr}
 1307              	.LCFI50:
 1308              		.cfi_def_cfa_offset 8
 1309 0002 00AF     		add	r7, sp, #0
 1310              		.cfi_offset 14, -4
 1311              		.cfi_offset 7, -8
 1312              	.LCFI51:
 1313              		.cfi_def_cfa_register 7
2134:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if (((CPU_CFG_TS_32_EN    == DEF_ENABLED     )  && \
2135:C:\Micrium\Software\uC-CPU\cpu_core.c ****       (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32)) || \
2136:C:\Micrium\Software\uC-CPU\cpu_core.c ****      ((CPU_CFG_TS_64_EN    == DEF_ENABLED     )  && \
2137:C:\Micrium\Software\uC-CPU\cpu_core.c ****       (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64)))
2138:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_TS_TMR  ts_tmr_cnts;
2139:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
2140:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
2141:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
2142:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                 /* ----------------- INIT CPU TS TM
2143:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
2144:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_TS_TmrFreq_Hz   = 0u;                                   /* Init/clr     ts tmr freq (see No
 1314              		.loc 1 2144 0
 1315 0004 40F20003 		movw	r3, #:lower16:CPU_TS_TmrFreq_Hz
 1316 0008 C0F20003 		movt	r3, #:upper16:CPU_TS_TmrFreq_Hz
 1317 000c 4FF00002 		mov	r2, #0
 1318 0010 1A60     		str	r2, [r3, #0]
2145:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_TS_TmrInit();                                           /* Init & start ts tmr      (see No
 1319              		.loc 1 2145 0
 1320 0012 FFF7FEFF 		bl	CPU_TS_TmrInit
2146:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
2147:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
2148:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
2149:C:\Micrium\Software\uC-CPU\cpu_core.c ****                                                                 /* ------------------- INIT CPU TS 
2150:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if (((CPU_CFG_TS_32_EN    == DEF_ENABLED     )  && \
2151:C:\Micrium\Software\uC-CPU\cpu_core.c ****       (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32)) || \
2152:C:\Micrium\Software\uC-CPU\cpu_core.c ****      ((CPU_CFG_TS_64_EN    == DEF_ENABLED     )  && \
2153:C:\Micrium\Software\uC-CPU\cpu_core.c ****       (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64)))
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 62


2154:C:\Micrium\Software\uC-CPU\cpu_core.c ****     ts_tmr_cnts = CPU_TS_TmrRd();                               /* Get init ts tmr val (in ts tmr c
2155:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
2156:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
2157:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if  ((CPU_CFG_TS_32_EN    == DEF_ENABLED)  && \
2158:C:\Micrium\Software\uC-CPU\cpu_core.c ****       (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32))
2159:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_TS_32_Accum   = 0u;                                     /* Init 32-bit accum'd ts.         
2160:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_TS_32_TmrPrev = ts_tmr_cnts;                            /* Init 32-bit ts prev tmr val.    
2161:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
2162:C:\Micrium\Software\uC-CPU\cpu_core.c **** 
2163:C:\Micrium\Software\uC-CPU\cpu_core.c **** #if  ((CPU_CFG_TS_64_EN    == DEF_ENABLED)  && \
2164:C:\Micrium\Software\uC-CPU\cpu_core.c ****       (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64))
2165:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_TS_64_Accum   = 0u;                                     /* Init 64-bit accum'd ts.         
2166:C:\Micrium\Software\uC-CPU\cpu_core.c ****     CPU_TS_64_TmrPrev = ts_tmr_cnts;                            /* Init 64-bit ts prev tmr val.    
2167:C:\Micrium\Software\uC-CPU\cpu_core.c **** #endif
2168:C:\Micrium\Software\uC-CPU\cpu_core.c **** }
 1321              		.loc 1 2168 0
 1322 0016 80BD     		pop	{r7, pc}
 1323              		.cfi_endproc
 1324              	.LFE18:
 1325              		.size	CPU_TS_Init, .-CPU_TS_Init
 1326              		.text
 1327              	.Letext0:
 1328              		.section	.debug_loc,"",%progbits
 1329              	.Ldebug_loc0:
 1330              	.LLST0:
 1331 0000 00000000 		.4byte	.LFB0
 1332 0004 02000000 		.4byte	.LCFI0
 1333 0008 0100     		.2byte	0x1
 1334 000a 5D       		.byte	0x5d
 1335 000b 02000000 		.4byte	.LCFI0
 1336 000f 04000000 		.4byte	.LCFI1
 1337 0013 0200     		.2byte	0x2
 1338 0015 7D       		.byte	0x7d
 1339 0016 08       		.sleb128 8
 1340 0017 04000000 		.4byte	.LCFI1
 1341 001b 0E000000 		.4byte	.LFE0
 1342 001f 0200     		.2byte	0x2
 1343 0021 77       		.byte	0x77
 1344 0022 08       		.sleb128 8
 1345 0023 00000000 		.4byte	0x0
 1346 0027 00000000 		.4byte	0x0
 1347              	.LLST1:
 1348 002b 00000000 		.4byte	.LFB1
 1349 002f 02000000 		.4byte	.LCFI2
 1350 0033 0100     		.2byte	0x1
 1351 0035 5D       		.byte	0x5d
 1352 0036 02000000 		.4byte	.LCFI2
 1353 003a 04000000 		.4byte	.LCFI3
 1354 003e 0200     		.2byte	0x2
 1355 0040 7D       		.byte	0x7d
 1356 0041 04       		.sleb128 4
 1357 0042 04000000 		.4byte	.LCFI3
 1358 0046 06000000 		.4byte	.LFE1
 1359 004a 0200     		.2byte	0x2
 1360 004c 77       		.byte	0x77
 1361 004d 04       		.sleb128 4
 1362 004e 00000000 		.4byte	0x0
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 63


 1363 0052 00000000 		.4byte	0x0
 1364              	.LLST2:
 1365 0056 00000000 		.4byte	.LFB2
 1366 005a 02000000 		.4byte	.LCFI4
 1367 005e 0100     		.2byte	0x1
 1368 0060 5D       		.byte	0x5d
 1369 0061 02000000 		.4byte	.LCFI4
 1370 0065 04000000 		.4byte	.LCFI5
 1371 0069 0200     		.2byte	0x2
 1372 006b 7D       		.byte	0x7d
 1373 006c 08       		.sleb128 8
 1374 006d 04000000 		.4byte	.LCFI5
 1375 0071 06000000 		.4byte	.LCFI6
 1376 0075 0200     		.2byte	0x2
 1377 0077 7D       		.byte	0x7d
 1378 0078 10       		.sleb128 16
 1379 0079 06000000 		.4byte	.LCFI6
 1380 007d 32000000 		.4byte	.LFE2
 1381 0081 0200     		.2byte	0x2
 1382 0083 77       		.byte	0x77
 1383 0084 10       		.sleb128 16
 1384 0085 00000000 		.4byte	0x0
 1385 0089 00000000 		.4byte	0x0
 1386              	.LLST3:
 1387 008d 00000000 		.4byte	.LFB3
 1388 0091 02000000 		.4byte	.LCFI7
 1389 0095 0100     		.2byte	0x1
 1390 0097 5D       		.byte	0x5d
 1391 0098 02000000 		.4byte	.LCFI7
 1392 009c 04000000 		.4byte	.LCFI8
 1393 00a0 0200     		.2byte	0x2
 1394 00a2 7D       		.byte	0x7d
 1395 00a3 08       		.sleb128 8
 1396 00a4 04000000 		.4byte	.LCFI8
 1397 00a8 06000000 		.4byte	.LCFI9
 1398 00ac 0200     		.2byte	0x2
 1399 00ae 7D       		.byte	0x7d
 1400 00af 18       		.sleb128 24
 1401 00b0 06000000 		.4byte	.LCFI9
 1402 00b4 5A000000 		.4byte	.LFE3
 1403 00b8 0200     		.2byte	0x2
 1404 00ba 77       		.byte	0x77
 1405 00bb 18       		.sleb128 24
 1406 00bc 00000000 		.4byte	0x0
 1407 00c0 00000000 		.4byte	0x0
 1408              	.LLST4:
 1409 00c4 00000000 		.4byte	.LFB4
 1410 00c8 02000000 		.4byte	.LCFI10
 1411 00cc 0100     		.2byte	0x1
 1412 00ce 5D       		.byte	0x5d
 1413 00cf 02000000 		.4byte	.LCFI10
 1414 00d3 04000000 		.4byte	.LCFI11
 1415 00d7 0200     		.2byte	0x2
 1416 00d9 7D       		.byte	0x7d
 1417 00da 08       		.sleb128 8
 1418 00db 04000000 		.4byte	.LCFI11
 1419 00df 06000000 		.4byte	.LCFI12
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 64


 1420 00e3 0200     		.2byte	0x2
 1421 00e5 7D       		.byte	0x7d
 1422 00e6 18       		.sleb128 24
 1423 00e7 06000000 		.4byte	.LCFI12
 1424 00eb 78000000 		.4byte	.LFE4
 1425 00ef 0200     		.2byte	0x2
 1426 00f1 77       		.byte	0x77
 1427 00f2 18       		.sleb128 24
 1428 00f3 00000000 		.4byte	0x0
 1429 00f7 00000000 		.4byte	0x0
 1430              	.LLST5:
 1431 00fb 00000000 		.4byte	.LFB5
 1432 00ff 02000000 		.4byte	.LCFI13
 1433 0103 0100     		.2byte	0x1
 1434 0105 5D       		.byte	0x5d
 1435 0106 02000000 		.4byte	.LCFI13
 1436 010a 04000000 		.4byte	.LCFI14
 1437 010e 0200     		.2byte	0x2
 1438 0110 7D       		.byte	0x7d
 1439 0111 08       		.sleb128 8
 1440 0112 04000000 		.4byte	.LCFI14
 1441 0116 06000000 		.4byte	.LCFI15
 1442 011a 0200     		.2byte	0x2
 1443 011c 7D       		.byte	0x7d
 1444 011d 10       		.sleb128 16
 1445 011e 06000000 		.4byte	.LCFI15
 1446 0122 1A000000 		.4byte	.LFE5
 1447 0126 0200     		.2byte	0x2
 1448 0128 77       		.byte	0x77
 1449 0129 10       		.sleb128 16
 1450 012a 00000000 		.4byte	0x0
 1451 012e 00000000 		.4byte	0x0
 1452              	.LLST6:
 1453 0132 00000000 		.4byte	.LFB6
 1454 0136 02000000 		.4byte	.LCFI16
 1455 013a 0100     		.2byte	0x1
 1456 013c 5D       		.byte	0x5d
 1457 013d 02000000 		.4byte	.LCFI16
 1458 0141 04000000 		.4byte	.LCFI17
 1459 0145 0200     		.2byte	0x2
 1460 0147 7D       		.byte	0x7d
 1461 0148 04       		.sleb128 4
 1462 0149 04000000 		.4byte	.LCFI17
 1463 014d 0A000000 		.4byte	.LFE6
 1464 0151 0200     		.2byte	0x2
 1465 0153 77       		.byte	0x77
 1466 0154 04       		.sleb128 4
 1467 0155 00000000 		.4byte	0x0
 1468 0159 00000000 		.4byte	0x0
 1469              	.LLST7:
 1470 015d 00000000 		.4byte	.LFB7
 1471 0161 02000000 		.4byte	.LCFI18
 1472 0165 0100     		.2byte	0x1
 1473 0167 5D       		.byte	0x5d
 1474 0168 02000000 		.4byte	.LCFI18
 1475 016c 04000000 		.4byte	.LCFI19
 1476 0170 0200     		.2byte	0x2
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 65


 1477 0172 7D       		.byte	0x7d
 1478 0173 08       		.sleb128 8
 1479 0174 04000000 		.4byte	.LCFI19
 1480 0178 06000000 		.4byte	.LCFI20
 1481 017c 0200     		.2byte	0x2
 1482 017e 7D       		.byte	0x7d
 1483 017f 18       		.sleb128 24
 1484 0180 06000000 		.4byte	.LCFI20
 1485 0184 3E000000 		.4byte	.LFE7
 1486 0188 0200     		.2byte	0x2
 1487 018a 77       		.byte	0x77
 1488 018b 18       		.sleb128 24
 1489 018c 00000000 		.4byte	0x0
 1490 0190 00000000 		.4byte	0x0
 1491              	.LLST8:
 1492 0194 00000000 		.4byte	.LFB8
 1493 0198 02000000 		.4byte	.LCFI21
 1494 019c 0100     		.2byte	0x1
 1495 019e 5D       		.byte	0x5d
 1496 019f 02000000 		.4byte	.LCFI21
 1497 01a3 04000000 		.4byte	.LCFI22
 1498 01a7 0200     		.2byte	0x2
 1499 01a9 7D       		.byte	0x7d
 1500 01aa 04       		.sleb128 4
 1501 01ab 04000000 		.4byte	.LCFI22
 1502 01af 06000000 		.4byte	.LCFI23
 1503 01b3 0200     		.2byte	0x2
 1504 01b5 7D       		.byte	0x7d
 1505 01b6 10       		.sleb128 16
 1506 01b7 06000000 		.4byte	.LCFI23
 1507 01bb 1E000000 		.4byte	.LFE8
 1508 01bf 0200     		.2byte	0x2
 1509 01c1 77       		.byte	0x77
 1510 01c2 10       		.sleb128 16
 1511 01c3 00000000 		.4byte	0x0
 1512 01c7 00000000 		.4byte	0x0
 1513              	.LLST9:
 1514 01cb 00000000 		.4byte	.LFB9
 1515 01cf 02000000 		.4byte	.LCFI24
 1516 01d3 0100     		.2byte	0x1
 1517 01d5 5D       		.byte	0x5d
 1518 01d6 02000000 		.4byte	.LCFI24
 1519 01da 04000000 		.4byte	.LCFI25
 1520 01de 0200     		.2byte	0x2
 1521 01e0 7D       		.byte	0x7d
 1522 01e1 08       		.sleb128 8
 1523 01e2 04000000 		.4byte	.LCFI25
 1524 01e6 06000000 		.4byte	.LCFI26
 1525 01ea 0200     		.2byte	0x2
 1526 01ec 7D       		.byte	0x7d
 1527 01ed 18       		.sleb128 24
 1528 01ee 06000000 		.4byte	.LCFI26
 1529 01f2 2A000000 		.4byte	.LFE9
 1530 01f6 0200     		.2byte	0x2
 1531 01f8 77       		.byte	0x77
 1532 01f9 18       		.sleb128 24
 1533 01fa 00000000 		.4byte	0x0
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 66


 1534 01fe 00000000 		.4byte	0x0
 1535              	.LLST10:
 1536 0202 00000000 		.4byte	.LFB10
 1537 0206 02000000 		.4byte	.LCFI27
 1538 020a 0100     		.2byte	0x1
 1539 020c 5D       		.byte	0x5d
 1540 020d 02000000 		.4byte	.LCFI27
 1541 0211 04000000 		.4byte	.LCFI28
 1542 0215 0200     		.2byte	0x2
 1543 0217 7D       		.byte	0x7d
 1544 0218 08       		.sleb128 8
 1545 0219 04000000 		.4byte	.LCFI28
 1546 021d 06000000 		.4byte	.LCFI29
 1547 0221 0200     		.2byte	0x2
 1548 0223 7D       		.byte	0x7d
 1549 0224 18       		.sleb128 24
 1550 0225 06000000 		.4byte	.LCFI29
 1551 0229 2A000000 		.4byte	.LFE10
 1552 022d 0200     		.2byte	0x2
 1553 022f 77       		.byte	0x77
 1554 0230 18       		.sleb128 24
 1555 0231 00000000 		.4byte	0x0
 1556 0235 00000000 		.4byte	0x0
 1557              	.LLST11:
 1558 0239 00000000 		.4byte	.LFB11
 1559 023d 02000000 		.4byte	.LCFI30
 1560 0241 0100     		.2byte	0x1
 1561 0243 5D       		.byte	0x5d
 1562 0244 02000000 		.4byte	.LCFI30
 1563 0248 04000000 		.4byte	.LCFI31
 1564 024c 0200     		.2byte	0x2
 1565 024e 7D       		.byte	0x7d
 1566 024f 08       		.sleb128 8
 1567 0250 04000000 		.4byte	.LCFI31
 1568 0254 06000000 		.4byte	.LCFI32
 1569 0258 0200     		.2byte	0x2
 1570 025a 7D       		.byte	0x7d
 1571 025b 18       		.sleb128 24
 1572 025c 06000000 		.4byte	.LCFI32
 1573 0260 1E000000 		.4byte	.LFE11
 1574 0264 0200     		.2byte	0x2
 1575 0266 77       		.byte	0x77
 1576 0267 18       		.sleb128 24
 1577 0268 00000000 		.4byte	0x0
 1578 026c 00000000 		.4byte	0x0
 1579              	.LLST12:
 1580 0270 00000000 		.4byte	.LFB12
 1581 0274 04000000 		.4byte	.LCFI33
 1582 0278 0100     		.2byte	0x1
 1583 027a 5D       		.byte	0x5d
 1584 027b 04000000 		.4byte	.LCFI33
 1585 027f 06000000 		.4byte	.LCFI34
 1586 0283 0200     		.2byte	0x2
 1587 0285 7D       		.byte	0x7d
 1588 0286 1C       		.sleb128 28
 1589 0287 06000000 		.4byte	.LCFI34
 1590 028b 08000000 		.4byte	.LCFI35
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 67


 1591 028f 0300     		.2byte	0x3
 1592 0291 7D       		.byte	0x7d
 1593 0292 D000     		.sleb128 80
 1594 0294 08000000 		.4byte	.LCFI35
 1595 0298 DE010000 		.4byte	.LFE12
 1596 029c 0300     		.2byte	0x3
 1597 029e 77       		.byte	0x77
 1598 029f D000     		.sleb128 80
 1599 02a1 00000000 		.4byte	0x0
 1600 02a5 00000000 		.4byte	0x0
 1601              	.LLST13:
 1602 02a9 00000000 		.4byte	.LFB13
 1603 02ad 02000000 		.4byte	.LCFI36
 1604 02b1 0100     		.2byte	0x1
 1605 02b3 5D       		.byte	0x5d
 1606 02b4 02000000 		.4byte	.LCFI36
 1607 02b8 04000000 		.4byte	.LCFI37
 1608 02bc 0200     		.2byte	0x2
 1609 02be 7D       		.byte	0x7d
 1610 02bf 08       		.sleb128 8
 1611 02c0 04000000 		.4byte	.LCFI37
 1612 02c4 06000000 		.4byte	.LCFI38
 1613 02c8 0200     		.2byte	0x2
 1614 02ca 7D       		.byte	0x7d
 1615 02cb 18       		.sleb128 24
 1616 02cc 06000000 		.4byte	.LCFI38
 1617 02d0 2E000000 		.4byte	.LFE13
 1618 02d4 0200     		.2byte	0x2
 1619 02d6 77       		.byte	0x77
 1620 02d7 18       		.sleb128 24
 1621 02d8 00000000 		.4byte	0x0
 1622 02dc 00000000 		.4byte	0x0
 1623              	.LLST14:
 1624 02e0 00000000 		.4byte	.LFB14
 1625 02e4 02000000 		.4byte	.LCFI39
 1626 02e8 0100     		.2byte	0x1
 1627 02ea 5D       		.byte	0x5d
 1628 02eb 02000000 		.4byte	.LCFI39
 1629 02ef 04000000 		.4byte	.LCFI40
 1630 02f3 0200     		.2byte	0x2
 1631 02f5 7D       		.byte	0x7d
 1632 02f6 08       		.sleb128 8
 1633 02f7 04000000 		.4byte	.LCFI40
 1634 02fb 06000000 		.4byte	.LCFI41
 1635 02ff 0200     		.2byte	0x2
 1636 0301 7D       		.byte	0x7d
 1637 0302 18       		.sleb128 24
 1638 0303 06000000 		.4byte	.LCFI41
 1639 0307 2E000000 		.4byte	.LFE14
 1640 030b 0200     		.2byte	0x2
 1641 030d 77       		.byte	0x77
 1642 030e 18       		.sleb128 24
 1643 030f 00000000 		.4byte	0x0
 1644 0313 00000000 		.4byte	0x0
 1645              	.LLST15:
 1646 0317 00000000 		.4byte	.LFB15
 1647 031b 02000000 		.4byte	.LCFI42
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 68


 1648 031f 0100     		.2byte	0x1
 1649 0321 5D       		.byte	0x5d
 1650 0322 02000000 		.4byte	.LCFI42
 1651 0326 04000000 		.4byte	.LCFI43
 1652 032a 0200     		.2byte	0x2
 1653 032c 7D       		.byte	0x7d
 1654 032d 08       		.sleb128 8
 1655 032e 04000000 		.4byte	.LCFI43
 1656 0332 06000000 		.4byte	.LCFI44
 1657 0336 0200     		.2byte	0x2
 1658 0338 7D       		.byte	0x7d
 1659 0339 18       		.sleb128 24
 1660 033a 06000000 		.4byte	.LCFI44
 1661 033e 2A000000 		.4byte	.LFE15
 1662 0342 0200     		.2byte	0x2
 1663 0344 77       		.byte	0x77
 1664 0345 18       		.sleb128 24
 1665 0346 00000000 		.4byte	0x0
 1666 034a 00000000 		.4byte	0x0
 1667              	.LLST16:
 1668 034e 00000000 		.4byte	.LFB16
 1669 0352 02000000 		.4byte	.LCFI45
 1670 0356 0100     		.2byte	0x1
 1671 0358 5D       		.byte	0x5d
 1672 0359 02000000 		.4byte	.LCFI45
 1673 035d 04000000 		.4byte	.LCFI46
 1674 0361 0200     		.2byte	0x2
 1675 0363 7D       		.byte	0x7d
 1676 0364 08       		.sleb128 8
 1677 0365 04000000 		.4byte	.LCFI46
 1678 0369 06000000 		.4byte	.LCFI47
 1679 036d 0200     		.2byte	0x2
 1680 036f 7D       		.byte	0x7d
 1681 0370 20       		.sleb128 32
 1682 0371 06000000 		.4byte	.LCFI47
 1683 0375 54000000 		.4byte	.LFE16
 1684 0379 0200     		.2byte	0x2
 1685 037b 77       		.byte	0x77
 1686 037c 20       		.sleb128 32
 1687 037d 00000000 		.4byte	0x0
 1688 0381 00000000 		.4byte	0x0
 1689              	.LLST17:
 1690 0385 00000000 		.4byte	.LFB17
 1691 0389 02000000 		.4byte	.LCFI48
 1692 038d 0100     		.2byte	0x1
 1693 038f 5D       		.byte	0x5d
 1694 0390 02000000 		.4byte	.LCFI48
 1695 0394 04000000 		.4byte	.LCFI49
 1696 0398 0200     		.2byte	0x2
 1697 039a 7D       		.byte	0x7d
 1698 039b 08       		.sleb128 8
 1699 039c 04000000 		.4byte	.LCFI49
 1700 03a0 0A000000 		.4byte	.LFE17
 1701 03a4 0200     		.2byte	0x2
 1702 03a6 77       		.byte	0x77
 1703 03a7 08       		.sleb128 8
 1704 03a8 00000000 		.4byte	0x0
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 69


 1705 03ac 00000000 		.4byte	0x0
 1706              	.LLST18:
 1707 03b0 00000000 		.4byte	.LFB18
 1708 03b4 02000000 		.4byte	.LCFI50
 1709 03b8 0100     		.2byte	0x1
 1710 03ba 5D       		.byte	0x5d
 1711 03bb 02000000 		.4byte	.LCFI50
 1712 03bf 04000000 		.4byte	.LCFI51
 1713 03c3 0200     		.2byte	0x2
 1714 03c5 7D       		.byte	0x7d
 1715 03c6 08       		.sleb128 8
 1716 03c7 04000000 		.4byte	.LCFI51
 1717 03cb 18000000 		.4byte	.LFE18
 1718 03cf 0200     		.2byte	0x2
 1719 03d1 77       		.byte	0x77
 1720 03d2 08       		.sleb128 8
 1721 03d3 00000000 		.4byte	0x0
 1722 03d7 00000000 		.4byte	0x0
 1723              		.file 2 "..\\..\\..\\..\\..\\..\\uC-CPU\\ARM-Cortex-M3\\GNU/cpu.h"
 1724              		.file 3 "..\\..\\..\\..\\..\\..\\uC-CPU/cpu_core.h"
 1725              		.section	.debug_info
 1726 0000 6E050000 		.4byte	0x56e
 1727 0004 0200     		.2byte	0x2
 1728 0006 00000000 		.4byte	.Ldebug_abbrev0
 1729 000a 04       		.byte	0x4
 1730 000b 01       		.uleb128 0x1
 1731 000c 79030000 		.4byte	.LASF55
 1732 0010 01       		.byte	0x1
 1733 0011 2A010000 		.4byte	.LASF56
 1734 0015 2C020000 		.4byte	.LASF57
 1735 0019 00000000 		.4byte	0x0
 1736 001d 00000000 		.4byte	0x0
 1737 0021 00000000 		.4byte	.Ldebug_ranges0+0x0
 1738 0025 00000000 		.4byte	.Ldebug_line0
 1739 0029 02       		.uleb128 0x2
 1740 002a A7010000 		.4byte	.LASF2
 1741 002e 02       		.byte	0x2
 1742 002f 76       		.byte	0x76
 1743 0030 34000000 		.4byte	0x34
 1744 0034 03       		.uleb128 0x3
 1745 0035 01       		.byte	0x1
 1746 0036 08       		.byte	0x8
 1747 0037 20020000 		.4byte	.LASF0
 1748 003b 03       		.uleb128 0x3
 1749 003c 01       		.byte	0x1
 1750 003d 08       		.byte	0x8
 1751 003e 61010000 		.4byte	.LASF1
 1752 0042 02       		.uleb128 0x2
 1753 0043 08020000 		.4byte	.LASF3
 1754 0047 02       		.byte	0x2
 1755 0048 78       		.byte	0x78
 1756 0049 3B000000 		.4byte	0x3b
 1757 004d 03       		.uleb128 0x3
 1758 004e 01       		.byte	0x1
 1759 004f 06       		.byte	0x6
 1760 0050 6F010000 		.4byte	.LASF4
 1761 0054 02       		.uleb128 0x2
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 70


 1762 0055 A0030000 		.4byte	.LASF5
 1763 0059 02       		.byte	0x2
 1764 005a 7A       		.byte	0x7a
 1765 005b 5F000000 		.4byte	0x5f
 1766 005f 03       		.uleb128 0x3
 1767 0060 02       		.byte	0x2
 1768 0061 07       		.byte	0x7
 1769 0062 D8010000 		.4byte	.LASF6
 1770 0066 03       		.uleb128 0x3
 1771 0067 02       		.byte	0x2
 1772 0068 05       		.byte	0x5
 1773 0069 4C000000 		.4byte	.LASF7
 1774 006d 02       		.uleb128 0x2
 1775 006e DC020000 		.4byte	.LASF8
 1776 0072 02       		.byte	0x2
 1777 0073 7C       		.byte	0x7c
 1778 0074 78000000 		.4byte	0x78
 1779 0078 03       		.uleb128 0x3
 1780 0079 04       		.byte	0x4
 1781 007a 07       		.byte	0x7
 1782 007b B0010000 		.4byte	.LASF9
 1783 007f 04       		.uleb128 0x4
 1784 0080 04       		.byte	0x4
 1785 0081 05       		.byte	0x5
 1786 0082 696E7400 		.ascii	"int\000"
 1787 0086 02       		.uleb128 0x2
 1788 0087 67030000 		.4byte	.LASF10
 1789 008b 02       		.byte	0x2
 1790 008c 7E       		.byte	0x7e
 1791 008d 91000000 		.4byte	0x91
 1792 0091 03       		.uleb128 0x3
 1793 0092 08       		.byte	0x8
 1794 0093 07       		.byte	0x7
 1795 0094 83010000 		.4byte	.LASF11
 1796 0098 03       		.uleb128 0x3
 1797 0099 08       		.byte	0x8
 1798 009a 05       		.byte	0x5
 1799 009b DD000000 		.4byte	.LASF12
 1800 009f 03       		.uleb128 0x3
 1801 00a0 04       		.byte	0x4
 1802 00a1 04       		.byte	0x4
 1803 00a2 CE000000 		.4byte	.LASF13
 1804 00a6 03       		.uleb128 0x3
 1805 00a7 08       		.byte	0x8
 1806 00a8 04       		.byte	0x4
 1807 00a9 19030000 		.4byte	.LASF14
 1808 00ad 02       		.uleb128 0x2
 1809 00ae BD000000 		.4byte	.LASF15
 1810 00b2 02       		.byte	0x2
 1811 00b3 B5       		.byte	0xb5
 1812 00b4 6D000000 		.4byte	0x6d
 1813 00b8 02       		.uleb128 0x2
 1814 00b9 FF010000 		.4byte	.LASF16
 1815 00bd 02       		.byte	0x2
 1816 00be BE       		.byte	0xbe
 1817 00bf 6D000000 		.4byte	0x6d
 1818 00c3 02       		.uleb128 0x2
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 71


 1819 00c4 35030000 		.4byte	.LASF17
 1820 00c8 02       		.byte	0x2
 1821 00c9 C7       		.byte	0xc7
 1822 00ca AD000000 		.4byte	0xad
 1823 00ce 05       		.uleb128 0x5
 1824 00cf 85030000 		.4byte	.LASF18
 1825 00d3 02       		.byte	0x2
 1826 00d4 2901     		.2byte	0x129
 1827 00d6 6D000000 		.4byte	0x6d
 1828 00da 06       		.uleb128 0x6
 1829 00db C6000000 		.4byte	.LASF58
 1830 00df 02       		.byte	0x2
 1831 00e0 03       		.byte	0x3
 1832 00e1 AF       		.byte	0xaf
 1833 00e2 01010000 		.4byte	0x101
 1834 00e6 07       		.uleb128 0x7
 1835 00e7 9A010000 		.4byte	.LASF19
 1836 00eb 00       		.sleb128 0
 1837 00ec 07       		.uleb128 0x7
 1838 00ed 50010000 		.4byte	.LASF20
 1839 00f1 0A       		.sleb128 10
 1840 00f2 07       		.uleb128 0x7
 1841 00f3 E7020000 		.4byte	.LASF21
 1842 00f7 E807     		.sleb128 1000
 1843 00f9 07       		.uleb128 0x7
 1844 00fa 23000000 		.4byte	.LASF22
 1845 00fe D00F     		.sleb128 2000
 1846 0100 00       		.byte	0x0
 1847 0101 02       		.uleb128 0x2
 1848 0102 56000000 		.4byte	.LASF23
 1849 0106 03       		.byte	0x3
 1850 0107 B8       		.byte	0xb8
 1851 0108 DA000000 		.4byte	0xda
 1852 010c 02       		.uleb128 0x2
 1853 010d 2C030000 		.4byte	.LASF24
 1854 0111 03       		.byte	0x3
 1855 0112 C4       		.byte	0xc4
 1856 0113 6D000000 		.4byte	0x6d
 1857 0117 02       		.uleb128 0x2
 1858 0118 00000000 		.4byte	.LASF25
 1859 011c 03       		.byte	0x3
 1860 011d DD       		.byte	0xdd
 1861 011e 6D000000 		.4byte	0x6d
 1862 0122 08       		.uleb128 0x8
 1863 0123 01       		.byte	0x1
 1864 0124 86000000 		.4byte	.LASF26
 1865 0128 01       		.byte	0x1
 1866 0129 C1       		.byte	0xc1
 1867 012a 01       		.byte	0x1
 1868 012b 00000000 		.4byte	.LFB0
 1869 012f 0E000000 		.4byte	.LFE0
 1870 0133 00000000 		.4byte	.LLST0
 1871 0137 08       		.uleb128 0x8
 1872 0138 01       		.byte	0x1
 1873 0139 3B000000 		.4byte	.LASF27
 1874 013d 01       		.byte	0x1
 1875 013e E9       		.byte	0xe9
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 72


 1876 013f 01       		.byte	0x1
 1877 0140 00000000 		.4byte	.LFB1
 1878 0144 06000000 		.4byte	.LFE1
 1879 0148 2B000000 		.4byte	.LLST1
 1880 014c 09       		.uleb128 0x9
 1881 014d 01       		.byte	0x1
 1882 014e 0D030000 		.4byte	.LASF28
 1883 0152 01       		.byte	0x1
 1884 0153 0701     		.2byte	0x107
 1885 0155 01       		.byte	0x1
 1886 0156 00000000 		.4byte	.LFB2
 1887 015a 32000000 		.4byte	.LFE2
 1888 015e 56000000 		.4byte	.LLST2
 1889 0162 76010000 		.4byte	0x176
 1890 0166 0A       		.uleb128 0xa
 1891 0167 72030000 		.4byte	.LASF32
 1892 016b 01       		.byte	0x1
 1893 016c 0901     		.2byte	0x109
 1894 016e CE000000 		.4byte	0xce
 1895 0172 02       		.byte	0x2
 1896 0173 91       		.byte	0x91
 1897 0174 74       		.sleb128 -12
 1898 0175 00       		.byte	0x0
 1899 0176 09       		.uleb128 0x9
 1900 0177 01       		.byte	0x1
 1901 0178 20030000 		.4byte	.LASF29
 1902 017c 01       		.byte	0x1
 1903 017d 3401     		.2byte	0x134
 1904 017f 01       		.byte	0x1
 1905 0180 00000000 		.4byte	.LFB3
 1906 0184 5A000000 		.4byte	.LFE3
 1907 0188 8D000000 		.4byte	.LLST3
 1908 018c BE010000 		.4byte	0x1be
 1909 0190 0B       		.uleb128 0xb
 1910 0191 25020000 		.4byte	.LASF30
 1911 0195 01       		.byte	0x1
 1912 0196 3401     		.2byte	0x134
 1913 0198 BE010000 		.4byte	0x1be
 1914 019c 02       		.byte	0x2
 1915 019d 91       		.byte	0x91
 1916 019e 6C       		.sleb128 -20
 1917 019f 0B       		.uleb128 0xb
 1918 01a0 5E000000 		.4byte	.LASF31
 1919 01a4 01       		.byte	0x1
 1920 01a5 3501     		.2byte	0x135
 1921 01a7 C4010000 		.4byte	0x1c4
 1922 01ab 02       		.byte	0x2
 1923 01ac 91       		.byte	0x91
 1924 01ad 68       		.sleb128 -24
 1925 01ae 0A       		.uleb128 0xa
 1926 01af 72030000 		.4byte	.LASF32
 1927 01b3 01       		.byte	0x1
 1928 01b4 3701     		.2byte	0x137
 1929 01b6 CE000000 		.4byte	0xce
 1930 01ba 02       		.byte	0x2
 1931 01bb 91       		.byte	0x91
 1932 01bc 74       		.sleb128 -12
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 73


 1933 01bd 00       		.byte	0x0
 1934 01be 0C       		.uleb128 0xc
 1935 01bf 04       		.byte	0x4
 1936 01c0 29000000 		.4byte	0x29
 1937 01c4 0C       		.uleb128 0xc
 1938 01c5 04       		.byte	0x4
 1939 01c6 01010000 		.4byte	0x101
 1940 01ca 09       		.uleb128 0x9
 1941 01cb 01       		.byte	0x1
 1942 01cc 0A010000 		.4byte	.LASF33
 1943 01d0 01       		.byte	0x1
 1944 01d1 6A01     		.2byte	0x16a
 1945 01d3 01       		.byte	0x1
 1946 01d4 00000000 		.4byte	.LFB4
 1947 01d8 78000000 		.4byte	.LFE4
 1948 01dc C4000000 		.4byte	.LLST4
 1949 01e0 21020000 		.4byte	0x221
 1950 01e4 0B       		.uleb128 0xb
 1951 01e5 25020000 		.4byte	.LASF30
 1952 01e9 01       		.byte	0x1
 1953 01ea 6A01     		.2byte	0x16a
 1954 01ec 21020000 		.4byte	0x221
 1955 01f0 02       		.byte	0x2
 1956 01f1 91       		.byte	0x91
 1957 01f2 6C       		.sleb128 -20
 1958 01f3 0B       		.uleb128 0xb
 1959 01f4 5E000000 		.4byte	.LASF31
 1960 01f8 01       		.byte	0x1
 1961 01f9 6B01     		.2byte	0x16b
 1962 01fb C4010000 		.4byte	0x1c4
 1963 01ff 02       		.byte	0x2
 1964 0200 91       		.byte	0x91
 1965 0201 68       		.sleb128 -24
 1966 0202 0D       		.uleb128 0xd
 1967 0203 6C656E00 		.ascii	"len\000"
 1968 0207 01       		.byte	0x1
 1969 0208 6D01     		.2byte	0x16d
 1970 020a C3000000 		.4byte	0xc3
 1971 020e 02       		.byte	0x2
 1972 020f 91       		.byte	0x91
 1973 0210 70       		.sleb128 -16
 1974 0211 0A       		.uleb128 0xa
 1975 0212 72030000 		.4byte	.LASF32
 1976 0216 01       		.byte	0x1
 1977 0217 6E01     		.2byte	0x16e
 1978 0219 CE000000 		.4byte	0xce
 1979 021d 02       		.byte	0x2
 1980 021e 91       		.byte	0x91
 1981 021f 74       		.sleb128 -12
 1982 0220 00       		.byte	0x0
 1983 0221 0C       		.uleb128 0xc
 1984 0222 04       		.byte	0x4
 1985 0223 27020000 		.4byte	0x227
 1986 0227 0E       		.uleb128 0xe
 1987 0228 29000000 		.4byte	0x29
 1988 022c 0F       		.uleb128 0xf
 1989 022d 01       		.byte	0x1
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 74


 1990 022e 13020000 		.4byte	.LASF35
 1991 0232 01       		.byte	0x1
 1992 0233 C101     		.2byte	0x1c1
 1993 0235 01       		.byte	0x1
 1994 0236 0C010000 		.4byte	0x10c
 1995 023a 00000000 		.4byte	.LFB5
 1996 023e 1A000000 		.4byte	.LFE5
 1997 0242 FB000000 		.4byte	.LLST5
 1998 0246 59020000 		.4byte	0x259
 1999 024a 0D       		.uleb128 0xd
 2000 024b 747300   		.ascii	"ts\000"
 2001 024e 01       		.byte	0x1
 2002 024f C301     		.2byte	0x1c3
 2003 0251 0C010000 		.4byte	0x10c
 2004 0255 02       		.byte	0x2
 2005 0256 91       		.byte	0x91
 2006 0257 74       		.sleb128 -12
 2007 0258 00       		.byte	0x0
 2008 0259 10       		.uleb128 0x10
 2009 025a 01       		.byte	0x1
 2010 025b CA010000 		.4byte	.LASF34
 2011 025f 01       		.byte	0x1
 2012 0260 4A02     		.2byte	0x24a
 2013 0262 01       		.byte	0x1
 2014 0263 00000000 		.4byte	.LFB6
 2015 0267 0A000000 		.4byte	.LFE6
 2016 026b 32010000 		.4byte	.LLST6
 2017 026f 0F       		.uleb128 0xf
 2018 0270 01       		.byte	0x1
 2019 0271 AB030000 		.4byte	.LASF36
 2020 0275 01       		.byte	0x1
 2021 0276 7502     		.2byte	0x275
 2022 0278 01       		.byte	0x1
 2023 0279 17010000 		.4byte	0x117
 2024 027d 00000000 		.4byte	.LFB7
 2025 0281 3E000000 		.4byte	.LFE7
 2026 0285 5D010000 		.4byte	.LLST7
 2027 0289 AC020000 		.4byte	0x2ac
 2028 028d 0B       		.uleb128 0xb
 2029 028e 5E000000 		.4byte	.LASF31
 2030 0292 01       		.byte	0x1
 2031 0293 7502     		.2byte	0x275
 2032 0295 C4010000 		.4byte	0x1c4
 2033 0299 02       		.byte	0x2
 2034 029a 91       		.byte	0x91
 2035 029b 6C       		.sleb128 -20
 2036 029c 0A       		.uleb128 0xa
 2037 029d 7B010000 		.4byte	.LASF37
 2038 02a1 01       		.byte	0x1
 2039 02a2 7702     		.2byte	0x277
 2040 02a4 17010000 		.4byte	0x117
 2041 02a8 02       		.byte	0x2
 2042 02a9 91       		.byte	0x91
 2043 02aa 74       		.sleb128 -12
 2044 02ab 00       		.byte	0x0
 2045 02ac 09       		.uleb128 0x9
 2046 02ad 01       		.byte	0x1
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 75


 2047 02ae AB000000 		.4byte	.LASF38
 2048 02b2 01       		.byte	0x1
 2049 02b3 A902     		.2byte	0x2a9
 2050 02b5 01       		.byte	0x1
 2051 02b6 00000000 		.4byte	.LFB8
 2052 02ba 1E000000 		.4byte	.LFE8
 2053 02be 94010000 		.4byte	.LLST8
 2054 02c2 D6020000 		.4byte	0x2d6
 2055 02c6 0B       		.uleb128 0xb
 2056 02c7 7B010000 		.4byte	.LASF37
 2057 02cb 01       		.byte	0x1
 2058 02cc A902     		.2byte	0x2a9
 2059 02ce 17010000 		.4byte	0x117
 2060 02d2 02       		.byte	0x2
 2061 02d3 91       		.byte	0x91
 2062 02d4 74       		.sleb128 -12
 2063 02d5 00       		.byte	0x0
 2064 02d6 0F       		.uleb128 0xf
 2065 02d7 01       		.byte	0x1
 2066 02d8 10000000 		.4byte	.LASF39
 2067 02dc 01       		.byte	0x1
 2068 02dd BA04     		.2byte	0x4ba
 2069 02df 01       		.byte	0x1
 2070 02e0 B8000000 		.4byte	0xb8
 2071 02e4 00000000 		.4byte	.LFB9
 2072 02e8 2A000000 		.4byte	.LFE9
 2073 02ec CB010000 		.4byte	.LLST9
 2074 02f0 13030000 		.4byte	0x313
 2075 02f4 11       		.uleb128 0x11
 2076 02f5 76616C00 		.ascii	"val\000"
 2077 02f9 01       		.byte	0x1
 2078 02fa BA04     		.2byte	0x4ba
 2079 02fc 42000000 		.4byte	0x42
 2080 0300 02       		.byte	0x2
 2081 0301 91       		.byte	0x91
 2082 0302 6F       		.sleb128 -17
 2083 0303 0A       		.uleb128 0xa
 2084 0304 9C000000 		.4byte	.LASF40
 2085 0308 01       		.byte	0x1
 2086 0309 C004     		.2byte	0x4c0
 2087 030b B8000000 		.4byte	0xb8
 2088 030f 02       		.byte	0x2
 2089 0310 91       		.byte	0x91
 2090 0311 74       		.sleb128 -12
 2091 0312 00       		.byte	0x0
 2092 0313 0F       		.uleb128 0xf
 2093 0314 01       		.byte	0x1
 2094 0315 EB000000 		.4byte	.LASF41
 2095 0319 01       		.byte	0x1
 2096 031a FE04     		.2byte	0x4fe
 2097 031c 01       		.byte	0x1
 2098 031d B8000000 		.4byte	0xb8
 2099 0321 00000000 		.4byte	.LFB10
 2100 0325 2A000000 		.4byte	.LFE10
 2101 0329 02020000 		.4byte	.LLST10
 2102 032d 50030000 		.4byte	0x350
 2103 0331 11       		.uleb128 0x11
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 76


 2104 0332 76616C00 		.ascii	"val\000"
 2105 0336 01       		.byte	0x1
 2106 0337 FE04     		.2byte	0x4fe
 2107 0339 54000000 		.4byte	0x54
 2108 033d 02       		.byte	0x2
 2109 033e 91       		.byte	0x91
 2110 033f 6E       		.sleb128 -18
 2111 0340 0A       		.uleb128 0xa
 2112 0341 9C000000 		.4byte	.LASF40
 2113 0345 01       		.byte	0x1
 2114 0346 0405     		.2byte	0x504
 2115 0348 B8000000 		.4byte	0xb8
 2116 034c 02       		.byte	0x2
 2117 034d 91       		.byte	0x91
 2118 034e 74       		.sleb128 -12
 2119 034f 00       		.byte	0x0
 2120 0350 0F       		.uleb128 0xf
 2121 0351 01       		.byte	0x1
 2122 0352 54030000 		.4byte	.LASF42
 2123 0356 01       		.byte	0x1
 2124 0357 4805     		.2byte	0x548
 2125 0359 01       		.byte	0x1
 2126 035a B8000000 		.4byte	0xb8
 2127 035e 00000000 		.4byte	.LFB11
 2128 0362 1E000000 		.4byte	.LFE11
 2129 0366 39020000 		.4byte	.LLST11
 2130 036a 8D030000 		.4byte	0x38d
 2131 036e 11       		.uleb128 0x11
 2132 036f 76616C00 		.ascii	"val\000"
 2133 0373 01       		.byte	0x1
 2134 0374 4805     		.2byte	0x548
 2135 0376 6D000000 		.4byte	0x6d
 2136 037a 02       		.byte	0x2
 2137 037b 91       		.byte	0x91
 2138 037c 6C       		.sleb128 -20
 2139 037d 0A       		.uleb128 0xa
 2140 037e 9C000000 		.4byte	.LASF40
 2141 0382 01       		.byte	0x1
 2142 0383 4E05     		.2byte	0x54e
 2143 0385 B8000000 		.4byte	0xb8
 2144 0389 02       		.byte	0x2
 2145 038a 91       		.byte	0x91
 2146 038b 74       		.sleb128 -12
 2147 038c 00       		.byte	0x0
 2148 038d 0F       		.uleb128 0xf
 2149 038e 01       		.byte	0x1
 2150 038f C9020000 		.4byte	.LASF43
 2151 0393 01       		.byte	0x1
 2152 0394 A005     		.2byte	0x5a0
 2153 0396 01       		.byte	0x1
 2154 0397 B8000000 		.4byte	0xb8
 2155 039b 00000000 		.4byte	.LFB12
 2156 039f DE010000 		.4byte	.LFE12
 2157 03a3 70020000 		.4byte	.LLST12
 2158 03a7 D8030000 		.4byte	0x3d8
 2159 03ab 11       		.uleb128 0x11
 2160 03ac 76616C00 		.ascii	"val\000"
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 77


 2161 03b0 01       		.byte	0x1
 2162 03b1 A005     		.2byte	0x5a0
 2163 03b3 86000000 		.4byte	0x86
 2164 03b7 02       		.byte	0x2
 2165 03b8 91       		.byte	0x91
 2166 03b9 50       		.sleb128 -48
 2167 03ba 0D       		.uleb128 0xd
 2168 03bb 697800   		.ascii	"ix\000"
 2169 03be 01       		.byte	0x1
 2170 03bf A405     		.2byte	0x5a4
 2171 03c1 B8000000 		.4byte	0xb8
 2172 03c5 02       		.byte	0x2
 2173 03c6 91       		.byte	0x91
 2174 03c7 58       		.sleb128 -40
 2175 03c8 0A       		.uleb128 0xa
 2176 03c9 9C000000 		.4byte	.LASF40
 2177 03cd 01       		.byte	0x1
 2178 03ce A605     		.2byte	0x5a6
 2179 03d0 B8000000 		.4byte	0xb8
 2180 03d4 02       		.byte	0x2
 2181 03d5 91       		.byte	0x91
 2182 03d6 5C       		.sleb128 -36
 2183 03d7 00       		.byte	0x0
 2184 03d8 0F       		.uleb128 0xf
 2185 03d9 01       		.byte	0x1
 2186 03da 40030000 		.4byte	.LASF44
 2187 03de 01       		.byte	0x1
 2188 03df BA06     		.2byte	0x6ba
 2189 03e1 01       		.byte	0x1
 2190 03e2 B8000000 		.4byte	0xb8
 2191 03e6 00000000 		.4byte	.LFB13
 2192 03ea 2E000000 		.4byte	.LFE13
 2193 03ee A9020000 		.4byte	.LLST13
 2194 03f2 15040000 		.4byte	0x415
 2195 03f6 11       		.uleb128 0x11
 2196 03f7 76616C00 		.ascii	"val\000"
 2197 03fb 01       		.byte	0x1
 2198 03fc BA06     		.2byte	0x6ba
 2199 03fe 42000000 		.4byte	0x42
 2200 0402 02       		.byte	0x2
 2201 0403 91       		.byte	0x91
 2202 0404 6F       		.sleb128 -17
 2203 0405 0A       		.uleb128 0xa
 2204 0406 76000000 		.4byte	.LASF45
 2205 040a 01       		.byte	0x1
 2206 040b C106     		.2byte	0x6c1
 2207 040d B8000000 		.4byte	0xb8
 2208 0411 02       		.byte	0x2
 2209 0412 91       		.byte	0x91
 2210 0413 74       		.sleb128 -12
 2211 0414 00       		.byte	0x0
 2212 0415 0F       		.uleb128 0xf
 2213 0416 01       		.byte	0x1
 2214 0417 F9020000 		.4byte	.LASF46
 2215 041b 01       		.byte	0x1
 2216 041c 2307     		.2byte	0x723
 2217 041e 01       		.byte	0x1
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 78


 2218 041f B8000000 		.4byte	0xb8
 2219 0423 00000000 		.4byte	.LFB14
 2220 0427 2E000000 		.4byte	.LFE14
 2221 042b E0020000 		.4byte	.LLST14
 2222 042f 52040000 		.4byte	0x452
 2223 0433 11       		.uleb128 0x11
 2224 0434 76616C00 		.ascii	"val\000"
 2225 0438 01       		.byte	0x1
 2226 0439 2307     		.2byte	0x723
 2227 043b 54000000 		.4byte	0x54
 2228 043f 02       		.byte	0x2
 2229 0440 91       		.byte	0x91
 2230 0441 6E       		.sleb128 -18
 2231 0442 0A       		.uleb128 0xa
 2232 0443 76000000 		.4byte	.LASF45
 2233 0447 01       		.byte	0x1
 2234 0448 2A07     		.2byte	0x72a
 2235 044a B8000000 		.4byte	0xb8
 2236 044e 02       		.byte	0x2
 2237 044f 91       		.byte	0x91
 2238 0450 74       		.sleb128 -12
 2239 0451 00       		.byte	0x0
 2240 0452 0F       		.uleb128 0xf
 2241 0453 01       		.byte	0x1
 2242 0454 EB010000 		.4byte	.LASF47
 2243 0458 01       		.byte	0x1
 2244 0459 8C07     		.2byte	0x78c
 2245 045b 01       		.byte	0x1
 2246 045c B8000000 		.4byte	0xb8
 2247 0460 00000000 		.4byte	.LFB15
 2248 0464 2A000000 		.4byte	.LFE15
 2249 0468 17030000 		.4byte	.LLST15
 2250 046c 8F040000 		.4byte	0x48f
 2251 0470 11       		.uleb128 0x11
 2252 0471 76616C00 		.ascii	"val\000"
 2253 0475 01       		.byte	0x1
 2254 0476 8C07     		.2byte	0x78c
 2255 0478 6D000000 		.4byte	0x6d
 2256 047c 02       		.byte	0x2
 2257 047d 91       		.byte	0x91
 2258 047e 6C       		.sleb128 -20
 2259 047f 0A       		.uleb128 0xa
 2260 0480 76000000 		.4byte	.LASF45
 2261 0484 01       		.byte	0x1
 2262 0485 9307     		.2byte	0x793
 2263 0487 B8000000 		.4byte	0xb8
 2264 048b 02       		.byte	0x2
 2265 048c 91       		.byte	0x91
 2266 048d 74       		.sleb128 -12
 2267 048e 00       		.byte	0x0
 2268 048f 0F       		.uleb128 0xf
 2269 0490 01       		.byte	0x1
 2270 0491 16010000 		.4byte	.LASF48
 2271 0495 01       		.byte	0x1
 2272 0496 F507     		.2byte	0x7f5
 2273 0498 01       		.byte	0x1
 2274 0499 B8000000 		.4byte	0xb8
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 79


 2275 049d 00000000 		.4byte	.LFB16
 2276 04a1 54000000 		.4byte	.LFE16
 2277 04a5 4E030000 		.4byte	.LLST16
 2278 04a9 EA040000 		.4byte	0x4ea
 2279 04ad 11       		.uleb128 0x11
 2280 04ae 76616C00 		.ascii	"val\000"
 2281 04b2 01       		.byte	0x1
 2282 04b3 F507     		.2byte	0x7f5
 2283 04b5 86000000 		.4byte	0x86
 2284 04b9 02       		.byte	0x2
 2285 04ba 91       		.byte	0x91
 2286 04bb 60       		.sleb128 -32
 2287 04bc 0A       		.uleb128 0xa
 2288 04bd BD010000 		.4byte	.LASF49
 2289 04c1 01       		.byte	0x1
 2290 04c2 F907     		.2byte	0x7f9
 2291 04c4 86000000 		.4byte	0x86
 2292 04c8 02       		.byte	0x2
 2293 04c9 91       		.byte	0x91
 2294 04ca 68       		.sleb128 -24
 2295 04cb 0A       		.uleb128 0xa
 2296 04cc 9C000000 		.4byte	.LASF40
 2297 04d0 01       		.byte	0x1
 2298 04d1 FA07     		.2byte	0x7fa
 2299 04d3 B8000000 		.4byte	0xb8
 2300 04d7 02       		.byte	0x2
 2301 04d8 91       		.byte	0x91
 2302 04d9 70       		.sleb128 -16
 2303 04da 0A       		.uleb128 0xa
 2304 04db 76000000 		.4byte	.LASF45
 2305 04df 01       		.byte	0x1
 2306 04e0 FC07     		.2byte	0x7fc
 2307 04e2 B8000000 		.4byte	0xb8
 2308 04e6 02       		.byte	0x2
 2309 04e7 91       		.byte	0x91
 2310 04e8 74       		.sleb128 -12
 2311 04e9 00       		.byte	0x0
 2312 04ea 12       		.uleb128 0x12
 2313 04eb 8F000000 		.4byte	.LASF50
 2314 04ef 01       		.byte	0x1
 2315 04f0 2F08     		.2byte	0x82f
 2316 04f2 01       		.byte	0x1
 2317 04f3 00000000 		.4byte	.LFB17
 2318 04f7 0A000000 		.4byte	.LFE17
 2319 04fb 85030000 		.4byte	.LLST17
 2320 04ff 12       		.uleb128 0x12
 2321 0500 FE000000 		.4byte	.LASF51
 2322 0504 01       		.byte	0x1
 2323 0505 5408     		.2byte	0x854
 2324 0507 01       		.byte	0x1
 2325 0508 00000000 		.4byte	.LFB18
 2326 050c 18000000 		.4byte	.LFE18
 2327 0510 B0030000 		.4byte	.LLST18
 2328 0514 13       		.uleb128 0x13
 2329 0515 42000000 		.4byte	0x42
 2330 0519 24050000 		.4byte	0x524
 2331 051d 14       		.uleb128 0x14
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 80


 2332 051e 24050000 		.4byte	0x524
 2333 0522 FF       		.byte	0xff
 2334 0523 00       		.byte	0x0
 2335 0524 15       		.uleb128 0x15
 2336 0525 04       		.byte	0x4
 2337 0526 07       		.byte	0x7
 2338 0527 16       		.uleb128 0x16
 2339 0528 8C030000 		.4byte	.LASF52
 2340 052c 01       		.byte	0x1
 2341 052d 60       		.byte	0x60
 2342 052e 38050000 		.4byte	0x538
 2343 0532 05       		.byte	0x5
 2344 0533 03       		.byte	0x3
 2345 0534 00000000 		.4byte	CPU_CntLeadZerosTbl
 2346 0538 0E       		.uleb128 0xe
 2347 0539 14050000 		.4byte	0x514
 2348 053d 13       		.uleb128 0x13
 2349 053e 29000000 		.4byte	0x29
 2350 0542 4D050000 		.4byte	0x54d
 2351 0546 14       		.uleb128 0x14
 2352 0547 24050000 		.4byte	0x524
 2353 054b 0F       		.byte	0xf
 2354 054c 00       		.byte	0x0
 2355 054d 17       		.uleb128 0x17
 2356 054e D4000000 		.4byte	.LASF53
 2357 0552 03       		.byte	0x3
 2358 0553 E7       		.byte	0xe7
 2359 0554 3D050000 		.4byte	0x53d
 2360 0558 01       		.byte	0x1
 2361 0559 05       		.byte	0x5
 2362 055a 03       		.byte	0x3
 2363 055b 00000000 		.4byte	CPU_Name
 2364 055f 17       		.uleb128 0x17
 2365 0560 64000000 		.4byte	.LASF54
 2366 0564 03       		.byte	0x3
 2367 0565 F8       		.byte	0xf8
 2368 0566 17010000 		.4byte	0x117
 2369 056a 01       		.byte	0x1
 2370 056b 05       		.byte	0x5
 2371 056c 03       		.byte	0x3
 2372 056d 00000000 		.4byte	CPU_TS_TmrFreq_Hz
 2373 0571 00       		.byte	0x0
 2374              		.section	.debug_abbrev
 2375 0000 01       		.uleb128 0x1
 2376 0001 11       		.uleb128 0x11
 2377 0002 01       		.byte	0x1
 2378 0003 25       		.uleb128 0x25
 2379 0004 0E       		.uleb128 0xe
 2380 0005 13       		.uleb128 0x13
 2381 0006 0B       		.uleb128 0xb
 2382 0007 03       		.uleb128 0x3
 2383 0008 0E       		.uleb128 0xe
 2384 0009 1B       		.uleb128 0x1b
 2385 000a 0E       		.uleb128 0xe
 2386 000b 11       		.uleb128 0x11
 2387 000c 01       		.uleb128 0x1
 2388 000d 52       		.uleb128 0x52
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 81


 2389 000e 01       		.uleb128 0x1
 2390 000f 55       		.uleb128 0x55
 2391 0010 06       		.uleb128 0x6
 2392 0011 10       		.uleb128 0x10
 2393 0012 06       		.uleb128 0x6
 2394 0013 00       		.byte	0x0
 2395 0014 00       		.byte	0x0
 2396 0015 02       		.uleb128 0x2
 2397 0016 16       		.uleb128 0x16
 2398 0017 00       		.byte	0x0
 2399 0018 03       		.uleb128 0x3
 2400 0019 0E       		.uleb128 0xe
 2401 001a 3A       		.uleb128 0x3a
 2402 001b 0B       		.uleb128 0xb
 2403 001c 3B       		.uleb128 0x3b
 2404 001d 0B       		.uleb128 0xb
 2405 001e 49       		.uleb128 0x49
 2406 001f 13       		.uleb128 0x13
 2407 0020 00       		.byte	0x0
 2408 0021 00       		.byte	0x0
 2409 0022 03       		.uleb128 0x3
 2410 0023 24       		.uleb128 0x24
 2411 0024 00       		.byte	0x0
 2412 0025 0B       		.uleb128 0xb
 2413 0026 0B       		.uleb128 0xb
 2414 0027 3E       		.uleb128 0x3e
 2415 0028 0B       		.uleb128 0xb
 2416 0029 03       		.uleb128 0x3
 2417 002a 0E       		.uleb128 0xe
 2418 002b 00       		.byte	0x0
 2419 002c 00       		.byte	0x0
 2420 002d 04       		.uleb128 0x4
 2421 002e 24       		.uleb128 0x24
 2422 002f 00       		.byte	0x0
 2423 0030 0B       		.uleb128 0xb
 2424 0031 0B       		.uleb128 0xb
 2425 0032 3E       		.uleb128 0x3e
 2426 0033 0B       		.uleb128 0xb
 2427 0034 03       		.uleb128 0x3
 2428 0035 08       		.uleb128 0x8
 2429 0036 00       		.byte	0x0
 2430 0037 00       		.byte	0x0
 2431 0038 05       		.uleb128 0x5
 2432 0039 16       		.uleb128 0x16
 2433 003a 00       		.byte	0x0
 2434 003b 03       		.uleb128 0x3
 2435 003c 0E       		.uleb128 0xe
 2436 003d 3A       		.uleb128 0x3a
 2437 003e 0B       		.uleb128 0xb
 2438 003f 3B       		.uleb128 0x3b
 2439 0040 05       		.uleb128 0x5
 2440 0041 49       		.uleb128 0x49
 2441 0042 13       		.uleb128 0x13
 2442 0043 00       		.byte	0x0
 2443 0044 00       		.byte	0x0
 2444 0045 06       		.uleb128 0x6
 2445 0046 04       		.uleb128 0x4
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 82


 2446 0047 01       		.byte	0x1
 2447 0048 03       		.uleb128 0x3
 2448 0049 0E       		.uleb128 0xe
 2449 004a 0B       		.uleb128 0xb
 2450 004b 0B       		.uleb128 0xb
 2451 004c 3A       		.uleb128 0x3a
 2452 004d 0B       		.uleb128 0xb
 2453 004e 3B       		.uleb128 0x3b
 2454 004f 0B       		.uleb128 0xb
 2455 0050 01       		.uleb128 0x1
 2456 0051 13       		.uleb128 0x13
 2457 0052 00       		.byte	0x0
 2458 0053 00       		.byte	0x0
 2459 0054 07       		.uleb128 0x7
 2460 0055 28       		.uleb128 0x28
 2461 0056 00       		.byte	0x0
 2462 0057 03       		.uleb128 0x3
 2463 0058 0E       		.uleb128 0xe
 2464 0059 1C       		.uleb128 0x1c
 2465 005a 0D       		.uleb128 0xd
 2466 005b 00       		.byte	0x0
 2467 005c 00       		.byte	0x0
 2468 005d 08       		.uleb128 0x8
 2469 005e 2E       		.uleb128 0x2e
 2470 005f 00       		.byte	0x0
 2471 0060 3F       		.uleb128 0x3f
 2472 0061 0C       		.uleb128 0xc
 2473 0062 03       		.uleb128 0x3
 2474 0063 0E       		.uleb128 0xe
 2475 0064 3A       		.uleb128 0x3a
 2476 0065 0B       		.uleb128 0xb
 2477 0066 3B       		.uleb128 0x3b
 2478 0067 0B       		.uleb128 0xb
 2479 0068 27       		.uleb128 0x27
 2480 0069 0C       		.uleb128 0xc
 2481 006a 11       		.uleb128 0x11
 2482 006b 01       		.uleb128 0x1
 2483 006c 12       		.uleb128 0x12
 2484 006d 01       		.uleb128 0x1
 2485 006e 40       		.uleb128 0x40
 2486 006f 06       		.uleb128 0x6
 2487 0070 00       		.byte	0x0
 2488 0071 00       		.byte	0x0
 2489 0072 09       		.uleb128 0x9
 2490 0073 2E       		.uleb128 0x2e
 2491 0074 01       		.byte	0x1
 2492 0075 3F       		.uleb128 0x3f
 2493 0076 0C       		.uleb128 0xc
 2494 0077 03       		.uleb128 0x3
 2495 0078 0E       		.uleb128 0xe
 2496 0079 3A       		.uleb128 0x3a
 2497 007a 0B       		.uleb128 0xb
 2498 007b 3B       		.uleb128 0x3b
 2499 007c 05       		.uleb128 0x5
 2500 007d 27       		.uleb128 0x27
 2501 007e 0C       		.uleb128 0xc
 2502 007f 11       		.uleb128 0x11
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 83


 2503 0080 01       		.uleb128 0x1
 2504 0081 12       		.uleb128 0x12
 2505 0082 01       		.uleb128 0x1
 2506 0083 40       		.uleb128 0x40
 2507 0084 06       		.uleb128 0x6
 2508 0085 01       		.uleb128 0x1
 2509 0086 13       		.uleb128 0x13
 2510 0087 00       		.byte	0x0
 2511 0088 00       		.byte	0x0
 2512 0089 0A       		.uleb128 0xa
 2513 008a 34       		.uleb128 0x34
 2514 008b 00       		.byte	0x0
 2515 008c 03       		.uleb128 0x3
 2516 008d 0E       		.uleb128 0xe
 2517 008e 3A       		.uleb128 0x3a
 2518 008f 0B       		.uleb128 0xb
 2519 0090 3B       		.uleb128 0x3b
 2520 0091 05       		.uleb128 0x5
 2521 0092 49       		.uleb128 0x49
 2522 0093 13       		.uleb128 0x13
 2523 0094 02       		.uleb128 0x2
 2524 0095 0A       		.uleb128 0xa
 2525 0096 00       		.byte	0x0
 2526 0097 00       		.byte	0x0
 2527 0098 0B       		.uleb128 0xb
 2528 0099 05       		.uleb128 0x5
 2529 009a 00       		.byte	0x0
 2530 009b 03       		.uleb128 0x3
 2531 009c 0E       		.uleb128 0xe
 2532 009d 3A       		.uleb128 0x3a
 2533 009e 0B       		.uleb128 0xb
 2534 009f 3B       		.uleb128 0x3b
 2535 00a0 05       		.uleb128 0x5
 2536 00a1 49       		.uleb128 0x49
 2537 00a2 13       		.uleb128 0x13
 2538 00a3 02       		.uleb128 0x2
 2539 00a4 0A       		.uleb128 0xa
 2540 00a5 00       		.byte	0x0
 2541 00a6 00       		.byte	0x0
 2542 00a7 0C       		.uleb128 0xc
 2543 00a8 0F       		.uleb128 0xf
 2544 00a9 00       		.byte	0x0
 2545 00aa 0B       		.uleb128 0xb
 2546 00ab 0B       		.uleb128 0xb
 2547 00ac 49       		.uleb128 0x49
 2548 00ad 13       		.uleb128 0x13
 2549 00ae 00       		.byte	0x0
 2550 00af 00       		.byte	0x0
 2551 00b0 0D       		.uleb128 0xd
 2552 00b1 34       		.uleb128 0x34
 2553 00b2 00       		.byte	0x0
 2554 00b3 03       		.uleb128 0x3
 2555 00b4 08       		.uleb128 0x8
 2556 00b5 3A       		.uleb128 0x3a
 2557 00b6 0B       		.uleb128 0xb
 2558 00b7 3B       		.uleb128 0x3b
 2559 00b8 05       		.uleb128 0x5
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 84


 2560 00b9 49       		.uleb128 0x49
 2561 00ba 13       		.uleb128 0x13
 2562 00bb 02       		.uleb128 0x2
 2563 00bc 0A       		.uleb128 0xa
 2564 00bd 00       		.byte	0x0
 2565 00be 00       		.byte	0x0
 2566 00bf 0E       		.uleb128 0xe
 2567 00c0 26       		.uleb128 0x26
 2568 00c1 00       		.byte	0x0
 2569 00c2 49       		.uleb128 0x49
 2570 00c3 13       		.uleb128 0x13
 2571 00c4 00       		.byte	0x0
 2572 00c5 00       		.byte	0x0
 2573 00c6 0F       		.uleb128 0xf
 2574 00c7 2E       		.uleb128 0x2e
 2575 00c8 01       		.byte	0x1
 2576 00c9 3F       		.uleb128 0x3f
 2577 00ca 0C       		.uleb128 0xc
 2578 00cb 03       		.uleb128 0x3
 2579 00cc 0E       		.uleb128 0xe
 2580 00cd 3A       		.uleb128 0x3a
 2581 00ce 0B       		.uleb128 0xb
 2582 00cf 3B       		.uleb128 0x3b
 2583 00d0 05       		.uleb128 0x5
 2584 00d1 27       		.uleb128 0x27
 2585 00d2 0C       		.uleb128 0xc
 2586 00d3 49       		.uleb128 0x49
 2587 00d4 13       		.uleb128 0x13
 2588 00d5 11       		.uleb128 0x11
 2589 00d6 01       		.uleb128 0x1
 2590 00d7 12       		.uleb128 0x12
 2591 00d8 01       		.uleb128 0x1
 2592 00d9 40       		.uleb128 0x40
 2593 00da 06       		.uleb128 0x6
 2594 00db 01       		.uleb128 0x1
 2595 00dc 13       		.uleb128 0x13
 2596 00dd 00       		.byte	0x0
 2597 00de 00       		.byte	0x0
 2598 00df 10       		.uleb128 0x10
 2599 00e0 2E       		.uleb128 0x2e
 2600 00e1 00       		.byte	0x0
 2601 00e2 3F       		.uleb128 0x3f
 2602 00e3 0C       		.uleb128 0xc
 2603 00e4 03       		.uleb128 0x3
 2604 00e5 0E       		.uleb128 0xe
 2605 00e6 3A       		.uleb128 0x3a
 2606 00e7 0B       		.uleb128 0xb
 2607 00e8 3B       		.uleb128 0x3b
 2608 00e9 05       		.uleb128 0x5
 2609 00ea 27       		.uleb128 0x27
 2610 00eb 0C       		.uleb128 0xc
 2611 00ec 11       		.uleb128 0x11
 2612 00ed 01       		.uleb128 0x1
 2613 00ee 12       		.uleb128 0x12
 2614 00ef 01       		.uleb128 0x1
 2615 00f0 40       		.uleb128 0x40
 2616 00f1 06       		.uleb128 0x6
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 85


 2617 00f2 00       		.byte	0x0
 2618 00f3 00       		.byte	0x0
 2619 00f4 11       		.uleb128 0x11
 2620 00f5 05       		.uleb128 0x5
 2621 00f6 00       		.byte	0x0
 2622 00f7 03       		.uleb128 0x3
 2623 00f8 08       		.uleb128 0x8
 2624 00f9 3A       		.uleb128 0x3a
 2625 00fa 0B       		.uleb128 0xb
 2626 00fb 3B       		.uleb128 0x3b
 2627 00fc 05       		.uleb128 0x5
 2628 00fd 49       		.uleb128 0x49
 2629 00fe 13       		.uleb128 0x13
 2630 00ff 02       		.uleb128 0x2
 2631 0100 0A       		.uleb128 0xa
 2632 0101 00       		.byte	0x0
 2633 0102 00       		.byte	0x0
 2634 0103 12       		.uleb128 0x12
 2635 0104 2E       		.uleb128 0x2e
 2636 0105 00       		.byte	0x0
 2637 0106 03       		.uleb128 0x3
 2638 0107 0E       		.uleb128 0xe
 2639 0108 3A       		.uleb128 0x3a
 2640 0109 0B       		.uleb128 0xb
 2641 010a 3B       		.uleb128 0x3b
 2642 010b 05       		.uleb128 0x5
 2643 010c 27       		.uleb128 0x27
 2644 010d 0C       		.uleb128 0xc
 2645 010e 11       		.uleb128 0x11
 2646 010f 01       		.uleb128 0x1
 2647 0110 12       		.uleb128 0x12
 2648 0111 01       		.uleb128 0x1
 2649 0112 40       		.uleb128 0x40
 2650 0113 06       		.uleb128 0x6
 2651 0114 00       		.byte	0x0
 2652 0115 00       		.byte	0x0
 2653 0116 13       		.uleb128 0x13
 2654 0117 01       		.uleb128 0x1
 2655 0118 01       		.byte	0x1
 2656 0119 49       		.uleb128 0x49
 2657 011a 13       		.uleb128 0x13
 2658 011b 01       		.uleb128 0x1
 2659 011c 13       		.uleb128 0x13
 2660 011d 00       		.byte	0x0
 2661 011e 00       		.byte	0x0
 2662 011f 14       		.uleb128 0x14
 2663 0120 21       		.uleb128 0x21
 2664 0121 00       		.byte	0x0
 2665 0122 49       		.uleb128 0x49
 2666 0123 13       		.uleb128 0x13
 2667 0124 2F       		.uleb128 0x2f
 2668 0125 0B       		.uleb128 0xb
 2669 0126 00       		.byte	0x0
 2670 0127 00       		.byte	0x0
 2671 0128 15       		.uleb128 0x15
 2672 0129 24       		.uleb128 0x24
 2673 012a 00       		.byte	0x0
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 86


 2674 012b 0B       		.uleb128 0xb
 2675 012c 0B       		.uleb128 0xb
 2676 012d 3E       		.uleb128 0x3e
 2677 012e 0B       		.uleb128 0xb
 2678 012f 00       		.byte	0x0
 2679 0130 00       		.byte	0x0
 2680 0131 16       		.uleb128 0x16
 2681 0132 34       		.uleb128 0x34
 2682 0133 00       		.byte	0x0
 2683 0134 03       		.uleb128 0x3
 2684 0135 0E       		.uleb128 0xe
 2685 0136 3A       		.uleb128 0x3a
 2686 0137 0B       		.uleb128 0xb
 2687 0138 3B       		.uleb128 0x3b
 2688 0139 0B       		.uleb128 0xb
 2689 013a 49       		.uleb128 0x49
 2690 013b 13       		.uleb128 0x13
 2691 013c 02       		.uleb128 0x2
 2692 013d 0A       		.uleb128 0xa
 2693 013e 00       		.byte	0x0
 2694 013f 00       		.byte	0x0
 2695 0140 17       		.uleb128 0x17
 2696 0141 34       		.uleb128 0x34
 2697 0142 00       		.byte	0x0
 2698 0143 03       		.uleb128 0x3
 2699 0144 0E       		.uleb128 0xe
 2700 0145 3A       		.uleb128 0x3a
 2701 0146 0B       		.uleb128 0xb
 2702 0147 3B       		.uleb128 0x3b
 2703 0148 0B       		.uleb128 0xb
 2704 0149 49       		.uleb128 0x49
 2705 014a 13       		.uleb128 0x13
 2706 014b 3F       		.uleb128 0x3f
 2707 014c 0C       		.uleb128 0xc
 2708 014d 02       		.uleb128 0x2
 2709 014e 0A       		.uleb128 0xa
 2710 014f 00       		.byte	0x0
 2711 0150 00       		.byte	0x0
 2712 0151 00       		.byte	0x0
 2713              		.section	.debug_pubnames,"",%progbits
 2714 0000 8E010000 		.4byte	0x18e
 2715 0004 0200     		.2byte	0x2
 2716 0006 00000000 		.4byte	.Ldebug_info0
 2717 000a 72050000 		.4byte	0x572
 2718 000e 22010000 		.4byte	0x122
 2719 0012 4350555F 		.ascii	"CPU_Init\000"
 2719      496E6974 
 2719      00
 2720 001b 37010000 		.4byte	0x137
 2721 001f 4350555F 		.ascii	"CPU_SW_Exception\000"
 2721      53575F45 
 2721      78636570 
 2721      74696F6E 
 2721      00
 2722 0030 4C010000 		.4byte	0x14c
 2723 0034 4350555F 		.ascii	"CPU_NameClr\000"
 2723      4E616D65 
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 87


 2723      436C7200 
 2724 0040 76010000 		.4byte	0x176
 2725 0044 4350555F 		.ascii	"CPU_NameGet\000"
 2725      4E616D65 
 2725      47657400 
 2726 0050 CA010000 		.4byte	0x1ca
 2727 0054 4350555F 		.ascii	"CPU_NameSet\000"
 2727      4E616D65 
 2727      53657400 
 2728 0060 2C020000 		.4byte	0x22c
 2729 0064 4350555F 		.ascii	"CPU_TS_Get32\000"
 2729      54535F47 
 2729      65743332 
 2729      00
 2730 0071 59020000 		.4byte	0x259
 2731 0075 4350555F 		.ascii	"CPU_TS_Update\000"
 2731      54535F55 
 2731      70646174 
 2731      6500
 2732 0083 6F020000 		.4byte	0x26f
 2733 0087 4350555F 		.ascii	"CPU_TS_TmrFreqGet\000"
 2733      54535F54 
 2733      6D724672 
 2733      65714765 
 2733      7400
 2734 0099 AC020000 		.4byte	0x2ac
 2735 009d 4350555F 		.ascii	"CPU_TS_TmrFreqSet\000"
 2735      54535F54 
 2735      6D724672 
 2735      65715365 
 2735      7400
 2736 00af D6020000 		.4byte	0x2d6
 2737 00b3 4350555F 		.ascii	"CPU_CntLeadZeros08\000"
 2737      436E744C 
 2737      6561645A 
 2737      65726F73 
 2737      303800
 2738 00c6 13030000 		.4byte	0x313
 2739 00ca 4350555F 		.ascii	"CPU_CntLeadZeros16\000"
 2739      436E744C 
 2739      6561645A 
 2739      65726F73 
 2739      313600
 2740 00dd 50030000 		.4byte	0x350
 2741 00e1 4350555F 		.ascii	"CPU_CntLeadZeros32\000"
 2741      436E744C 
 2741      6561645A 
 2741      65726F73 
 2741      333200
 2742 00f4 8D030000 		.4byte	0x38d
 2743 00f8 4350555F 		.ascii	"CPU_CntLeadZeros64\000"
 2743      436E744C 
 2743      6561645A 
 2743      65726F73 
 2743      363400
 2744 010b D8030000 		.4byte	0x3d8
 2745 010f 4350555F 		.ascii	"CPU_CntTrailZeros08\000"
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 88


 2745      436E7454 
 2745      7261696C 
 2745      5A65726F 
 2745      73303800 
 2746 0123 15040000 		.4byte	0x415
 2747 0127 4350555F 		.ascii	"CPU_CntTrailZeros16\000"
 2747      436E7454 
 2747      7261696C 
 2747      5A65726F 
 2747      73313600 
 2748 013b 52040000 		.4byte	0x452
 2749 013f 4350555F 		.ascii	"CPU_CntTrailZeros32\000"
 2749      436E7454 
 2749      7261696C 
 2749      5A65726F 
 2749      73333200 
 2750 0153 8F040000 		.4byte	0x48f
 2751 0157 4350555F 		.ascii	"CPU_CntTrailZeros64\000"
 2751      436E7454 
 2751      7261696C 
 2751      5A65726F 
 2751      73363400 
 2752 016b 4D050000 		.4byte	0x54d
 2753 016f 4350555F 		.ascii	"CPU_Name\000"
 2753      4E616D65 
 2753      00
 2754 0178 5F050000 		.4byte	0x55f
 2755 017c 4350555F 		.ascii	"CPU_TS_TmrFreq_Hz\000"
 2755      54535F54 
 2755      6D724672 
 2755      65715F48 
 2755      7A00
 2756 018e 00000000 		.4byte	0x0
 2757              		.section	.debug_aranges,"",%progbits
 2758 0000 AC000000 		.4byte	0xac
 2759 0004 0200     		.2byte	0x2
 2760 0006 00000000 		.4byte	.Ldebug_info0
 2761 000a 04       		.byte	0x4
 2762 000b 00       		.byte	0x0
 2763 000c 0000     		.2byte	0x0
 2764 000e 0000     		.2byte	0x0
 2765 0010 00000000 		.4byte	.LFB0
 2766 0014 0E000000 		.4byte	.LFE0-.LFB0
 2767 0018 00000000 		.4byte	.LFB1
 2768 001c 06000000 		.4byte	.LFE1-.LFB1
 2769 0020 00000000 		.4byte	.LFB2
 2770 0024 32000000 		.4byte	.LFE2-.LFB2
 2771 0028 00000000 		.4byte	.LFB3
 2772 002c 5A000000 		.4byte	.LFE3-.LFB3
 2773 0030 00000000 		.4byte	.LFB4
 2774 0034 78000000 		.4byte	.LFE4-.LFB4
 2775 0038 00000000 		.4byte	.LFB5
 2776 003c 1A000000 		.4byte	.LFE5-.LFB5
 2777 0040 00000000 		.4byte	.LFB6
 2778 0044 0A000000 		.4byte	.LFE6-.LFB6
 2779 0048 00000000 		.4byte	.LFB7
 2780 004c 3E000000 		.4byte	.LFE7-.LFB7
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 89


 2781 0050 00000000 		.4byte	.LFB8
 2782 0054 1E000000 		.4byte	.LFE8-.LFB8
 2783 0058 00000000 		.4byte	.LFB9
 2784 005c 2A000000 		.4byte	.LFE9-.LFB9
 2785 0060 00000000 		.4byte	.LFB10
 2786 0064 2A000000 		.4byte	.LFE10-.LFB10
 2787 0068 00000000 		.4byte	.LFB11
 2788 006c 1E000000 		.4byte	.LFE11-.LFB11
 2789 0070 00000000 		.4byte	.LFB12
 2790 0074 DE010000 		.4byte	.LFE12-.LFB12
 2791 0078 00000000 		.4byte	.LFB13
 2792 007c 2E000000 		.4byte	.LFE13-.LFB13
 2793 0080 00000000 		.4byte	.LFB14
 2794 0084 2E000000 		.4byte	.LFE14-.LFB14
 2795 0088 00000000 		.4byte	.LFB15
 2796 008c 2A000000 		.4byte	.LFE15-.LFB15
 2797 0090 00000000 		.4byte	.LFB16
 2798 0094 54000000 		.4byte	.LFE16-.LFB16
 2799 0098 00000000 		.4byte	.LFB17
 2800 009c 0A000000 		.4byte	.LFE17-.LFB17
 2801 00a0 00000000 		.4byte	.LFB18
 2802 00a4 18000000 		.4byte	.LFE18-.LFB18
 2803 00a8 00000000 		.4byte	0x0
 2804 00ac 00000000 		.4byte	0x0
 2805              		.section	.debug_ranges,"",%progbits
 2806              	.Ldebug_ranges0:
 2807 0000 00000000 		.4byte	.Ltext0
 2808 0004 00000000 		.4byte	.Letext0
 2809 0008 00000000 		.4byte	.LFB0
 2810 000c 0E000000 		.4byte	.LFE0
 2811 0010 00000000 		.4byte	.LFB1
 2812 0014 06000000 		.4byte	.LFE1
 2813 0018 00000000 		.4byte	.LFB2
 2814 001c 32000000 		.4byte	.LFE2
 2815 0020 00000000 		.4byte	.LFB3
 2816 0024 5A000000 		.4byte	.LFE3
 2817 0028 00000000 		.4byte	.LFB4
 2818 002c 78000000 		.4byte	.LFE4
 2819 0030 00000000 		.4byte	.LFB5
 2820 0034 1A000000 		.4byte	.LFE5
 2821 0038 00000000 		.4byte	.LFB6
 2822 003c 0A000000 		.4byte	.LFE6
 2823 0040 00000000 		.4byte	.LFB7
 2824 0044 3E000000 		.4byte	.LFE7
 2825 0048 00000000 		.4byte	.LFB8
 2826 004c 1E000000 		.4byte	.LFE8
 2827 0050 00000000 		.4byte	.LFB9
 2828 0054 2A000000 		.4byte	.LFE9
 2829 0058 00000000 		.4byte	.LFB10
 2830 005c 2A000000 		.4byte	.LFE10
 2831 0060 00000000 		.4byte	.LFB11
 2832 0064 1E000000 		.4byte	.LFE11
 2833 0068 00000000 		.4byte	.LFB12
 2834 006c DE010000 		.4byte	.LFE12
 2835 0070 00000000 		.4byte	.LFB13
 2836 0074 2E000000 		.4byte	.LFE13
 2837 0078 00000000 		.4byte	.LFB14
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 90


 2838 007c 2E000000 		.4byte	.LFE14
 2839 0080 00000000 		.4byte	.LFB15
 2840 0084 2A000000 		.4byte	.LFE15
 2841 0088 00000000 		.4byte	.LFB16
 2842 008c 54000000 		.4byte	.LFE16
 2843 0090 00000000 		.4byte	.LFB17
 2844 0094 0A000000 		.4byte	.LFE17
 2845 0098 00000000 		.4byte	.LFB18
 2846 009c 18000000 		.4byte	.LFE18
 2847 00a0 00000000 		.4byte	0x0
 2848 00a4 00000000 		.4byte	0x0
 2849              		.section	.debug_str,"MS",%progbits,1
 2850              	.LASF25:
 2851 0000 4350555F 		.ascii	"CPU_TS_TMR_FREQ\000"
 2851      54535F54 
 2851      4D525F46 
 2851      52455100 
 2852              	.LASF39:
 2853 0010 4350555F 		.ascii	"CPU_CntLeadZeros08\000"
 2853      436E744C 
 2853      6561645A 
 2853      65726F73 
 2853      303800
 2854              	.LASF22:
 2855 0023 4350555F 		.ascii	"CPU_ERR_TS_FREQ_INVALID\000"
 2855      4552525F 
 2855      54535F46 
 2855      5245515F 
 2855      494E5641 
 2856              	.LASF27:
 2857 003b 4350555F 		.ascii	"CPU_SW_Exception\000"
 2857      53575F45 
 2857      78636570 
 2857      74696F6E 
 2857      00
 2858              	.LASF7:
 2859 004c 73686F72 		.ascii	"short int\000"
 2859      7420696E 
 2859      7400
 2860              	.LASF23:
 2861 0056 4350555F 		.ascii	"CPU_ERR\000"
 2861      45525200 
 2862              	.LASF31:
 2863 005e 705F6572 		.ascii	"p_err\000"
 2863      7200
 2864              	.LASF54:
 2865 0064 4350555F 		.ascii	"CPU_TS_TmrFreq_Hz\000"
 2865      54535F54 
 2865      6D724672 
 2865      65715F48 
 2865      7A00
 2866              	.LASF45:
 2867 0076 6E62725F 		.ascii	"nbr_trail_zeros\000"
 2867      74726169 
 2867      6C5F7A65 
 2867      726F7300 
 2868              	.LASF26:
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 91


 2869 0086 4350555F 		.ascii	"CPU_Init\000"
 2869      496E6974 
 2869      00
 2870              	.LASF50:
 2871 008f 4350555F 		.ascii	"CPU_NameInit\000"
 2871      4E616D65 
 2871      496E6974 
 2871      00
 2872              	.LASF40:
 2873 009c 6E62725F 		.ascii	"nbr_lead_zeros\000"
 2873      6C656164 
 2873      5F7A6572 
 2873      6F7300
 2874              	.LASF38:
 2875 00ab 4350555F 		.ascii	"CPU_TS_TmrFreqSet\000"
 2875      54535F54 
 2875      6D724672 
 2875      65715365 
 2875      7400
 2876              	.LASF15:
 2877 00bd 4350555F 		.ascii	"CPU_ADDR\000"
 2877      41444452 
 2877      00
 2878              	.LASF58:
 2879 00c6 6370755F 		.ascii	"cpu_err\000"
 2879      65727200 
 2880              	.LASF13:
 2881 00ce 666C6F61 		.ascii	"float\000"
 2881      7400
 2882              	.LASF53:
 2883 00d4 4350555F 		.ascii	"CPU_Name\000"
 2883      4E616D65 
 2883      00
 2884              	.LASF12:
 2885 00dd 6C6F6E67 		.ascii	"long long int\000"
 2885      206C6F6E 
 2885      6720696E 
 2885      7400
 2886              	.LASF41:
 2887 00eb 4350555F 		.ascii	"CPU_CntLeadZeros16\000"
 2887      436E744C 
 2887      6561645A 
 2887      65726F73 
 2887      313600
 2888              	.LASF51:
 2889 00fe 4350555F 		.ascii	"CPU_TS_Init\000"
 2889      54535F49 
 2889      6E697400 
 2890              	.LASF33:
 2891 010a 4350555F 		.ascii	"CPU_NameSet\000"
 2891      4E616D65 
 2891      53657400 
 2892              	.LASF48:
 2893 0116 4350555F 		.ascii	"CPU_CntTrailZeros64\000"
 2893      436E7454 
 2893      7261696C 
 2893      5A65726F 
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 92


 2893      73363400 
 2894              	.LASF56:
 2895 012a 433A5C4D 		.ascii	"C:\\Micrium\\Software\\uC-CPU\\cpu_core.c\000"
 2895      69637269 
 2895      756D5C53 
 2895      6F667477 
 2895      6172655C 
 2896              	.LASF20:
 2897 0150 4350555F 		.ascii	"CPU_ERR_NULL_PTR\000"
 2897      4552525F 
 2897      4E554C4C 
 2897      5F505452 
 2897      00
 2898              	.LASF1:
 2899 0161 756E7369 		.ascii	"unsigned char\000"
 2899      676E6564 
 2899      20636861 
 2899      7200
 2900              	.LASF4:
 2901 016f 7369676E 		.ascii	"signed char\000"
 2901      65642063 
 2901      68617200 
 2902              	.LASF37:
 2903 017b 66726571 		.ascii	"freq_hz\000"
 2903      5F687A00 
 2904              	.LASF11:
 2905 0183 6C6F6E67 		.ascii	"long long unsigned int\000"
 2905      206C6F6E 
 2905      6720756E 
 2905      7369676E 
 2905      65642069 
 2906              	.LASF19:
 2907 019a 4350555F 		.ascii	"CPU_ERR_NONE\000"
 2907      4552525F 
 2907      4E4F4E45 
 2907      00
 2908              	.LASF2:
 2909 01a7 4350555F 		.ascii	"CPU_CHAR\000"
 2909      43484152 
 2909      00
 2910              	.LASF9:
 2911 01b0 756E7369 		.ascii	"unsigned int\000"
 2911      676E6564 
 2911      20696E74 
 2911      00
 2912              	.LASF49:
 2913 01bd 76616C5F 		.ascii	"val_bit_mask\000"
 2913      6269745F 
 2913      6D61736B 
 2913      00
 2914              	.LASF34:
 2915 01ca 4350555F 		.ascii	"CPU_TS_Update\000"
 2915      54535F55 
 2915      70646174 
 2915      6500
 2916              	.LASF6:
 2917 01d8 73686F72 		.ascii	"short unsigned int\000"
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 93


 2917      7420756E 
 2917      7369676E 
 2917      65642069 
 2917      6E7400
 2918              	.LASF47:
 2919 01eb 4350555F 		.ascii	"CPU_CntTrailZeros32\000"
 2919      436E7454 
 2919      7261696C 
 2919      5A65726F 
 2919      73333200 
 2920              	.LASF16:
 2921 01ff 4350555F 		.ascii	"CPU_DATA\000"
 2921      44415441 
 2921      00
 2922              	.LASF3:
 2923 0208 4350555F 		.ascii	"CPU_INT08U\000"
 2923      494E5430 
 2923      385500
 2924              	.LASF35:
 2925 0213 4350555F 		.ascii	"CPU_TS_Get32\000"
 2925      54535F47 
 2925      65743332 
 2925      00
 2926              	.LASF0:
 2927 0220 63686172 		.ascii	"char\000"
 2927      00
 2928              	.LASF30:
 2929 0225 705F6E61 		.ascii	"p_name\000"
 2929      6D6500
 2930              	.LASF57:
 2931 022c 433A5C55 		.ascii	"C:\\Users\\daniel01\\Desktop\\CY8CKIT-050_uCOS-III\\"
 2931      73657273 
 2931      5C64616E 
 2931      69656C30 
 2931      315C4465 
 2932 025b 43593843 		.ascii	"CY8CKIT-050_uCOS-III\\Micrium\\Software\\EvalBoards"
 2932      4B49542D 
 2932      3035305F 
 2932      75434F53 
 2932      2D494949 
 2933 028b 5C437970 		.ascii	"\\Cypress\\CY8CKIT-050\\PSoC\\uCOS-III-Probe\\uCOS-"
 2933      72657373 
 2933      5C435938 
 2933      434B4954 
 2933      2D303530 
 2934 02b9 4949492D 		.ascii	"III-Probe.cydsn\000"
 2934      50726F62 
 2934      652E6379 
 2934      64736E00 
 2935              	.LASF43:
 2936 02c9 4350555F 		.ascii	"CPU_CntLeadZeros64\000"
 2936      436E744C 
 2936      6561645A 
 2936      65726F73 
 2936      363400
 2937              	.LASF8:
 2938 02dc 4350555F 		.ascii	"CPU_INT32U\000"
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 94


 2938      494E5433 
 2938      325500
 2939              	.LASF21:
 2940 02e7 4350555F 		.ascii	"CPU_ERR_NAME_SIZE\000"
 2940      4552525F 
 2940      4E414D45 
 2940      5F53495A 
 2940      4500
 2941              	.LASF46:
 2942 02f9 4350555F 		.ascii	"CPU_CntTrailZeros16\000"
 2942      436E7454 
 2942      7261696C 
 2942      5A65726F 
 2942      73313600 
 2943              	.LASF28:
 2944 030d 4350555F 		.ascii	"CPU_NameClr\000"
 2944      4E616D65 
 2944      436C7200 
 2945              	.LASF14:
 2946 0319 646F7562 		.ascii	"double\000"
 2946      6C6500
 2947              	.LASF29:
 2948 0320 4350555F 		.ascii	"CPU_NameGet\000"
 2948      4E616D65 
 2948      47657400 
 2949              	.LASF24:
 2950 032c 4350555F 		.ascii	"CPU_TS32\000"
 2950      54533332 
 2950      00
 2951              	.LASF17:
 2952 0335 4350555F 		.ascii	"CPU_SIZE_T\000"
 2952      53495A45 
 2952      5F5400
 2953              	.LASF44:
 2954 0340 4350555F 		.ascii	"CPU_CntTrailZeros08\000"
 2954      436E7454 
 2954      7261696C 
 2954      5A65726F 
 2954      73303800 
 2955              	.LASF42:
 2956 0354 4350555F 		.ascii	"CPU_CntLeadZeros32\000"
 2956      436E744C 
 2956      6561645A 
 2956      65726F73 
 2956      333200
 2957              	.LASF10:
 2958 0367 4350555F 		.ascii	"CPU_INT64U\000"
 2958      494E5436 
 2958      345500
 2959              	.LASF32:
 2960 0372 6370755F 		.ascii	"cpu_sr\000"
 2960      737200
 2961              	.LASF55:
 2962 0379 474E5520 		.ascii	"GNU C 4.4.1\000"
 2962      4320342E 
 2962      342E3100 
 2963              	.LASF18:
ARM GAS  C:\Users\daniel01\AppData\Local\Temp\cccLzPAZ.s 			page 95


 2964 0385 4350555F 		.ascii	"CPU_SR\000"
 2964      535200
 2965              	.LASF52:
 2966 038c 4350555F 		.ascii	"CPU_CntLeadZerosTbl\000"
 2966      436E744C 
 2966      6561645A 
 2966      65726F73 
 2966      54626C00 
 2967              	.LASF5:
 2968 03a0 4350555F 		.ascii	"CPU_INT16U\000"
 2968      494E5431 
 2968      365500
 2969              	.LASF36:
 2970 03ab 4350555F 		.ascii	"CPU_TS_TmrFreqGet\000"
 2970      54535F54 
 2970      6D724672 
 2970      65714765 
 2970      7400
 2971              		.ident	"GCC: (Sourcery G++ Lite 2010q1-188) 4.4.1"
